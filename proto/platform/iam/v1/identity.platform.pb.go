// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: identity.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v1 "chainguard.dev/sdk/proto/platform/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServicePrincipal int32

const (
	ServicePrincipal_UNKNOWN        ServicePrincipal = 0
	ServicePrincipal_COSIGNED       ServicePrincipal = 1
	ServicePrincipal_INGESTER       ServicePrincipal = 2
	ServicePrincipal_CATALOG_SYNCER ServicePrincipal = 3
)

// Enum value maps for ServicePrincipal.
var (
	ServicePrincipal_name = map[int32]string{
		0: "UNKNOWN",
		1: "COSIGNED",
		2: "INGESTER",
		3: "CATALOG_SYNCER",
	}
	ServicePrincipal_value = map[string]int32{
		"UNKNOWN":        0,
		"COSIGNED":       1,
		"INGESTER":       2,
		"CATALOG_SYNCER": 3,
	}
)

func (x ServicePrincipal) Enum() *ServicePrincipal {
	p := new(ServicePrincipal)
	*p = x
	return p
}

func (x ServicePrincipal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePrincipal) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_platform_proto_enumTypes[0].Descriptor()
}

func (ServicePrincipal) Type() protoreflect.EnumType {
	return &file_identity_platform_proto_enumTypes[0]
}

func (x ServicePrincipal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePrincipal.Descriptor instead.
func (ServicePrincipal) EnumDescriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{0}
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is unique identifier of this specific identity.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name, human readable name of identity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description, human readable of identity.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// created_at is the timestamp for when the identity was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the timestamp for when the identity was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// relationship is used to describe how this identity relates to
	// identities coming from 3rd party Identity Providers (IdPs)
	//
	// Types that are assignable to Relationship:
	//
	//	*Identity_ClaimMatch_
	//	*Identity_Static
	//	*Identity_ServicePrincipal
	//	*Identity_AwsIdentity
	Relationship isIdentity_Relationship `protobuf_oneof:"relationship"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{0}
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Identity) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Identity) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (m *Identity) GetRelationship() isIdentity_Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (x *Identity) GetClaimMatch() *Identity_ClaimMatch {
	if x, ok := x.GetRelationship().(*Identity_ClaimMatch_); ok {
		return x.ClaimMatch
	}
	return nil
}

func (x *Identity) GetStatic() *Identity_StaticKeys {
	if x, ok := x.GetRelationship().(*Identity_Static); ok {
		return x.Static
	}
	return nil
}

func (x *Identity) GetServicePrincipal() ServicePrincipal {
	if x, ok := x.GetRelationship().(*Identity_ServicePrincipal); ok {
		return x.ServicePrincipal
	}
	return ServicePrincipal_UNKNOWN
}

func (x *Identity) GetAwsIdentity() *Identity_AWSIdentity {
	if x, ok := x.GetRelationship().(*Identity_AwsIdentity); ok {
		return x.AwsIdentity
	}
	return nil
}

type isIdentity_Relationship interface {
	isIdentity_Relationship()
}

type Identity_ClaimMatch_ struct {
	// claim_match checks the third party IdP token's claims against one
	// or more configured patterns.
	ClaimMatch *Identity_ClaimMatch `protobuf:"bytes,10,opt,name=claim_match,json=claimMatch,proto3,oneof"`
}

type Identity_Static struct {
	// static is equivalent to literal, but instead of discovering the
	// IdP's verification keys we verify the identity using pre-registered
	// verification keys.  This is intended for use with identities from
	// providers without an "online" issuer (network accessible to our IdP),
	// such as a KinD/minikube cluster.
	// NOTE: because this path does not have a mechanism for key rotation
	// the identity will expire, with a maximum lifetime of 30d.
	Static *Identity_StaticKeys `protobuf:"bytes,11,opt,name=static,proto3,oneof"`
}

type Identity_ServicePrincipal struct {
	// service_principal is the name of the Chainguard service that is
	// allowed to assume this identity.  These names correlate with the
	// service names used in impersonation with account associations.
	ServicePrincipal ServicePrincipal `protobuf:"varint,12,opt,name=service_principal,json=servicePrincipal,proto3,enum=chainguard.platform.iam.ServicePrincipal,oneof"`
}

type Identity_AwsIdentity struct {
	// aws_identity matches AWS IAM users and roles to an identity
	AwsIdentity *Identity_AWSIdentity `protobuf:"bytes,13,opt,name=aws_identity,json=awsIdentity,proto3,oneof"`
}

func (*Identity_ClaimMatch_) isIdentity_Relationship() {}

func (*Identity_Static) isIdentity_Relationship() {}

func (*Identity_ServicePrincipal) isIdentity_Relationship() {}

func (*Identity_AwsIdentity) isIdentity_Relationship() {}

type CreateIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent_id, The Group UIDP path under which the new Identity resides.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Identity to create.
	Identity *Identity `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *CreateIdentityRequest) Reset() {
	*x = CreateIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentityRequest) ProtoMessage() {}

func (x *CreateIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentityRequest.ProtoReflect.Descriptor instead.
func (*CreateIdentityRequest) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIdentityRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateIdentityRequest) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

type DeleteIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID, UIDP of the record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteIdentityRequest) Reset() {
	*x = DeleteIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentityRequest) ProtoMessage() {}

func (x *DeleteIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentityRequest.ProtoReflect.Descriptor instead.
func (*DeleteIdentityRequest) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteIdentityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IdentityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Identity `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *IdentityList) Reset() {
	*x = IdentityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityList) ProtoMessage() {}

func (x *IdentityList) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityList.ProtoReflect.Descriptor instead.
func (*IdentityList) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{3}
}

func (x *IdentityList) GetItems() []*Identity {
	if x != nil {
		return x.Items
	}
	return nil
}

type IdentityFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uidp filters records based on their position in the group hierarchy.
	Uidp *v1.UIDPFilter `protobuf:"bytes,1,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// id is unique identifier to look up.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdentityFilter) Reset() {
	*x = IdentityFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityFilter) ProtoMessage() {}

func (x *IdentityFilter) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityFilter.ProtoReflect.Descriptor instead.
func (*IdentityFilter) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{4}
}

func (x *IdentityFilter) GetUidp() *v1.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *IdentityFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// issuer is the oidc issuer to look up.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// subject is the subject to look up.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{5}
}

func (x *LookupRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *LookupRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type Identity_ClaimMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required, matches the `iss` claim.
	//
	// Types that are assignable to Iss:
	//
	//	*Identity_ClaimMatch_Issuer
	//	*Identity_ClaimMatch_IssuerPattern
	Iss isIdentity_ClaimMatch_Iss `protobuf_oneof:"iss"`
	// Required, matches the `sub` claim.
	//
	// Types that are assignable to Sub:
	//
	//	*Identity_ClaimMatch_Subject
	//	*Identity_ClaimMatch_SubjectPattern
	Sub isIdentity_ClaimMatch_Sub `protobuf_oneof:"sub"`
	// Optional, matches the `aud` claim.
	// When unspecified, this defaults to the hostname of the SaaS
	// environment's issuer.
	//
	// Types that are assignable to Aud:
	//
	//	*Identity_ClaimMatch_Audience
	//	*Identity_ClaimMatch_AudiencePattern
	Aud isIdentity_ClaimMatch_Aud `protobuf_oneof:"aud"`
	// claims is a mapping from the name of a custom claim
	// to a literal matching that claim's value.
	Claims map[string]string `protobuf:"bytes,7,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// claim_patterns is a mapping from the name of a custom claim
	// to a regular expression for matching that claim's value.
	ClaimPatterns map[string]string `protobuf:"bytes,8,rep,name=claim_patterns,json=claimPatterns,proto3" json:"claim_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Identity_ClaimMatch) Reset() {
	*x = Identity_ClaimMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_ClaimMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_ClaimMatch) ProtoMessage() {}

func (x *Identity_ClaimMatch) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_ClaimMatch.ProtoReflect.Descriptor instead.
func (*Identity_ClaimMatch) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Identity_ClaimMatch) GetIss() isIdentity_ClaimMatch_Iss {
	if m != nil {
		return m.Iss
	}
	return nil
}

func (x *Identity_ClaimMatch) GetIssuer() string {
	if x, ok := x.GetIss().(*Identity_ClaimMatch_Issuer); ok {
		return x.Issuer
	}
	return ""
}

func (x *Identity_ClaimMatch) GetIssuerPattern() string {
	if x, ok := x.GetIss().(*Identity_ClaimMatch_IssuerPattern); ok {
		return x.IssuerPattern
	}
	return ""
}

func (m *Identity_ClaimMatch) GetSub() isIdentity_ClaimMatch_Sub {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (x *Identity_ClaimMatch) GetSubject() string {
	if x, ok := x.GetSub().(*Identity_ClaimMatch_Subject); ok {
		return x.Subject
	}
	return ""
}

func (x *Identity_ClaimMatch) GetSubjectPattern() string {
	if x, ok := x.GetSub().(*Identity_ClaimMatch_SubjectPattern); ok {
		return x.SubjectPattern
	}
	return ""
}

func (m *Identity_ClaimMatch) GetAud() isIdentity_ClaimMatch_Aud {
	if m != nil {
		return m.Aud
	}
	return nil
}

func (x *Identity_ClaimMatch) GetAudience() string {
	if x, ok := x.GetAud().(*Identity_ClaimMatch_Audience); ok {
		return x.Audience
	}
	return ""
}

func (x *Identity_ClaimMatch) GetAudiencePattern() string {
	if x, ok := x.GetAud().(*Identity_ClaimMatch_AudiencePattern); ok {
		return x.AudiencePattern
	}
	return ""
}

func (x *Identity_ClaimMatch) GetClaims() map[string]string {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *Identity_ClaimMatch) GetClaimPatterns() map[string]string {
	if x != nil {
		return x.ClaimPatterns
	}
	return nil
}

type isIdentity_ClaimMatch_Iss interface {
	isIdentity_ClaimMatch_Iss()
}

type Identity_ClaimMatch_Issuer struct {
	// issuer of the OIDC ID tokens issued for this identity.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3,oneof"`
}

type Identity_ClaimMatch_IssuerPattern struct {
	// issuer_pattern is a regular expression for matching the
	// token's issuer claim.
	IssuerPattern string `protobuf:"bytes,2,opt,name=issuer_pattern,json=issuerPattern,proto3,oneof"`
}

func (*Identity_ClaimMatch_Issuer) isIdentity_ClaimMatch_Iss() {}

func (*Identity_ClaimMatch_IssuerPattern) isIdentity_ClaimMatch_Iss() {}

type isIdentity_ClaimMatch_Sub interface {
	isIdentity_ClaimMatch_Sub()
}

type Identity_ClaimMatch_Subject struct {
	// subject of OIDC ID tokens issued for this identity.
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3,oneof"`
}

type Identity_ClaimMatch_SubjectPattern struct {
	// subject_pattern is a regular expression for matching the
	// token's subject claim.
	SubjectPattern string `protobuf:"bytes,4,opt,name=subject_pattern,json=subjectPattern,proto3,oneof"`
}

func (*Identity_ClaimMatch_Subject) isIdentity_ClaimMatch_Sub() {}

func (*Identity_ClaimMatch_SubjectPattern) isIdentity_ClaimMatch_Sub() {}

type isIdentity_ClaimMatch_Aud interface {
	isIdentity_ClaimMatch_Aud()
}

type Identity_ClaimMatch_Audience struct {
	// audience of OIDC ID tokens issued for this identity.
	Audience string `protobuf:"bytes,5,opt,name=audience,proto3,oneof"`
}

type Identity_ClaimMatch_AudiencePattern struct {
	// audience_pattern is a regular expression for matching the
	// token's audience claim.
	AudiencePattern string `protobuf:"bytes,6,opt,name=audience_pattern,json=audiencePattern,proto3,oneof"`
}

func (*Identity_ClaimMatch_Audience) isIdentity_ClaimMatch_Aud() {}

func (*Identity_ClaimMatch_AudiencePattern) isIdentity_ClaimMatch_Aud() {}

type Identity_StaticKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// issuer of the OIDC ID tokens issued for this identity.
	// Matches the `iss` claim.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// subject of OIDC ID tokens issued for this identity.
	// Matches the `sub` claim.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// issuer_keys is JWKS-formatted public keys for the issuer.
	// Required, otherwise use Literal.
	IssuerKeys string `protobuf:"bytes,4,opt,name=issuer_keys,json=issuerKeys,proto3" json:"issuer_keys,omitempty"`
	// expiration is the time when the issuer_keys will expire.
	// Defaults to / Maximum of 30 days after creation time.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *Identity_StaticKeys) Reset() {
	*x = Identity_StaticKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_StaticKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_StaticKeys) ProtoMessage() {}

func (x *Identity_StaticKeys) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_StaticKeys.ProtoReflect.Descriptor instead.
func (*Identity_StaticKeys) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Identity_StaticKeys) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Identity_StaticKeys) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Identity_StaticKeys) GetIssuerKeys() string {
	if x != nil {
		return x.IssuerKeys
	}
	return ""
}

func (x *Identity_StaticKeys) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type Identity_AWSIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required, matches the `Account` field in the GetCallerID AWS IAM
	// response
	AwsAccount string `protobuf:"bytes,1,opt,name=aws_account,json=awsAccount,proto3" json:"aws_account,omitempty"`
	// Required, matches the `Arn` field in the GetCallerID AWS IAM response
	//
	// Types that are assignable to AwsArn:
	//
	//	*Identity_AWSIdentity_Arn
	//	*Identity_AWSIdentity_ArnPattern
	AwsArn isIdentity_AWSIdentity_AwsArn `protobuf_oneof:"aws_arn"`
	// Required, matches the `UserId` field of th GetCallerID AWS IAM response
	//
	// Types that are assignable to AwsUserId:
	//
	//	*Identity_AWSIdentity_UserId
	//	*Identity_AWSIdentity_UserIdPattern
	AwsUserId isIdentity_AWSIdentity_AwsUserId `protobuf_oneof:"aws_user_id"`
}

func (x *Identity_AWSIdentity) Reset() {
	*x = Identity_AWSIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_identity_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AWSIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AWSIdentity) ProtoMessage() {}

func (x *Identity_AWSIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_identity_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AWSIdentity.ProtoReflect.Descriptor instead.
func (*Identity_AWSIdentity) Descriptor() ([]byte, []int) {
	return file_identity_platform_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Identity_AWSIdentity) GetAwsAccount() string {
	if x != nil {
		return x.AwsAccount
	}
	return ""
}

func (m *Identity_AWSIdentity) GetAwsArn() isIdentity_AWSIdentity_AwsArn {
	if m != nil {
		return m.AwsArn
	}
	return nil
}

func (x *Identity_AWSIdentity) GetArn() string {
	if x, ok := x.GetAwsArn().(*Identity_AWSIdentity_Arn); ok {
		return x.Arn
	}
	return ""
}

func (x *Identity_AWSIdentity) GetArnPattern() string {
	if x, ok := x.GetAwsArn().(*Identity_AWSIdentity_ArnPattern); ok {
		return x.ArnPattern
	}
	return ""
}

func (m *Identity_AWSIdentity) GetAwsUserId() isIdentity_AWSIdentity_AwsUserId {
	if m != nil {
		return m.AwsUserId
	}
	return nil
}

func (x *Identity_AWSIdentity) GetUserId() string {
	if x, ok := x.GetAwsUserId().(*Identity_AWSIdentity_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *Identity_AWSIdentity) GetUserIdPattern() string {
	if x, ok := x.GetAwsUserId().(*Identity_AWSIdentity_UserIdPattern); ok {
		return x.UserIdPattern
	}
	return ""
}

type isIdentity_AWSIdentity_AwsArn interface {
	isIdentity_AWSIdentity_AwsArn()
}

type Identity_AWSIdentity_Arn struct {
	// Exact match to Arn of AWS Identity
	Arn string `protobuf:"bytes,3,opt,name=arn,proto3,oneof"`
}

type Identity_AWSIdentity_ArnPattern struct {
	// Regular expression for matching Arn
	ArnPattern string `protobuf:"bytes,4,opt,name=arn_pattern,json=arnPattern,proto3,oneof"`
}

func (*Identity_AWSIdentity_Arn) isIdentity_AWSIdentity_AwsArn() {}

func (*Identity_AWSIdentity_ArnPattern) isIdentity_AWSIdentity_AwsArn() {}

type isIdentity_AWSIdentity_AwsUserId interface {
	isIdentity_AWSIdentity_AwsUserId()
}

type Identity_AWSIdentity_UserId struct {
	// Exacty match of the UserID field
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof"`
}

type Identity_AWSIdentity_UserIdPattern struct {
	// Regular expression for UserId field
	UserIdPattern string `protobuf:"bytes,6,opt,name=user_id_pattern,json=userIdPattern,proto3,oneof"`
}

func (*Identity_AWSIdentity_UserId) isIdentity_AWSIdentity_AwsUserId() {}

func (*Identity_AWSIdentity_UserIdPattern) isIdentity_AWSIdentity_AwsUserId() {}

var File_identity_platform_proto protoreflect.FileDescriptor

var file_identity_platform_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x0b, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x0c,
	0x61, 0x77, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x57, 0x53, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x77, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0xad, 0x04, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x69,
	0x73, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x75, 0x64,
	0x1a, 0x9b, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc4,
	0x01, 0x0a, 0x0b, 0x41, 0x57, 0x53, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x6e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x61,
	0x77, 0x73, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x7b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x04, 0x75, 0x69, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x44, 0x50, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x75, 0x69, 0x64, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2a, 0x4f, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x03, 0x32, 0xe9,
	0x06, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xd7, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x7a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x22, 0x21, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0x85, 0x07, 0xc2, 0xf0, 0x8e, 0xfc,
	0x0b, 0x35, 0x0a, 0x2a, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x12, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x1a, 0x1a, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x8a,
	0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0x86, 0x07, 0xc2, 0xf0, 0x8e, 0xfc, 0x0b,
	0x35, 0x0a, 0x2a, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x12, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05,
	0x08, 0x12, 0x06, 0x0a, 0x02, 0x87, 0x07, 0x10, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x04, 0x12, 0x02, 0x10, 0x01, 0x12, 0xbb, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d,
	0x2a, 0x2a, 0x7d, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0x88, 0x07, 0xc2,
	0xf0, 0x8e, 0xfc, 0x0b, 0x35, 0x0a, 0x2a, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x12, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x42, 0x6c, 0x0a, 0x22, 0x64, 0x65,
	0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x42, 0x1a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x41, 0x4d, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_identity_platform_proto_rawDescOnce sync.Once
	file_identity_platform_proto_rawDescData = file_identity_platform_proto_rawDesc
)

func file_identity_platform_proto_rawDescGZIP() []byte {
	file_identity_platform_proto_rawDescOnce.Do(func() {
		file_identity_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_identity_platform_proto_rawDescData)
	})
	return file_identity_platform_proto_rawDescData
}

var file_identity_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_identity_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_identity_platform_proto_goTypes = []interface{}{
	(ServicePrincipal)(0),         // 0: chainguard.platform.iam.ServicePrincipal
	(*Identity)(nil),              // 1: chainguard.platform.iam.Identity
	(*CreateIdentityRequest)(nil), // 2: chainguard.platform.iam.CreateIdentityRequest
	(*DeleteIdentityRequest)(nil), // 3: chainguard.platform.iam.DeleteIdentityRequest
	(*IdentityList)(nil),          // 4: chainguard.platform.iam.IdentityList
	(*IdentityFilter)(nil),        // 5: chainguard.platform.iam.IdentityFilter
	(*LookupRequest)(nil),         // 6: chainguard.platform.iam.LookupRequest
	(*Identity_ClaimMatch)(nil),   // 7: chainguard.platform.iam.Identity.ClaimMatch
	(*Identity_StaticKeys)(nil),   // 8: chainguard.platform.iam.Identity.StaticKeys
	(*Identity_AWSIdentity)(nil),  // 9: chainguard.platform.iam.Identity.AWSIdentity
	nil,                           // 10: chainguard.platform.iam.Identity.ClaimMatch.ClaimsEntry
	nil,                           // 11: chainguard.platform.iam.Identity.ClaimMatch.ClaimPatternsEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*v1.UIDPFilter)(nil),         // 13: chainguard.platform.common.UIDPFilter
	(*emptypb.Empty)(nil),         // 14: google.protobuf.Empty
}
var file_identity_platform_proto_depIdxs = []int32{
	12, // 0: chainguard.platform.iam.Identity.created_at:type_name -> google.protobuf.Timestamp
	12, // 1: chainguard.platform.iam.Identity.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 2: chainguard.platform.iam.Identity.claim_match:type_name -> chainguard.platform.iam.Identity.ClaimMatch
	8,  // 3: chainguard.platform.iam.Identity.static:type_name -> chainguard.platform.iam.Identity.StaticKeys
	0,  // 4: chainguard.platform.iam.Identity.service_principal:type_name -> chainguard.platform.iam.ServicePrincipal
	9,  // 5: chainguard.platform.iam.Identity.aws_identity:type_name -> chainguard.platform.iam.Identity.AWSIdentity
	1,  // 6: chainguard.platform.iam.CreateIdentityRequest.identity:type_name -> chainguard.platform.iam.Identity
	1,  // 7: chainguard.platform.iam.IdentityList.items:type_name -> chainguard.platform.iam.Identity
	13, // 8: chainguard.platform.iam.IdentityFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	10, // 9: chainguard.platform.iam.Identity.ClaimMatch.claims:type_name -> chainguard.platform.iam.Identity.ClaimMatch.ClaimsEntry
	11, // 10: chainguard.platform.iam.Identity.ClaimMatch.claim_patterns:type_name -> chainguard.platform.iam.Identity.ClaimMatch.ClaimPatternsEntry
	12, // 11: chainguard.platform.iam.Identity.StaticKeys.expiration:type_name -> google.protobuf.Timestamp
	2,  // 12: chainguard.platform.iam.Identities.Create:input_type -> chainguard.platform.iam.CreateIdentityRequest
	1,  // 13: chainguard.platform.iam.Identities.Update:input_type -> chainguard.platform.iam.Identity
	5,  // 14: chainguard.platform.iam.Identities.List:input_type -> chainguard.platform.iam.IdentityFilter
	6,  // 15: chainguard.platform.iam.Identities.Lookup:input_type -> chainguard.platform.iam.LookupRequest
	3,  // 16: chainguard.platform.iam.Identities.Delete:input_type -> chainguard.platform.iam.DeleteIdentityRequest
	1,  // 17: chainguard.platform.iam.Identities.Create:output_type -> chainguard.platform.iam.Identity
	1,  // 18: chainguard.platform.iam.Identities.Update:output_type -> chainguard.platform.iam.Identity
	4,  // 19: chainguard.platform.iam.Identities.List:output_type -> chainguard.platform.iam.IdentityList
	1,  // 20: chainguard.platform.iam.Identities.Lookup:output_type -> chainguard.platform.iam.Identity
	14, // 21: chainguard.platform.iam.Identities.Delete:output_type -> google.protobuf.Empty
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_identity_platform_proto_init() }
func file_identity_platform_proto_init() {
	if File_identity_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_identity_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_ClaimMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_StaticKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_identity_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AWSIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_identity_platform_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Identity_ClaimMatch_)(nil),
		(*Identity_Static)(nil),
		(*Identity_ServicePrincipal)(nil),
		(*Identity_AwsIdentity)(nil),
	}
	file_identity_platform_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Identity_ClaimMatch_Issuer)(nil),
		(*Identity_ClaimMatch_IssuerPattern)(nil),
		(*Identity_ClaimMatch_Subject)(nil),
		(*Identity_ClaimMatch_SubjectPattern)(nil),
		(*Identity_ClaimMatch_Audience)(nil),
		(*Identity_ClaimMatch_AudiencePattern)(nil),
	}
	file_identity_platform_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Identity_AWSIdentity_Arn)(nil),
		(*Identity_AWSIdentity_ArnPattern)(nil),
		(*Identity_AWSIdentity_UserId)(nil),
		(*Identity_AWSIdentity_UserIdPattern)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_identity_platform_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_identity_platform_proto_goTypes,
		DependencyIndexes: file_identity_platform_proto_depIdxs,
		EnumInfos:         file_identity_platform_proto_enumTypes,
		MessageInfos:      file_identity_platform_proto_msgTypes,
	}.Build()
	File_identity_platform_proto = out.File
	file_identity_platform_proto_rawDesc = nil
	file_identity_platform_proto_goTypes = nil
	file_identity_platform_proto_depIdxs = nil
}
