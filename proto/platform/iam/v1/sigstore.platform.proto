syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/iam/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.iam.v1";
option java_outer_classname = "PlatformIAMSigstoreProto";

package chainguard.platform.iam;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service SigstoreService {
  rpc Create(CreateSigstoreRequest) returns (Sigstore) {
    option (google.api.http) = {
      post: "/iam/v1/sigstore/{parent_id=**}"
      body: "sigstore"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_SIGSTORE_CREATE]
      }
    };
  }

  rpc List(SigstoreFilter) returns (SigstoreList) {
    option (google.api.http) = {
      get: "/iam/v1/sigstore"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_SIGSTORE_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteSigstoreRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/sigstore/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_SIGSTORE_DELETE]
      }
    };
  }

  rpc Update(Sigstore) returns (Sigstore) {
    option (google.api.http) = {
      put: "/iam/v1/sigstore/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_SIGSTORE_UPDATE]
      }
    };
  }
}

message CreateSigstoreRequest {
  // parent_id, The Group UIDP path under which the new sigstore instance is associated.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];

  // Sigstore is the sigstore instance to create;
  Sigstore sigstore = 2;
}

message Sigstore {
  // id is identifier of this specific sigstore instance.
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  // name, human-readable name of the sigstore instance.
  string name = 2;

  // description, human-readable description of the sigstore instance.
  string description = 3;

  // certificate authority for this instance of sigstore
  CertificateAuthority certificate_authority = 4;

  // unique hostname of this sigstore instance
  string hostname = 5;
}

message SigstoreList {
  repeated Sigstore items = 1;
}

message SigstoreFilter {
  // id is the exact UIDP of the record.
  string id = 1;

  // uidp filers records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 2;

  // name is the exact name of the record.
  string name = 3;
}

message DeleteSigstoreRequest {
  // id is the exact UIDP of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message CertificateAuthority {
  oneof ca {
    // kmsca is a KMS-based CA that requires a root cert and KMS signing key
    KMSCA kms_ca = 1;

    // google_ca is the Google Certificate Authority service
    GoogleCA google_ca =2;
  }
}

message KMSCA {
  // key_ref is a unique reference to the signing key used for this CA
  // most likely a KMS key prefixed with gcpkms://, awskms://, azurekms:// etc
  // and the relevant resource name
  string key_ref = 1;

  // cert_chain is the root certificate and (optional) chain
  // in PEM-encoded format
  string cert_chain = 2;
}

message GoogleCA {
  // ref is a unique reference to the Google CA service in the format
  // projects/<project>/locations/<location>/<name>
  string ref = 1;
}
