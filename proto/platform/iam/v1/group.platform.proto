syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/iam/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.iam.v1";
option java_outer_classname = "PlatformIAMGroupProto";

package chainguard.platform.iam;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";

service Groups {
  rpc Create(CreateGroupRequest) returns (Group) {
    option (google.api.http) = {
      post: "/iam/v1/groups/{parent=**}"
      body: "group"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUPS_CREATE]
        // We treat group creation as unscoped in order
        // to allow users to create new root groups.
        unscoped: true
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.group.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Update(Group) returns (Group) {
    option (google.api.http) = {
      put: "/iam/v1/groups/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUPS_UPDATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.group.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc List(GroupFilter) returns (GroupList) {
    option (google.api.http) = {
      get: "/iam/v1/groups"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUPS_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/groups/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUPS_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.group.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }
}

message Group {
  // id, The group UIDP under which this group resides.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  // name, human readable name of group.
  string name = 2;
  // description, human readable of group.
  string description = 3;
  // resource_limits indicate the maximum number of resources allowed for this group by type.
  map<string, int32> resource_limits = 4;
  // verified means we've verified the owners of this organization. Restrictions include:
  // - Only organizations (root groups) can be verified
  // - Property can only be set by manually by Chainguardians
  // - If verified is set, the organizations name field must be globally unique
  // - If verified is set the organizations name should be a domain name
  bool verified = 5;
}

message GroupList {
    repeated Group items = 1;
}

message GroupFilter {
  // id is the exact UID of the record.
  string id = 1;
  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 2;
  // name is the exact name of the record.
  string name = 3;
}

message CreateGroupRequest {
  // parent, The Group UIDP path under which the new Group resides.
  // This is effectively the iam_scope for Create requests, but because
  // we also allow users to create new "root" groups, we check the scoping
  // manually. Parent is allowed to be a prefix of a UIDP of a Group within
  // scope, or the name of a Group in scope.
  string parent = 1;
  // Group to create.
  Group group = 2;
}

message DeleteGroupRequest {
  // id is the exact UIDP of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}
