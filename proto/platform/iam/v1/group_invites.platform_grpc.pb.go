// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: group_invites.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupInvites_Create_FullMethodName          = "/chainguard.platform.iam.GroupInvites/Create"
	GroupInvites_CreateWithGroup_FullMethodName = "/chainguard.platform.iam.GroupInvites/CreateWithGroup"
	GroupInvites_List_FullMethodName            = "/chainguard.platform.iam.GroupInvites/List"
	GroupInvites_Delete_FullMethodName          = "/chainguard.platform.iam.GroupInvites/Delete"
)

// GroupInvitesClient is the client API for GroupInvites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupInvitesClient interface {
	Create(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInvite, error)
	// CreateWithGroup is an internal API for creating a new root group
	// where the caller is NOT added as an Owner, but an invite code to
	// become the owner of the group is returned.  This is not intended
	// for external consumption, and will not be supported.
	// Do not use this!
	CreateWithGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInvite, error)
	List(ctx context.Context, in *GroupInviteFilter, opts ...grpc.CallOption) (*GroupInviteList, error)
	Delete(ctx context.Context, in *DeleteGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupInvitesClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupInvitesClient(cc grpc.ClientConnInterface) GroupInvitesClient {
	return &groupInvitesClient{cc}
}

func (c *groupInvitesClient) Create(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInvite, error) {
	out := new(GroupInvite)
	err := c.cc.Invoke(ctx, GroupInvites_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupInvitesClient) CreateWithGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInvite, error) {
	out := new(GroupInvite)
	err := c.cc.Invoke(ctx, GroupInvites_CreateWithGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupInvitesClient) List(ctx context.Context, in *GroupInviteFilter, opts ...grpc.CallOption) (*GroupInviteList, error) {
	out := new(GroupInviteList)
	err := c.cc.Invoke(ctx, GroupInvites_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupInvitesClient) Delete(ctx context.Context, in *DeleteGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupInvites_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupInvitesServer is the server API for GroupInvites service.
// All implementations must embed UnimplementedGroupInvitesServer
// for forward compatibility
type GroupInvitesServer interface {
	Create(context.Context, *GroupInviteRequest) (*GroupInvite, error)
	// CreateWithGroup is an internal API for creating a new root group
	// where the caller is NOT added as an Owner, but an invite code to
	// become the owner of the group is returned.  This is not intended
	// for external consumption, and will not be supported.
	// Do not use this!
	CreateWithGroup(context.Context, *GroupInviteRequest) (*GroupInvite, error)
	List(context.Context, *GroupInviteFilter) (*GroupInviteList, error)
	Delete(context.Context, *DeleteGroupInviteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupInvitesServer()
}

// UnimplementedGroupInvitesServer must be embedded to have forward compatible implementations.
type UnimplementedGroupInvitesServer struct {
}

func (UnimplementedGroupInvitesServer) Create(context.Context, *GroupInviteRequest) (*GroupInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupInvitesServer) CreateWithGroup(context.Context, *GroupInviteRequest) (*GroupInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithGroup not implemented")
}
func (UnimplementedGroupInvitesServer) List(context.Context, *GroupInviteFilter) (*GroupInviteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupInvitesServer) Delete(context.Context, *DeleteGroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupInvitesServer) mustEmbedUnimplementedGroupInvitesServer() {}

// UnsafeGroupInvitesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupInvitesServer will
// result in compilation errors.
type UnsafeGroupInvitesServer interface {
	mustEmbedUnimplementedGroupInvitesServer()
}

func RegisterGroupInvitesServer(s grpc.ServiceRegistrar, srv GroupInvitesServer) {
	s.RegisterService(&GroupInvites_ServiceDesc, srv)
}

func _GroupInvites_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupInvitesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupInvites_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupInvitesServer).Create(ctx, req.(*GroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupInvites_CreateWithGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupInvitesServer).CreateWithGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupInvites_CreateWithGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupInvitesServer).CreateWithGroup(ctx, req.(*GroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupInvites_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupInvitesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupInvites_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupInvitesServer).List(ctx, req.(*GroupInviteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupInvites_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupInvitesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupInvites_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupInvitesServer).Delete(ctx, req.(*DeleteGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupInvites_ServiceDesc is the grpc.ServiceDesc for GroupInvites service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupInvites_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.iam.GroupInvites",
	HandlerType: (*GroupInvitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupInvites_Create_Handler,
		},
		{
			MethodName: "CreateWithGroup",
			Handler:    _GroupInvites_CreateWithGroup_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupInvites_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupInvites_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_invites.platform.proto",
}
