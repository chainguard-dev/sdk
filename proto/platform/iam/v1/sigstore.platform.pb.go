// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: sigstore.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v1 "chainguard.dev/sdk/proto/platform/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSigstoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent_id, The Group UIDP path under which the new sigstore instance is associated.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Sigstore is the sigstore instance to create;
	Sigstore *Sigstore `protobuf:"bytes,2,opt,name=sigstore,proto3" json:"sigstore,omitempty"`
}

func (x *CreateSigstoreRequest) Reset() {
	*x = CreateSigstoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSigstoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSigstoreRequest) ProtoMessage() {}

func (x *CreateSigstoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSigstoreRequest.ProtoReflect.Descriptor instead.
func (*CreateSigstoreRequest) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSigstoreRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateSigstoreRequest) GetSigstore() *Sigstore {
	if x != nil {
		return x.Sigstore
	}
	return nil
}

type Sigstore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is identifier of this specific sigstore instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name, human-readable name of the sigstore instance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description, human-readable description of the sigstore instance.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// certificate authority for this instance of sigstore
	CertificateAuthority *CertificateAuthority `protobuf:"bytes,4,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	// unique hostname of this sigstore instance
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *Sigstore) Reset() {
	*x = Sigstore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sigstore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sigstore) ProtoMessage() {}

func (x *Sigstore) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sigstore.ProtoReflect.Descriptor instead.
func (*Sigstore) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{1}
}

func (x *Sigstore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sigstore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sigstore) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sigstore) GetCertificateAuthority() *CertificateAuthority {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *Sigstore) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type SigstoreList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Sigstore `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SigstoreList) Reset() {
	*x = SigstoreList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigstoreList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreList) ProtoMessage() {}

func (x *SigstoreList) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreList.ProtoReflect.Descriptor instead.
func (*SigstoreList) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{2}
}

func (x *SigstoreList) GetItems() []*Sigstore {
	if x != nil {
		return x.Items
	}
	return nil
}

type SigstoreFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UIDP of the record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// uidp filers records based on their position in the group hierarchy.
	Uidp *v1.UIDPFilter `protobuf:"bytes,2,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// name is the exact name of the record.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SigstoreFilter) Reset() {
	*x = SigstoreFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigstoreFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreFilter) ProtoMessage() {}

func (x *SigstoreFilter) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreFilter.ProtoReflect.Descriptor instead.
func (*SigstoreFilter) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{3}
}

func (x *SigstoreFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SigstoreFilter) GetUidp() *v1.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *SigstoreFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteSigstoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UIDP of the record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSigstoreRequest) Reset() {
	*x = DeleteSigstoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSigstoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSigstoreRequest) ProtoMessage() {}

func (x *DeleteSigstoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSigstoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteSigstoreRequest) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSigstoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ca:
	//
	//	*CertificateAuthority_KmsCa
	//	*CertificateAuthority_GoogleCa
	Ca isCertificateAuthority_Ca `protobuf_oneof:"ca"`
}

func (x *CertificateAuthority) Reset() {
	*x = CertificateAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthority) ProtoMessage() {}

func (x *CertificateAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthority.ProtoReflect.Descriptor instead.
func (*CertificateAuthority) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{5}
}

func (m *CertificateAuthority) GetCa() isCertificateAuthority_Ca {
	if m != nil {
		return m.Ca
	}
	return nil
}

func (x *CertificateAuthority) GetKmsCa() *KMSCA {
	if x, ok := x.GetCa().(*CertificateAuthority_KmsCa); ok {
		return x.KmsCa
	}
	return nil
}

func (x *CertificateAuthority) GetGoogleCa() *GoogleCA {
	if x, ok := x.GetCa().(*CertificateAuthority_GoogleCa); ok {
		return x.GoogleCa
	}
	return nil
}

type isCertificateAuthority_Ca interface {
	isCertificateAuthority_Ca()
}

type CertificateAuthority_KmsCa struct {
	// kmsca is a KMS-based CA that requires a root cert and KMS signing key
	KmsCa *KMSCA `protobuf:"bytes,1,opt,name=kms_ca,json=kmsCa,proto3,oneof"`
}

type CertificateAuthority_GoogleCa struct {
	// google_ca is the Google Certificate Authority service
	GoogleCa *GoogleCA `protobuf:"bytes,2,opt,name=google_ca,json=googleCa,proto3,oneof"`
}

func (*CertificateAuthority_KmsCa) isCertificateAuthority_Ca() {}

func (*CertificateAuthority_GoogleCa) isCertificateAuthority_Ca() {}

type KMSCA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key_ref is a unique reference to the signing key used for this CA
	// most likely a KMS key prefixed with gcpkms://, awskms://, azurekms:// etc
	// and the relevant resource name
	KeyRef string `protobuf:"bytes,1,opt,name=key_ref,json=keyRef,proto3" json:"key_ref,omitempty"`
	// cert_chain is the root certificate and (optional) chain
	// in PEM-encoded format
	CertChain string `protobuf:"bytes,2,opt,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
}

func (x *KMSCA) Reset() {
	*x = KMSCA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KMSCA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KMSCA) ProtoMessage() {}

func (x *KMSCA) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KMSCA.ProtoReflect.Descriptor instead.
func (*KMSCA) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{6}
}

func (x *KMSCA) GetKeyRef() string {
	if x != nil {
		return x.KeyRef
	}
	return ""
}

func (x *KMSCA) GetCertChain() string {
	if x != nil {
		return x.CertChain
	}
	return ""
}

type GoogleCA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is a unique reference to the Google CA service in the format
	// projects/<project>/locations/<location>/<name>
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GoogleCA) Reset() {
	*x = GoogleCA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCA) ProtoMessage() {}

func (x *GoogleCA) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCA.ProtoReflect.Descriptor instead.
func (*GoogleCA) Descriptor() ([]byte, []int) {
	return file_sigstore_platform_proto_rawDescGZIP(), []int{7}
}

func (x *GoogleCA) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

var File_sigstore_platform_proto protoreflect.FileDescriptor

var file_sigstore_platform_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x64, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x53,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x70,
	0x0a, 0x0e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x44, 0x50,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x75, 0x69, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x6b, 0x6d,
	0x73, 0x5f, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4b, 0x4d, 0x53, 0x43, 0x41, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x6d,
	0x73, 0x43, 0x61, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x41, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x61, 0x42, 0x04, 0x0a, 0x02, 0x63, 0x61, 0x22, 0x3f, 0x0a, 0x05, 0x4b,
	0x4d, 0x53, 0x43, 0x41, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x1c, 0x0a, 0x08,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x41, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x32, 0xaf, 0x04, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a,
	0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x22, 0x1f, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x08, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x8a,
	0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xa5, 0x0d, 0x12, 0x7e, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x8a, 0xaf, 0xa8,
	0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xa7, 0x0d, 0x10, 0x01, 0x12, 0x7e, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x8a,
	0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xa8, 0x0d, 0x12, 0x7f, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x01, 0x2a,
	0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xa6, 0x0d, 0x42, 0x6a, 0x0a, 0x22,
	0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x42, 0x18, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x41, 0x4d, 0x53,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sigstore_platform_proto_rawDescOnce sync.Once
	file_sigstore_platform_proto_rawDescData = file_sigstore_platform_proto_rawDesc
)

func file_sigstore_platform_proto_rawDescGZIP() []byte {
	file_sigstore_platform_proto_rawDescOnce.Do(func() {
		file_sigstore_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_sigstore_platform_proto_rawDescData)
	})
	return file_sigstore_platform_proto_rawDescData
}

var file_sigstore_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sigstore_platform_proto_goTypes = []interface{}{
	(*CreateSigstoreRequest)(nil), // 0: chainguard.platform.iam.CreateSigstoreRequest
	(*Sigstore)(nil),              // 1: chainguard.platform.iam.Sigstore
	(*SigstoreList)(nil),          // 2: chainguard.platform.iam.SigstoreList
	(*SigstoreFilter)(nil),        // 3: chainguard.platform.iam.SigstoreFilter
	(*DeleteSigstoreRequest)(nil), // 4: chainguard.platform.iam.DeleteSigstoreRequest
	(*CertificateAuthority)(nil),  // 5: chainguard.platform.iam.CertificateAuthority
	(*KMSCA)(nil),                 // 6: chainguard.platform.iam.KMSCA
	(*GoogleCA)(nil),              // 7: chainguard.platform.iam.GoogleCA
	(*v1.UIDPFilter)(nil),         // 8: chainguard.platform.common.UIDPFilter
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_sigstore_platform_proto_depIdxs = []int32{
	1,  // 0: chainguard.platform.iam.CreateSigstoreRequest.sigstore:type_name -> chainguard.platform.iam.Sigstore
	5,  // 1: chainguard.platform.iam.Sigstore.certificate_authority:type_name -> chainguard.platform.iam.CertificateAuthority
	1,  // 2: chainguard.platform.iam.SigstoreList.items:type_name -> chainguard.platform.iam.Sigstore
	8,  // 3: chainguard.platform.iam.SigstoreFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	6,  // 4: chainguard.platform.iam.CertificateAuthority.kms_ca:type_name -> chainguard.platform.iam.KMSCA
	7,  // 5: chainguard.platform.iam.CertificateAuthority.google_ca:type_name -> chainguard.platform.iam.GoogleCA
	0,  // 6: chainguard.platform.iam.SigstoreService.Create:input_type -> chainguard.platform.iam.CreateSigstoreRequest
	3,  // 7: chainguard.platform.iam.SigstoreService.List:input_type -> chainguard.platform.iam.SigstoreFilter
	4,  // 8: chainguard.platform.iam.SigstoreService.Delete:input_type -> chainguard.platform.iam.DeleteSigstoreRequest
	1,  // 9: chainguard.platform.iam.SigstoreService.Update:input_type -> chainguard.platform.iam.Sigstore
	1,  // 10: chainguard.platform.iam.SigstoreService.Create:output_type -> chainguard.platform.iam.Sigstore
	2,  // 11: chainguard.platform.iam.SigstoreService.List:output_type -> chainguard.platform.iam.SigstoreList
	9,  // 12: chainguard.platform.iam.SigstoreService.Delete:output_type -> google.protobuf.Empty
	1,  // 13: chainguard.platform.iam.SigstoreService.Update:output_type -> chainguard.platform.iam.Sigstore
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_sigstore_platform_proto_init() }
func file_sigstore_platform_proto_init() {
	if File_sigstore_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sigstore_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSigstoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sigstore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigstoreList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigstoreFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSigstoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KMSCA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigstore_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sigstore_platform_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CertificateAuthority_KmsCa)(nil),
		(*CertificateAuthority_GoogleCa)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sigstore_platform_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sigstore_platform_proto_goTypes,
		DependencyIndexes: file_sigstore_platform_proto_depIdxs,
		MessageInfos:      file_sigstore_platform_proto_msgTypes,
	}.Build()
	File_sigstore_platform_proto = out.File
	file_sigstore_platform_proto_rawDesc = nil
	file_sigstore_platform_proto_goTypes = nil
	file_sigstore_platform_proto_depIdxs = nil
}
