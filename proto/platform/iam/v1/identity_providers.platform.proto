syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/iam/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.iam.v1";
option java_outer_classname = "PlatformIAMIdentityProviderProto";

package chainguard.platform.iam;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";

service IdentityProviders {
  rpc Create(CreateIdentityProviderRequest) returns (IdentityProvider) {
    option (google.api.http) = {
      post: "/iam/v1/identityProviders/{parent_id=**}"
      body: "identity_provider"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          CAP_IAM_IDENTITY_PROVIDERS_CREATE,
          // Creating an IdentityProvider provides to option of choosing
          // a default role, which makes it effectively a RoleBinding
          // promise, so check that the caller has permission to
          // create RoleBindings as well.
          CAP_IAM_ROLE_BINDINGS_CREATE
        ]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity_providers.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Update(IdentityProvider) returns (IdentityProvider) {
    option (google.api.http) = {
      put: "/iam/v1/identityProviders/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          CAP_IAM_IDENTITY_PROVIDERS_UPDATE,
          // Updating an IdentityProvider provides to option of choosing
          // a default role, which makes it effectively a RoleBinding
          // promise, so check that the caller has permission to
          // create RoleBindings as well.
          CAP_IAM_ROLE_BINDINGS_CREATE
        ]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity_providers.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc List(IdentityProviderFilter) returns (IdentityProviderList) {
    option (google.api.http) = {
      get: "/iam/v1/identityProviders"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_PROVIDERS_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteIdentityProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/identityProviders/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_PROVIDERS_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity_providers.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

}

message IdentityProvider {
  // id is unique identifier of this specific identity provider
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  string name = 2;
  string description = 3;

  // default_role is the UIDP of an optional default role
  // to grant users of this identity provider.
  string default_role = 4;

  oneof configuration {
    OIDC oidc  = 20;

    // TODO: SAML, LDAP etc;
  }

  message OIDC {
    // Issuer URL (e.g https://accounts.google.com)
    string issuer = 1;

    string client_id = 2;
    string client_secret = 3;

    // Additional scopes to request for ID tokens
    repeated string additional_scopes = 4;
  }
}

message CreateIdentityProviderRequest {
  // parent_id is the exact UIDP of the IAM group to nest this identity provider under
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];

  IdentityProvider identity_provider = 2;
}

message DeleteIdentityProviderRequest {
  // id is the exact UIDP of the IdP
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message IdentityProviderFilter {
  // Exact match on identity provider UIDP
  string id = 1;

  // Exact match on identity provider name
  string name = 2;

  // uidp filers records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 3;
}

message IdentityProviderList {
  repeated IdentityProvider items = 1;
}
