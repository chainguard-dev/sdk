// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sigstore.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SigstoreService_Create_FullMethodName = "/chainguard.platform.iam.SigstoreService/Create"
	SigstoreService_List_FullMethodName   = "/chainguard.platform.iam.SigstoreService/List"
	SigstoreService_Delete_FullMethodName = "/chainguard.platform.iam.SigstoreService/Delete"
	SigstoreService_Update_FullMethodName = "/chainguard.platform.iam.SigstoreService/Update"
)

// SigstoreServiceClient is the client API for SigstoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigstoreServiceClient interface {
	Create(ctx context.Context, in *CreateSigstoreRequest, opts ...grpc.CallOption) (*Sigstore, error)
	List(ctx context.Context, in *SigstoreFilter, opts ...grpc.CallOption) (*SigstoreList, error)
	Delete(ctx context.Context, in *DeleteSigstoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *Sigstore, opts ...grpc.CallOption) (*Sigstore, error)
}

type sigstoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigstoreServiceClient(cc grpc.ClientConnInterface) SigstoreServiceClient {
	return &sigstoreServiceClient{cc}
}

func (c *sigstoreServiceClient) Create(ctx context.Context, in *CreateSigstoreRequest, opts ...grpc.CallOption) (*Sigstore, error) {
	out := new(Sigstore)
	err := c.cc.Invoke(ctx, SigstoreService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstoreServiceClient) List(ctx context.Context, in *SigstoreFilter, opts ...grpc.CallOption) (*SigstoreList, error) {
	out := new(SigstoreList)
	err := c.cc.Invoke(ctx, SigstoreService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstoreServiceClient) Delete(ctx context.Context, in *DeleteSigstoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SigstoreService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstoreServiceClient) Update(ctx context.Context, in *Sigstore, opts ...grpc.CallOption) (*Sigstore, error) {
	out := new(Sigstore)
	err := c.cc.Invoke(ctx, SigstoreService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigstoreServiceServer is the server API for SigstoreService service.
// All implementations must embed UnimplementedSigstoreServiceServer
// for forward compatibility
type SigstoreServiceServer interface {
	Create(context.Context, *CreateSigstoreRequest) (*Sigstore, error)
	List(context.Context, *SigstoreFilter) (*SigstoreList, error)
	Delete(context.Context, *DeleteSigstoreRequest) (*emptypb.Empty, error)
	Update(context.Context, *Sigstore) (*Sigstore, error)
	mustEmbedUnimplementedSigstoreServiceServer()
}

// UnimplementedSigstoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSigstoreServiceServer struct {
}

func (UnimplementedSigstoreServiceServer) Create(context.Context, *CreateSigstoreRequest) (*Sigstore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSigstoreServiceServer) List(context.Context, *SigstoreFilter) (*SigstoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSigstoreServiceServer) Delete(context.Context, *DeleteSigstoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSigstoreServiceServer) Update(context.Context, *Sigstore) (*Sigstore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSigstoreServiceServer) mustEmbedUnimplementedSigstoreServiceServer() {}

// UnsafeSigstoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigstoreServiceServer will
// result in compilation errors.
type UnsafeSigstoreServiceServer interface {
	mustEmbedUnimplementedSigstoreServiceServer()
}

func RegisterSigstoreServiceServer(s grpc.ServiceRegistrar, srv SigstoreServiceServer) {
	s.RegisterService(&SigstoreService_ServiceDesc, srv)
}

func _SigstoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSigstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstoreService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstoreServiceServer).Create(ctx, req.(*CreateSigstoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstoreService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigstoreFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstoreServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstoreService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstoreServiceServer).List(ctx, req.(*SigstoreFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSigstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstoreService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstoreServiceServer).Delete(ctx, req.(*DeleteSigstoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstoreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sigstore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstoreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstoreService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstoreServiceServer).Update(ctx, req.(*Sigstore))
	}
	return interceptor(ctx, in, info, handler)
}

// SigstoreService_ServiceDesc is the grpc.ServiceDesc for SigstoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigstoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.iam.SigstoreService",
	HandlerType: (*SigstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SigstoreService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SigstoreService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SigstoreService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SigstoreService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sigstore.platform.proto",
}
