syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/iam/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.iam.v1";
option java_outer_classname = "PlatformIAMIdentitiesProto";

package chainguard.platform.iam;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";

service Identities {
  rpc Create(CreateIdentityRequest) returns (Identity) {
    option (google.api.http) = {
      post: "/iam/v1/identities/{parent_id=**}"
      body: "identity"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_CREATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Update(Identity) returns (Identity) {
    option (google.api.http) = {
      put: "/iam/v1/identities/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_UPDATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc List(IdentityFilter) returns (IdentityList) {
    option (google.api.http) = {
      get: "/iam/v1/identities"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_LIST]
        unscoped: true
      }
    };
  }

  rpc Lookup(LookupRequest) returns (Identity) {
    option (google.api.http) = {
      get: "/iam/v1/identities/lookup"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteIdentityRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/identities/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_IDENTITY_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.identity.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }
}

enum ServicePrincipal {
  UNKNOWN = 0;

  COSIGNED       = 1;
  INGESTER       = 2;
  CATALOG_SYNCER = 3;
}

message Identity {
  // id is unique identifier of this specific identity.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  // name, human readable name of identity.
  string name = 2;
  // description, human readable of identity.
  string description = 3;
  // created_at is the timestamp for when the identity was created.
  google.protobuf.Timestamp created_at = 4;
  // updated_at is the timestamp for when the identity was last updated.
  google.protobuf.Timestamp updated_at = 5;

  // relationship is used to describe how this identity relates to
  // identities coming from 3rd party Identity Providers (IdPs)
  oneof relationship {
    // claim_match checks the third party IdP token's claims against one
    // or more configured patterns.
    ClaimMatch claim_match = 10;

    // static is equivalent to literal, but instead of discovering the
    // IdP's verification keys we verify the identity using pre-registered
    // verification keys.  This is intended for use with identities from
    // providers without an "online" issuer (network accessible to our IdP),
    // such as a KinD/minikube cluster.
    // NOTE: because this path does not have a mechanism for key rotation
    // the identity will expire, with a maximum lifetime of 30d.
    StaticKeys static = 11;

    // service_principal is the name of the Chainguard service that is
    // allowed to assume this identity.  These names correlate with the
    // service names used in impersonation with account associations.
    ServicePrincipal service_principal = 12;

    // aws_identity matches AWS IAM users and roles to an identity
    AWSIdentity aws_identity = 13;
  }

  message ClaimMatch {
    // Required, matches the `iss` claim.
    oneof iss {
      // issuer of the OIDC ID tokens issued for this identity.
      string issuer = 1;
      // issuer_pattern is a regular expression for matching the
      // token's issuer claim.
      string issuer_pattern = 2;
    }

    // Required, matches the `sub` claim.
    oneof sub {
      // subject of OIDC ID tokens issued for this identity.
      string subject = 3;

      // subject_pattern is a regular expression for matching the
      // token's subject claim.
      string subject_pattern = 4;
    }

    // Optional, matches the `aud` claim.
    // When unspecified, this defaults to the hostname of the SaaS
    // environment's issuer.
    oneof aud {
      // audience of OIDC ID tokens issued for this identity.
      string audience = 5;

      // audience_pattern is a regular expression for matching the
      // token's audience claim.
      string audience_pattern = 6;
    }

    // claims is a mapping from the name of a custom claim
    // to a literal matching that claim's value.
    map<string, string> claims = 7;

    // claim_patterns is a mapping from the name of a custom claim
    // to a regular expression for matching that claim's value.
    map<string, string> claim_patterns = 8;
  }

  message StaticKeys {
    // issuer of the OIDC ID tokens issued for this identity.
    // Matches the `iss` claim.
    string issuer = 1;

    // subject of OIDC ID tokens issued for this identity.
    // Matches the `sub` claim.
    string subject = 2;

    // issuer_keys is JWKS-formatted public keys for the issuer.
    // Required, otherwise use Literal.
    string issuer_keys = 4;

    // expiration is the time when the issuer_keys will expire.
    // Defaults to / Maximum of 30 days after creation time.
    google.protobuf.Timestamp expiration = 5;
  }

  message AWSIdentity {
    // Required, matches the `Account` field in the GetCallerID AWS IAM
    // response
    string aws_account = 1;

    // Required, matches the `Arn` field in the GetCallerID AWS IAM response
    oneof aws_arn {
      // Exact match to Arn of AWS Identity
      string arn = 3;

      // Regular expression for matching Arn
      string arn_pattern = 4;
    }

    // Required, matches the `UserId` field of th GetCallerID AWS IAM response
    oneof aws_user_id {
      // Exacty match of the UserID field
      string user_id = 5;

      // Regular expression for UserId field
      string user_id_pattern = 6;
    }
  }
}

message CreateIdentityRequest {
  // parent_id, The Group UIDP path under which the new Identity resides.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  // Identity to create.
  Identity identity = 2;
}

message DeleteIdentityRequest {
  // ID, UIDP of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message IdentityList {
  repeated Identity items = 1;
}

message IdentityFilter {
  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 1;

  // id is unique identifier to look up.
  string id = 2;
}

message LookupRequest {
  // issuer is the oidc issuer to look up.
  string issuer = 1;

  // subject is the subject to look up.
  string subject = 2;
}
