syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/iam/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.iam.v1";
option java_outer_classname = "PlatformIAMGroupInviteProto";

package chainguard.platform.iam;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "role.platform.proto";

service GroupInvites {
  rpc Create(GroupInviteRequest) returns (GroupInvite) {
    option (google.api.http) = {
      post: "/iam/v1/group_invites/{group=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          CAP_IAM_GROUP_INVITES_CREATE,
          // Creating a Group Invite is effectively a RoleBinding
          // promise, so check that the caller has permission to
          // create RoleBindings as well.
          CAP_IAM_ROLE_BINDINGS_CREATE
        ]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.group_invite.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  // CreateWithGroup is an internal API for creating a new root group
  // where the caller is NOT added as an Owner, but an invite code to
  // become the owner of the group is returned.  This is not intended
  // for external consumption, and will not be supported.
  // Do not use this!
  rpc CreateWithGroup(GroupInviteRequest) returns (GroupInvite) {
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          CAP_IAM_GROUP_INVITES_CREATE,
          // Creating a Group Invite is effectively a RoleBinding
          // promise, so check that the caller has permission to
          // create RoleBindings as well.
          CAP_IAM_ROLE_BINDINGS_CREATE
        ]
        // We check for the capabilities above in the token, but
        // this method has special undocumented authentication
        // semantics since it is not intended to external consumption.
        unscoped: true
      }
    };
  }

  rpc List(GroupInviteFilter) returns (GroupInviteList) {
    option (google.api.http) = {
      get: "/iam/v1/group_invites"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUP_INVITES_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteGroupInviteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/group_invites/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_IAM_GROUP_INVITES_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.iam.group_invite.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }
}

message RegistrationRequest {
  oneof kind {
    Human human = 1;
    Cluster cluster = 2;
  }

  message Human {
    // code is the json-encoded authentication code.
    // +optional
    string code = 1;
  }

  message Cluster {
    // code is the json-encoded authentication code.
    string code = 1;
    // cluster_id is an optional cluster id if registering a cluster.
    string cluster_id = 2;
  }
}

message GroupInvite {
  // id, The group UIDP under which this invite resides.
  string id = 1;
  // expiration, timestamp this invite becomes no longer valid.
  google.protobuf.Timestamp expiration = 2;
  // key_id is used to identify the verification key for this code.
  string key_id = 3;
  // role is the role the invited identity will be role-bound to the group with.
  chainguard.platform.iam.Role role = 4;
  // code is the json-encoded authentication code.
  string code = 5;
}

message StoredGroupInvite {
  // id, The group UIDP under which this invite resides.
  string id = 1;
  // expiration, timestamp this invite becomes no longer valid.
  google.protobuf.Timestamp expiration = 2;
  // key_id is used to identify the verification key for this code.
  string key_id = 3;
  // role is the role the invited identity will be role-bound to the group with.
  chainguard.platform.iam.Role role = 4;
}

message GroupInviteList {
  repeated StoredGroupInvite items = 1;
}

message GroupInviteRequest {
  // group, The Group UIDP path under which the new group Invite targets.
  string group = 1 [(chainguard.annotations.iam_scope) = true];
  // expiration, timestamp this invite becomes no longer valid.
  google.protobuf.Duration ttl = 2;
  // role is the Role UIDP the invited identity will be role-bound to the group with.
  string role = 3;
  // email is the exact email address that may accept this invite code, if specified.
  string email = 4;
}

message DeleteGroupInviteRequest {
  // id is the exact UIDP of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message GroupInviteFilter {
  // group is used to identify the group this record is rooted under.
  string group = 1;
  // id is the exact UID of the record.
  string id = 2;
  // key_id is the identify the verification key for this code.
  string key_id = 3;
}
