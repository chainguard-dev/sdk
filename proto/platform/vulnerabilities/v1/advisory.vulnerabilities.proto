/*
Copyright 2025 Chainguard, Inc.
SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/vulnerabilities/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.vulnerabilities.v1";
option java_outer_classname = "VulnerabilitiesAdvisoryProto";

package chainguard.platform.vulnerabilities.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";

service Advisories {
  rpc Create(CreateAdvisoryRequest) returns (Advisory) {
    option (google.api.http) = {
      post: "/vulnerabilities/v1/advisories"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_ADVISORIES_CREATE]
      }
    };
  }

  rpc List(AdvisoryFilter) returns (AdvisoriesList) {
    option (google.api.http) = {
      get: "/vulnerabilities/v1/advisories"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        // This gets restricted in the api-impl code.
        unscoped: true
        capabilities: [CAP_ADVISORIES_LIST]
      }
    };
  }

  rpc Update(Advisory) returns (Advisory) {
    option (google.api.http) = {
      put: "/vulnerabilities/v1/advisories/{id}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_ADVISORIES_UPDATE]
      }
    };
  }

  rpc Delete(DeleteAdvisoryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/vulnerabilities/v1/advisories/{id}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_ADVISORIES_DELETE]
      }
    };
  }

  rpc CreateAdvisoryEvent(CreateAdvisoryEventRequest) returns (AdvisoryEvent) {
    option (google.api.http) = {
      post: "/vulnerabilities/v1/advisories/{parent_id}/events"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_ADVISORIES_CREATE]
      }
    };
  }

  rpc ListAdvisoryEvents(AdvisoryEventFilter) returns (AdvisoryEventList) {
    option (google.api.http) = {
      get: "/vulnerabilities/v1/advisories/{parent_id}/events"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_ADVISORIES_LIST]
      }
    };
  }
}

// ReviewStatus represents the possible states of review for an advisory event
enum ReviewStatus {
  UNKNOWN = 0;
  PENDING = 1;
  APPROVED = 2;
  REQUEST_CHANGES = 3;
  REJECTED = 4;
}

message Advisory {
  // id is the UIDP for the Advisory.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  // artifact_type is the artifact type (e.g., apk, image, library)
  string artifact_type = 2;
  // artifact_name is the artifact name (e.g., wheel, jar name)
  string artifact_name = 3;
  // artifact_namespace identifies which set of repositories the artifact is in
  // REMOVED: Do NOT REUSE: string artifact_namespace = 4;
  reserved 4;
  // artifact_architecture is the architecture of the artifact
  string artifact_architecture = 5;

  // component_name is the component within the subpackage
  optional string component_name = 6;
  // component_location is the filesystem location of the component
  optional string component_location = 7;
  // component_type is the language ecosystem (go-module, python, etc)
  optional string component_type = 8;

  // created_at is when the advisory was created
  google.protobuf.Timestamp created_at = 10;
  // updated_at is when the advisory was last updated
  google.protobuf.Timestamp updated_at = 11;
  // deleted_at is when the advisory was deleted (if applicable)
  optional google.protobuf.Timestamp deleted_at = 12;
  // aliases are other vulnerability identifiers this advisory applies to
  repeated string aliases = 13;
  // events are advisory events associated with this advisory
  repeated AdvisoryEvent events = 14;
  // advisory_id is the CGA identifier for the advisory
  string advisory_id = 15;

  // For review process
  // author is the person who created this event
  string author = 16;
  // reviewer is the person who reviewed this event
  string reviewer = 17;
  // status is the status of the review. Note that not all the entries need to
  // get reviewed, so this is optional.
  ReviewStatus status = 18;
}

message AdvisoryEvent {
  // id is the UIDP of this event, child of Advisory UIDP it belongs to.
  string id = 1;

  google.protobuf.Timestamp timestamp = 2;

  // Event type determines which specific event field is populated
  oneof type {
    Detection detection = 3;
    Fixed fixed = 4;
    FalsePositiveDetermination false_positive_determination = 5;
    AnalysisNotPlanned analysis_not_planned = 6;
    FixNotPlanned fix_not_planned = 7;
    PendingUpstreamFix pending_upstream_fix = 8;
    TruePositiveDetermination true_positive_determination = 9;
  }

  message Detection {
    oneof type {
      NVDAPI nvdapi = 1;
      Manual manual = 2;
      ScanV1 scanv1 = 3;
    }

    message NVDAPI {
      string cpe_searched = 1;
      string cpe_found = 2;
    }

    message Manual {}

    message ScanV1 {
      string scanner = 1;
      string subpackage_name = 2;
      string component_id = 3;
      string component_name = 4;
      string component_version = 5;
      string component_type = 6;
      string component_location = 7;
    }
  }

  message Fixed {
    string fixed_version = 1;
  }

  message TruePositiveDetermination {
    string note = 1;
  }

  message FalsePositiveDetermination {
    enum Type {
      UNSPECIFIED = 0;
      VULNERABILITY_RECORD_ANALYSIS_CONTESTED = 1;
      COMPONENT_VULNERABILITY_MISMATCH = 2;
      VULNERABLE_CODE_VERSION_NOT_USED = 3;
      VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE = 4;
      VULNERABLE_CODE_NOT_IN_EXECUTION_PATH = 5;
      VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = 6;
      INLINE_MITIGATIONS_EXIST = 7;
    }
    // type is the type of false positive.
    // For details, see https://github.com/wolfi-dev/wolfictl/blob/main/pkg/configs/advisory/v2/false_positive_determination.go
    Type type = 1;
    string note = 2;
  }

  message AnalysisNotPlanned {
    string note = 1;
  }

  message FixNotPlanned {
    string note = 1;
  }

  message PendingUpstreamFix {
    string note = 1;
  }

  // findings is the JSON-encoded struct containing vulnerability findings
  bytes findings = 10;
  // author is the person who created this event
  string author = 11;
  // reviewer is the person who reviewed this event
  string reviewer = 12;
  // status is the status of the review
  ReviewStatus status = 13;
  // issue is the original CVE Dashboard issue
  optional string issue = 14;
}


message AdvisoryFilter {
  // advisory_id filters by advisory ID
  string advisory_id = 1;

  // artifact_type filters by artifact type
  optional string artifact_type = 2;
  // artifact filters by artifact name
  optional string artifact_name = 3;
  // artifact_namespace filters by artifact namespace
  optional string artifact_namespace = 4;
  // component_name filters by component name
  optional string component_name = 5;
  // component_type filters by component type
  optional string component_type = 6;
  // aliases filters by alias name (CVE, GHSA, etc.)
  repeated string aliases = 7;
  // artifact_architecture filters by architecture (e.g., x86_64, aarch64)
  optional string artifact_architecture = 8;
  // Pagination
  string page_token = 9;
  int64 page_size = 10;

  // next id: 11
}

message AdvisoriesList {
  // ID of the group the advisories belong to, parent UIDP.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  repeated Advisory items = 2;
  // next_page_token is the token to use for the next page of results
  string next_page_token = 3;
  // total_count is the total number of advisories matching the filter (optional)
  optional int64 total_count = 4;
}

message DeleteAdvisoryRequest {
  // id is the exact UIDP of the advisory to delete.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message CreateAdvisoryRequest {
  // parent_id is the IAM scope identifier, parent under which to create this
  // advisory.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  // The advisory being created.
  Advisory advisory = 2;
}

message CreateAdvisoryEventRequest {
  // parent_id is the UIDP of the Advisory the events belong to.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  repeated AdvisoryEvent items = 2;
}

message AdvisoryEventFilter {
  // parent_id is the IAM scope identifier. If you are fetching a single
  // AdvisoryEvent you can use this to get the exact one.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
}

message AdvisoryEventList {
  // UIDP of the group the advisories belong to, parent UIDP of the
  // advisories.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  repeated AdvisoryEvent items = 2;
}
