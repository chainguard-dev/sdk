//
//Copyright 2025 Chainguard, Inc.
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: advisory.vulnerabilities.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Advisories_Create_FullMethodName              = "/chainguard.platform.vulnerabilities.v1.Advisories/Create"
	Advisories_List_FullMethodName                = "/chainguard.platform.vulnerabilities.v1.Advisories/List"
	Advisories_Update_FullMethodName              = "/chainguard.platform.vulnerabilities.v1.Advisories/Update"
	Advisories_Delete_FullMethodName              = "/chainguard.platform.vulnerabilities.v1.Advisories/Delete"
	Advisories_CreateAdvisoryEvent_FullMethodName = "/chainguard.platform.vulnerabilities.v1.Advisories/CreateAdvisoryEvent"
	Advisories_ListAdvisoryEvents_FullMethodName  = "/chainguard.platform.vulnerabilities.v1.Advisories/ListAdvisoryEvents"
)

// AdvisoriesClient is the client API for Advisories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvisoriesClient interface {
	Create(ctx context.Context, in *Advisory, opts ...grpc.CallOption) (*Advisory, error)
	List(ctx context.Context, in *AdvisoryFilter, opts ...grpc.CallOption) (*AdvisoriesList, error)
	Update(ctx context.Context, in *Advisory, opts ...grpc.CallOption) (*Advisory, error)
	Delete(ctx context.Context, in *DeleteAdvisoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAdvisoryEvent(ctx context.Context, in *CreateAdvisoryEventRequest, opts ...grpc.CallOption) (*AdvisoryEvent, error)
	ListAdvisoryEvents(ctx context.Context, in *AdvisoryEventFilter, opts ...grpc.CallOption) (*AdvisoryEventList, error)
}

type advisoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvisoriesClient(cc grpc.ClientConnInterface) AdvisoriesClient {
	return &advisoriesClient{cc}
}

func (c *advisoriesClient) Create(ctx context.Context, in *Advisory, opts ...grpc.CallOption) (*Advisory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Advisory)
	err := c.cc.Invoke(ctx, Advisories_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisoriesClient) List(ctx context.Context, in *AdvisoryFilter, opts ...grpc.CallOption) (*AdvisoriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvisoriesList)
	err := c.cc.Invoke(ctx, Advisories_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisoriesClient) Update(ctx context.Context, in *Advisory, opts ...grpc.CallOption) (*Advisory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Advisory)
	err := c.cc.Invoke(ctx, Advisories_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisoriesClient) Delete(ctx context.Context, in *DeleteAdvisoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Advisories_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisoriesClient) CreateAdvisoryEvent(ctx context.Context, in *CreateAdvisoryEventRequest, opts ...grpc.CallOption) (*AdvisoryEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvisoryEvent)
	err := c.cc.Invoke(ctx, Advisories_CreateAdvisoryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisoriesClient) ListAdvisoryEvents(ctx context.Context, in *AdvisoryEventFilter, opts ...grpc.CallOption) (*AdvisoryEventList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvisoryEventList)
	err := c.cc.Invoke(ctx, Advisories_ListAdvisoryEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvisoriesServer is the server API for Advisories service.
// All implementations must embed UnimplementedAdvisoriesServer
// for forward compatibility.
type AdvisoriesServer interface {
	Create(context.Context, *Advisory) (*Advisory, error)
	List(context.Context, *AdvisoryFilter) (*AdvisoriesList, error)
	Update(context.Context, *Advisory) (*Advisory, error)
	Delete(context.Context, *DeleteAdvisoryRequest) (*emptypb.Empty, error)
	CreateAdvisoryEvent(context.Context, *CreateAdvisoryEventRequest) (*AdvisoryEvent, error)
	ListAdvisoryEvents(context.Context, *AdvisoryEventFilter) (*AdvisoryEventList, error)
	mustEmbedUnimplementedAdvisoriesServer()
}

// UnimplementedAdvisoriesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdvisoriesServer struct{}

func (UnimplementedAdvisoriesServer) Create(context.Context, *Advisory) (*Advisory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdvisoriesServer) List(context.Context, *AdvisoryFilter) (*AdvisoriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAdvisoriesServer) Update(context.Context, *Advisory) (*Advisory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdvisoriesServer) Delete(context.Context, *DeleteAdvisoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdvisoriesServer) CreateAdvisoryEvent(context.Context, *CreateAdvisoryEventRequest) (*AdvisoryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdvisoryEvent not implemented")
}
func (UnimplementedAdvisoriesServer) ListAdvisoryEvents(context.Context, *AdvisoryEventFilter) (*AdvisoryEventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdvisoryEvents not implemented")
}
func (UnimplementedAdvisoriesServer) mustEmbedUnimplementedAdvisoriesServer() {}
func (UnimplementedAdvisoriesServer) testEmbeddedByValue()                    {}

// UnsafeAdvisoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvisoriesServer will
// result in compilation errors.
type UnsafeAdvisoriesServer interface {
	mustEmbedUnimplementedAdvisoriesServer()
}

func RegisterAdvisoriesServer(s grpc.ServiceRegistrar, srv AdvisoriesServer) {
	// If the following call pancis, it indicates UnimplementedAdvisoriesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Advisories_ServiceDesc, srv)
}

func _Advisories_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advisory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).Create(ctx, req.(*Advisory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Advisories_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvisoryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).List(ctx, req.(*AdvisoryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Advisories_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advisory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).Update(ctx, req.(*Advisory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Advisories_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdvisoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).Delete(ctx, req.(*DeleteAdvisoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Advisories_CreateAdvisoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdvisoryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).CreateAdvisoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_CreateAdvisoryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).CreateAdvisoryEvent(ctx, req.(*CreateAdvisoryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Advisories_ListAdvisoryEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvisoryEventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoriesServer).ListAdvisoryEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Advisories_ListAdvisoryEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoriesServer).ListAdvisoryEvents(ctx, req.(*AdvisoryEventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// Advisories_ServiceDesc is the grpc.ServiceDesc for Advisories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Advisories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.vulnerabilities.v1.Advisories",
	HandlerType: (*AdvisoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Advisories_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Advisories_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Advisories_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Advisories_Delete_Handler,
		},
		{
			MethodName: "CreateAdvisoryEvent",
			Handler:    _Advisories_CreateAdvisoryEvent_Handler,
		},
		{
			MethodName: "ListAdvisoryEvents",
			Handler:    _Advisories_ListAdvisoryEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advisory.vulnerabilities.proto",
}
