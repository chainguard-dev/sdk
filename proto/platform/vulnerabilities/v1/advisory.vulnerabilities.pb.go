//
//Copyright 2025 Chainguard, Inc.
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: advisory.vulnerabilities.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status represents the possible states of review for an advisory event
type AdvisoryEvent_Status int32

const (
	AdvisoryEvent_PENDING         AdvisoryEvent_Status = 0
	AdvisoryEvent_APPROVED        AdvisoryEvent_Status = 1
	AdvisoryEvent_REQUEST_CHANGES AdvisoryEvent_Status = 2
	AdvisoryEvent_REJECTED        AdvisoryEvent_Status = 3
)

// Enum value maps for AdvisoryEvent_Status.
var (
	AdvisoryEvent_Status_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REQUEST_CHANGES",
		3: "REJECTED",
	}
	AdvisoryEvent_Status_value = map[string]int32{
		"PENDING":         0,
		"APPROVED":        1,
		"REQUEST_CHANGES": 2,
		"REJECTED":        3,
	}
)

func (x AdvisoryEvent_Status) Enum() *AdvisoryEvent_Status {
	p := new(AdvisoryEvent_Status)
	*p = x
	return p
}

func (x AdvisoryEvent_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvisoryEvent_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_advisory_vulnerabilities_proto_enumTypes[0].Descriptor()
}

func (AdvisoryEvent_Status) Type() protoreflect.EnumType {
	return &file_advisory_vulnerabilities_proto_enumTypes[0]
}

func (x AdvisoryEvent_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvisoryEvent_Status.Descriptor instead.
func (AdvisoryEvent_Status) EnumDescriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 0}
}

type AdvisoryEvent_FalsePositiveDetermination_Type int32

const (
	AdvisoryEvent_FalsePositiveDetermination_UNSPECIFIED                                       AdvisoryEvent_FalsePositiveDetermination_Type = 0
	AdvisoryEvent_FalsePositiveDetermination_VULNERABILITY_RECORD_ANALYSIS_CONTESTED           AdvisoryEvent_FalsePositiveDetermination_Type = 1
	AdvisoryEvent_FalsePositiveDetermination_COMPONENT_VULNERABILITY_MISMATCH                  AdvisoryEvent_FalsePositiveDetermination_Type = 2
	AdvisoryEvent_FalsePositiveDetermination_VULNERABLE_CODE_VERSION_NOT_USED                  AdvisoryEvent_FalsePositiveDetermination_Type = 3
	AdvisoryEvent_FalsePositiveDetermination_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE           AdvisoryEvent_FalsePositiveDetermination_Type = 4
	AdvisoryEvent_FalsePositiveDetermination_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH             AdvisoryEvent_FalsePositiveDetermination_Type = 5
	AdvisoryEvent_FalsePositiveDetermination_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY AdvisoryEvent_FalsePositiveDetermination_Type = 6
	AdvisoryEvent_FalsePositiveDetermination_INLINE_MITIGATIONS_EXIST                          AdvisoryEvent_FalsePositiveDetermination_Type = 7
)

// Enum value maps for AdvisoryEvent_FalsePositiveDetermination_Type.
var (
	AdvisoryEvent_FalsePositiveDetermination_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "VULNERABILITY_RECORD_ANALYSIS_CONTESTED",
		2: "COMPONENT_VULNERABILITY_MISMATCH",
		3: "VULNERABLE_CODE_VERSION_NOT_USED",
		4: "VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE",
		5: "VULNERABLE_CODE_NOT_IN_EXECUTION_PATH",
		6: "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
		7: "INLINE_MITIGATIONS_EXIST",
	}
	AdvisoryEvent_FalsePositiveDetermination_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"VULNERABILITY_RECORD_ANALYSIS_CONTESTED":           1,
		"COMPONENT_VULNERABILITY_MISMATCH":                  2,
		"VULNERABLE_CODE_VERSION_NOT_USED":                  3,
		"VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE":           4,
		"VULNERABLE_CODE_NOT_IN_EXECUTION_PATH":             5,
		"VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY": 6,
		"INLINE_MITIGATIONS_EXIST":                          7,
	}
)

func (x AdvisoryEvent_FalsePositiveDetermination_Type) Enum() *AdvisoryEvent_FalsePositiveDetermination_Type {
	p := new(AdvisoryEvent_FalsePositiveDetermination_Type)
	*p = x
	return p
}

func (x AdvisoryEvent_FalsePositiveDetermination_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvisoryEvent_FalsePositiveDetermination_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_advisory_vulnerabilities_proto_enumTypes[1].Descriptor()
}

func (AdvisoryEvent_FalsePositiveDetermination_Type) Type() protoreflect.EnumType {
	return &file_advisory_vulnerabilities_proto_enumTypes[1]
}

func (x AdvisoryEvent_FalsePositiveDetermination_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvisoryEvent_FalsePositiveDetermination_Type.Descriptor instead.
func (AdvisoryEvent_FalsePositiveDetermination_Type) EnumDescriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 3, 0}
}

type Advisory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the CGA identifier for the advisory
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// artifact_type is the artifact type (e.g., apk, image, library)
	ArtifactType string `protobuf:"bytes,2,opt,name=artifact_type,json=artifactType,proto3" json:"artifact_type,omitempty"`
	// artifact_name is the artifact name (e.g., wheel, jar name)
	ArtifactName string `protobuf:"bytes,3,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	// artifact_namespace identifies which set of repositories the artifact is in
	ArtifactNamespace string `protobuf:"bytes,4,opt,name=artifact_namespace,json=artifactNamespace,proto3" json:"artifact_namespace,omitempty"`
	// artifact_architecture is the architecture of the artifact
	ArtifactArchitecture string `protobuf:"bytes,5,opt,name=artifact_architecture,json=artifactArchitecture,proto3" json:"artifact_architecture,omitempty"`
	// component_name is the component within the subpackage
	ComponentName *string `protobuf:"bytes,6,opt,name=component_name,json=componentName,proto3,oneof" json:"component_name,omitempty"`
	// component_location is the filesystem location of the component
	ComponentLocation *string `protobuf:"bytes,7,opt,name=component_location,json=componentLocation,proto3,oneof" json:"component_location,omitempty"`
	// component_type is the language ecosystem (go-module, python, etc)
	ComponentType *string `protobuf:"bytes,8,opt,name=component_type,json=componentType,proto3,oneof" json:"component_type,omitempty"`
	// component_scanner_id is the unique ID generated by the scanner
	ComponentScannerId *string `protobuf:"bytes,9,opt,name=component_scanner_id,json=componentScannerId,proto3,oneof" json:"component_scanner_id,omitempty"`
	// created_at is when the advisory was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is when the advisory was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// deleted_at is when the advisory was deleted (if applicable)
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	// aliases are other vulnerability identifiers this advisory applies to
	Aliases []string `protobuf:"bytes,13,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// events are advisory events associated with this advisory
	Events []*AdvisoryEvent `protobuf:"bytes,14,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisory.ProtoReflect.Descriptor instead.
func (*Advisory) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{0}
}

func (x *Advisory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Advisory) GetArtifactType() string {
	if x != nil {
		return x.ArtifactType
	}
	return ""
}

func (x *Advisory) GetArtifactName() string {
	if x != nil {
		return x.ArtifactName
	}
	return ""
}

func (x *Advisory) GetArtifactNamespace() string {
	if x != nil {
		return x.ArtifactNamespace
	}
	return ""
}

func (x *Advisory) GetArtifactArchitecture() string {
	if x != nil {
		return x.ArtifactArchitecture
	}
	return ""
}

func (x *Advisory) GetComponentName() string {
	if x != nil && x.ComponentName != nil {
		return *x.ComponentName
	}
	return ""
}

func (x *Advisory) GetComponentLocation() string {
	if x != nil && x.ComponentLocation != nil {
		return *x.ComponentLocation
	}
	return ""
}

func (x *Advisory) GetComponentType() string {
	if x != nil && x.ComponentType != nil {
		return *x.ComponentType
	}
	return ""
}

func (x *Advisory) GetComponentScannerId() string {
	if x != nil && x.ComponentScannerId != nil {
		return *x.ComponentScannerId
	}
	return ""
}

func (x *Advisory) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Advisory) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Advisory) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Advisory) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Advisory) GetEvents() []*AdvisoryEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AdvisoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the CGA identifier this event belongs to
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Event type determines which specific event field is populated
	//
	// Types that are assignable to Type:
	//
	//	*AdvisoryEvent_Detection_
	//	*AdvisoryEvent_Fixed_
	//	*AdvisoryEvent_FalsePositiveDetermination_
	//	*AdvisoryEvent_AnalysisNotPlanned_
	//	*AdvisoryEvent_FixNotPlanned_
	//	*AdvisoryEvent_PendingUpstreamFix_
	//	*AdvisoryEvent_TruePositiveDetermination_
	Type isAdvisoryEvent_Type `protobuf_oneof:"type"`
	// findings is the JSON-encoded struct containing vulnerability findings
	Findings []byte `protobuf:"bytes,10,opt,name=findings,proto3" json:"findings,omitempty"`
	// author is the person who created this event
	Author string `protobuf:"bytes,11,opt,name=author,proto3" json:"author,omitempty"`
	// reviewer is the person who reviewed this event
	Reviewer string `protobuf:"bytes,12,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	// status is the status of the review
	Status AdvisoryEvent_Status `protobuf:"varint,13,opt,name=status,proto3,enum=chainguard.platform.vulnerabilities.v1.AdvisoryEvent_Status" json:"status,omitempty"`
	// issue is the original CVE Dashboard issue
	Issue string `protobuf:"bytes,14,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *AdvisoryEvent) Reset() {
	*x = AdvisoryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent) ProtoMessage() {}

func (x *AdvisoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1}
}

func (x *AdvisoryEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdvisoryEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *AdvisoryEvent) GetType() isAdvisoryEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AdvisoryEvent) GetDetection() *AdvisoryEvent_Detection {
	if x, ok := x.GetType().(*AdvisoryEvent_Detection_); ok {
		return x.Detection
	}
	return nil
}

func (x *AdvisoryEvent) GetFixed() *AdvisoryEvent_Fixed {
	if x, ok := x.GetType().(*AdvisoryEvent_Fixed_); ok {
		return x.Fixed
	}
	return nil
}

func (x *AdvisoryEvent) GetFalsePositiveDetermination() *AdvisoryEvent_FalsePositiveDetermination {
	if x, ok := x.GetType().(*AdvisoryEvent_FalsePositiveDetermination_); ok {
		return x.FalsePositiveDetermination
	}
	return nil
}

func (x *AdvisoryEvent) GetAnalysisNotPlanned() *AdvisoryEvent_AnalysisNotPlanned {
	if x, ok := x.GetType().(*AdvisoryEvent_AnalysisNotPlanned_); ok {
		return x.AnalysisNotPlanned
	}
	return nil
}

func (x *AdvisoryEvent) GetFixNotPlanned() *AdvisoryEvent_FixNotPlanned {
	if x, ok := x.GetType().(*AdvisoryEvent_FixNotPlanned_); ok {
		return x.FixNotPlanned
	}
	return nil
}

func (x *AdvisoryEvent) GetPendingUpstreamFix() *AdvisoryEvent_PendingUpstreamFix {
	if x, ok := x.GetType().(*AdvisoryEvent_PendingUpstreamFix_); ok {
		return x.PendingUpstreamFix
	}
	return nil
}

func (x *AdvisoryEvent) GetTruePositiveDetermination() *AdvisoryEvent_TruePositiveDetermination {
	if x, ok := x.GetType().(*AdvisoryEvent_TruePositiveDetermination_); ok {
		return x.TruePositiveDetermination
	}
	return nil
}

func (x *AdvisoryEvent) GetFindings() []byte {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *AdvisoryEvent) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *AdvisoryEvent) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *AdvisoryEvent) GetStatus() AdvisoryEvent_Status {
	if x != nil {
		return x.Status
	}
	return AdvisoryEvent_PENDING
}

func (x *AdvisoryEvent) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

type isAdvisoryEvent_Type interface {
	isAdvisoryEvent_Type()
}

type AdvisoryEvent_Detection_ struct {
	Detection *AdvisoryEvent_Detection `protobuf:"bytes,3,opt,name=detection,proto3,oneof"`
}

type AdvisoryEvent_Fixed_ struct {
	Fixed *AdvisoryEvent_Fixed `protobuf:"bytes,4,opt,name=fixed,proto3,oneof"`
}

type AdvisoryEvent_FalsePositiveDetermination_ struct {
	FalsePositiveDetermination *AdvisoryEvent_FalsePositiveDetermination `protobuf:"bytes,5,opt,name=false_positive_determination,json=falsePositiveDetermination,proto3,oneof"`
}

type AdvisoryEvent_AnalysisNotPlanned_ struct {
	AnalysisNotPlanned *AdvisoryEvent_AnalysisNotPlanned `protobuf:"bytes,6,opt,name=analysis_not_planned,json=analysisNotPlanned,proto3,oneof"`
}

type AdvisoryEvent_FixNotPlanned_ struct {
	FixNotPlanned *AdvisoryEvent_FixNotPlanned `protobuf:"bytes,7,opt,name=fix_not_planned,json=fixNotPlanned,proto3,oneof"`
}

type AdvisoryEvent_PendingUpstreamFix_ struct {
	PendingUpstreamFix *AdvisoryEvent_PendingUpstreamFix `protobuf:"bytes,8,opt,name=pending_upstream_fix,json=pendingUpstreamFix,proto3,oneof"`
}

type AdvisoryEvent_TruePositiveDetermination_ struct {
	TruePositiveDetermination *AdvisoryEvent_TruePositiveDetermination `protobuf:"bytes,9,opt,name=true_positive_determination,json=truePositiveDetermination,proto3,oneof"`
}

func (*AdvisoryEvent_Detection_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_Fixed_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_FalsePositiveDetermination_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_AnalysisNotPlanned_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_FixNotPlanned_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_PendingUpstreamFix_) isAdvisoryEvent_Type() {}

func (*AdvisoryEvent_TruePositiveDetermination_) isAdvisoryEvent_Type() {}

type AdvisoryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id filters by advisory ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// artifact_type filters by artifact type
	ArtifactType *string `protobuf:"bytes,2,opt,name=artifact_type,json=artifactType,proto3,oneof" json:"artifact_type,omitempty"`
	// artifact filters by artifact name
	ArtifactName *string `protobuf:"bytes,3,opt,name=artifact_name,json=artifactName,proto3,oneof" json:"artifact_name,omitempty"`
	// artifact_namespace filters by artifact namespace
	ArtifactNamespace *string `protobuf:"bytes,4,opt,name=artifact_namespace,json=artifactNamespace,proto3,oneof" json:"artifact_namespace,omitempty"`
	// component_name filters by component name
	ComponentName *string `protobuf:"bytes,5,opt,name=component_name,json=componentName,proto3,oneof" json:"component_name,omitempty"`
	// component_type filters by component type
	ComponentType *string `protobuf:"bytes,6,opt,name=component_type,json=componentType,proto3,oneof" json:"component_type,omitempty"`
	// aliases filters by alias name (CVE, GHSA, etc.)
	Aliases []string `protobuf:"bytes,7,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *AdvisoryFilter) Reset() {
	*x = AdvisoryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryFilter) ProtoMessage() {}

func (x *AdvisoryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryFilter.ProtoReflect.Descriptor instead.
func (*AdvisoryFilter) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{2}
}

func (x *AdvisoryFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdvisoryFilter) GetArtifactType() string {
	if x != nil && x.ArtifactType != nil {
		return *x.ArtifactType
	}
	return ""
}

func (x *AdvisoryFilter) GetArtifactName() string {
	if x != nil && x.ArtifactName != nil {
		return *x.ArtifactName
	}
	return ""
}

func (x *AdvisoryFilter) GetArtifactNamespace() string {
	if x != nil && x.ArtifactNamespace != nil {
		return *x.ArtifactNamespace
	}
	return ""
}

func (x *AdvisoryFilter) GetComponentName() string {
	if x != nil && x.ComponentName != nil {
		return *x.ComponentName
	}
	return ""
}

func (x *AdvisoryFilter) GetComponentType() string {
	if x != nil && x.ComponentType != nil {
		return *x.ComponentType
	}
	return ""
}

func (x *AdvisoryFilter) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type AdvisoriesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Advisory `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AdvisoriesList) Reset() {
	*x = AdvisoriesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoriesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoriesList) ProtoMessage() {}

func (x *AdvisoriesList) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoriesList.ProtoReflect.Descriptor instead.
func (*AdvisoriesList) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{3}
}

func (x *AdvisoriesList) GetItems() []*Advisory {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteAdvisoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id filters by advisory ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAdvisoryRequest) Reset() {
	*x = DeleteAdvisoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdvisoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdvisoryRequest) ProtoMessage() {}

func (x *DeleteAdvisoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdvisoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdvisoryRequest) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAdvisoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAdvisoryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// advisory_id filters by advisory ID
	AdvisoryId string           `protobuf:"bytes,1,opt,name=advisory_id,json=advisoryId,proto3" json:"advisory_id,omitempty"`
	Items      []*AdvisoryEvent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CreateAdvisoryEventRequest) Reset() {
	*x = CreateAdvisoryEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdvisoryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdvisoryEventRequest) ProtoMessage() {}

func (x *CreateAdvisoryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdvisoryEventRequest.ProtoReflect.Descriptor instead.
func (*CreateAdvisoryEventRequest) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAdvisoryEventRequest) GetAdvisoryId() string {
	if x != nil {
		return x.AdvisoryId
	}
	return ""
}

func (x *CreateAdvisoryEventRequest) GetItems() []*AdvisoryEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

type AdvisoryEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// advisory_id filters by advisory ID
	AdvisoryId string `protobuf:"bytes,1,opt,name=advisory_id,json=advisoryId,proto3" json:"advisory_id,omitempty"`
}

func (x *AdvisoryEventFilter) Reset() {
	*x = AdvisoryEventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEventFilter) ProtoMessage() {}

func (x *AdvisoryEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEventFilter.ProtoReflect.Descriptor instead.
func (*AdvisoryEventFilter) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{6}
}

func (x *AdvisoryEventFilter) GetAdvisoryId() string {
	if x != nil {
		return x.AdvisoryId
	}
	return ""
}

type AdvisoryEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AdvisoryEvent `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AdvisoryEventList) Reset() {
	*x = AdvisoryEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEventList) ProtoMessage() {}

func (x *AdvisoryEventList) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEventList.ProtoReflect.Descriptor instead.
func (*AdvisoryEventList) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{7}
}

func (x *AdvisoryEventList) GetItems() []*AdvisoryEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

type AdvisoryEvent_Detection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*AdvisoryEvent_Detection_Nvdapi
	//	*AdvisoryEvent_Detection_Manual_
	//	*AdvisoryEvent_Detection_Scanv1
	Type isAdvisoryEvent_Detection_Type `protobuf_oneof:"type"`
}

func (x *AdvisoryEvent_Detection) Reset() {
	*x = AdvisoryEvent_Detection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_Detection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_Detection) ProtoMessage() {}

func (x *AdvisoryEvent_Detection) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_Detection.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_Detection) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 0}
}

func (m *AdvisoryEvent_Detection) GetType() isAdvisoryEvent_Detection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AdvisoryEvent_Detection) GetNvdapi() *AdvisoryEvent_Detection_NVDAPI {
	if x, ok := x.GetType().(*AdvisoryEvent_Detection_Nvdapi); ok {
		return x.Nvdapi
	}
	return nil
}

func (x *AdvisoryEvent_Detection) GetManual() *AdvisoryEvent_Detection_Manual {
	if x, ok := x.GetType().(*AdvisoryEvent_Detection_Manual_); ok {
		return x.Manual
	}
	return nil
}

func (x *AdvisoryEvent_Detection) GetScanv1() *AdvisoryEvent_Detection_ScanV1 {
	if x, ok := x.GetType().(*AdvisoryEvent_Detection_Scanv1); ok {
		return x.Scanv1
	}
	return nil
}

type isAdvisoryEvent_Detection_Type interface {
	isAdvisoryEvent_Detection_Type()
}

type AdvisoryEvent_Detection_Nvdapi struct {
	Nvdapi *AdvisoryEvent_Detection_NVDAPI `protobuf:"bytes,1,opt,name=nvdapi,proto3,oneof"`
}

type AdvisoryEvent_Detection_Manual_ struct {
	Manual *AdvisoryEvent_Detection_Manual `protobuf:"bytes,2,opt,name=manual,proto3,oneof"`
}

type AdvisoryEvent_Detection_Scanv1 struct {
	Scanv1 *AdvisoryEvent_Detection_ScanV1 `protobuf:"bytes,3,opt,name=scanv1,proto3,oneof"`
}

func (*AdvisoryEvent_Detection_Nvdapi) isAdvisoryEvent_Detection_Type() {}

func (*AdvisoryEvent_Detection_Manual_) isAdvisoryEvent_Detection_Type() {}

func (*AdvisoryEvent_Detection_Scanv1) isAdvisoryEvent_Detection_Type() {}

type AdvisoryEvent_Fixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedVersion string `protobuf:"bytes,1,opt,name=fixed_version,json=fixedVersion,proto3" json:"fixed_version,omitempty"`
}

func (x *AdvisoryEvent_Fixed) Reset() {
	*x = AdvisoryEvent_Fixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_Fixed) ProtoMessage() {}

func (x *AdvisoryEvent_Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_Fixed.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_Fixed) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AdvisoryEvent_Fixed) GetFixedVersion() string {
	if x != nil {
		return x.FixedVersion
	}
	return ""
}

type AdvisoryEvent_TruePositiveDetermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AdvisoryEvent_TruePositiveDetermination) Reset() {
	*x = AdvisoryEvent_TruePositiveDetermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_TruePositiveDetermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_TruePositiveDetermination) ProtoMessage() {}

func (x *AdvisoryEvent_TruePositiveDetermination) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_TruePositiveDetermination.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_TruePositiveDetermination) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 2}
}

func (x *AdvisoryEvent_TruePositiveDetermination) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AdvisoryEvent_FalsePositiveDetermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of false positive.
	// For details, see https://github.com/wolfi-dev/wolfictl/blob/main/pkg/configs/advisory/v2/false_positive_determination.go
	Type AdvisoryEvent_FalsePositiveDetermination_Type `protobuf:"varint,1,opt,name=type,proto3,enum=chainguard.platform.vulnerabilities.v1.AdvisoryEvent_FalsePositiveDetermination_Type" json:"type,omitempty"`
	Note string                                        `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AdvisoryEvent_FalsePositiveDetermination) Reset() {
	*x = AdvisoryEvent_FalsePositiveDetermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_FalsePositiveDetermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_FalsePositiveDetermination) ProtoMessage() {}

func (x *AdvisoryEvent_FalsePositiveDetermination) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_FalsePositiveDetermination.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_FalsePositiveDetermination) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 3}
}

func (x *AdvisoryEvent_FalsePositiveDetermination) GetType() AdvisoryEvent_FalsePositiveDetermination_Type {
	if x != nil {
		return x.Type
	}
	return AdvisoryEvent_FalsePositiveDetermination_UNSPECIFIED
}

func (x *AdvisoryEvent_FalsePositiveDetermination) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AdvisoryEvent_AnalysisNotPlanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AdvisoryEvent_AnalysisNotPlanned) Reset() {
	*x = AdvisoryEvent_AnalysisNotPlanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_AnalysisNotPlanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_AnalysisNotPlanned) ProtoMessage() {}

func (x *AdvisoryEvent_AnalysisNotPlanned) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_AnalysisNotPlanned.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_AnalysisNotPlanned) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 4}
}

func (x *AdvisoryEvent_AnalysisNotPlanned) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AdvisoryEvent_FixNotPlanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AdvisoryEvent_FixNotPlanned) Reset() {
	*x = AdvisoryEvent_FixNotPlanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_FixNotPlanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_FixNotPlanned) ProtoMessage() {}

func (x *AdvisoryEvent_FixNotPlanned) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_FixNotPlanned.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_FixNotPlanned) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 5}
}

func (x *AdvisoryEvent_FixNotPlanned) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AdvisoryEvent_PendingUpstreamFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AdvisoryEvent_PendingUpstreamFix) Reset() {
	*x = AdvisoryEvent_PendingUpstreamFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_PendingUpstreamFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_PendingUpstreamFix) ProtoMessage() {}

func (x *AdvisoryEvent_PendingUpstreamFix) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_PendingUpstreamFix.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_PendingUpstreamFix) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 6}
}

func (x *AdvisoryEvent_PendingUpstreamFix) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AdvisoryEvent_Detection_NVDAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpeSearched string `protobuf:"bytes,1,opt,name=cpe_searched,json=cpeSearched,proto3" json:"cpe_searched,omitempty"`
	CpeFound    string `protobuf:"bytes,2,opt,name=cpe_found,json=cpeFound,proto3" json:"cpe_found,omitempty"`
}

func (x *AdvisoryEvent_Detection_NVDAPI) Reset() {
	*x = AdvisoryEvent_Detection_NVDAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_Detection_NVDAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_Detection_NVDAPI) ProtoMessage() {}

func (x *AdvisoryEvent_Detection_NVDAPI) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_Detection_NVDAPI.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_Detection_NVDAPI) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *AdvisoryEvent_Detection_NVDAPI) GetCpeSearched() string {
	if x != nil {
		return x.CpeSearched
	}
	return ""
}

func (x *AdvisoryEvent_Detection_NVDAPI) GetCpeFound() string {
	if x != nil {
		return x.CpeFound
	}
	return ""
}

type AdvisoryEvent_Detection_Manual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdvisoryEvent_Detection_Manual) Reset() {
	*x = AdvisoryEvent_Detection_Manual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_Detection_Manual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_Detection_Manual) ProtoMessage() {}

func (x *AdvisoryEvent_Detection_Manual) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_Detection_Manual.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_Detection_Manual) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 0, 1}
}

type AdvisoryEvent_Detection_ScanV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scanner           string `protobuf:"bytes,1,opt,name=scanner,proto3" json:"scanner,omitempty"`
	SubpackageName    string `protobuf:"bytes,2,opt,name=subpackage_name,json=subpackageName,proto3" json:"subpackage_name,omitempty"`
	ComponentId       string `protobuf:"bytes,3,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	ComponentName     string `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentVersion  string `protobuf:"bytes,5,opt,name=component_version,json=componentVersion,proto3" json:"component_version,omitempty"`
	ComponentType     string `protobuf:"bytes,6,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentLocation string `protobuf:"bytes,7,opt,name=component_location,json=componentLocation,proto3" json:"component_location,omitempty"`
}

func (x *AdvisoryEvent_Detection_ScanV1) Reset() {
	*x = AdvisoryEvent_Detection_ScanV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_vulnerabilities_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryEvent_Detection_ScanV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryEvent_Detection_ScanV1) ProtoMessage() {}

func (x *AdvisoryEvent_Detection_ScanV1) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_vulnerabilities_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryEvent_Detection_ScanV1.ProtoReflect.Descriptor instead.
func (*AdvisoryEvent_Detection_ScanV1) Descriptor() ([]byte, []int) {
	return file_advisory_vulnerabilities_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *AdvisoryEvent_Detection_ScanV1) GetScanner() string {
	if x != nil {
		return x.Scanner
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetSubpackageName() string {
	if x != nil {
		return x.SubpackageName
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetComponentVersion() string {
	if x != nil {
		return x.ComponentVersion
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *AdvisoryEvent_Detection_ScanV1) GetComponentLocation() string {
	if x != nil {
		return x.ComponentLocation
	}
	return ""
}

var File_advisory_vulnerabilities_proto protoreflect.FileDescriptor

var file_advisory_vulnerabilities_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x06, 0x0a,
	0x08, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x92,
	0x14, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5f, 0x0a, 0x09, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x05, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x94, 0x01, 0x0a, 0x1c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x14, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x78, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x69, 0x78, 0x12, 0x91, 0x01, 0x0a, 0x1b, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x75,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x1a, 0xa8, 0x05, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x60, 0x0a, 0x06, 0x6e, 0x76, 0x64, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x56, 0x44, 0x41, 0x50, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x12, 0x60, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x76, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x63, 0x61, 0x6e, 0x76, 0x31, 0x1a, 0x48, 0x0a, 0x06, 0x4e, 0x56, 0x44, 0x41, 0x50, 0x49,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x1a, 0x08, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x98, 0x02, 0x0a, 0x06, 0x53,
	0x63, 0x61, 0x6e, 0x56, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x2c, 0x0a,
	0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x0a, 0x19, 0x54,
	0x72, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xdb, 0x03, 0x0a,
	0x1a, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x41, 0x52, 0x59, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x28, 0x0a, 0x12, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x23, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x28, 0x0a, 0x12, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x36, 0x0a, 0x13, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x11, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xe0, 0x08, 0x0a, 0x0a,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xec, 0x0e,
	0x12, 0xac, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xee, 0x0e, 0x10, 0x01, 0x12,
	0xa8, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xaf,
	0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xed, 0x0e, 0x12, 0x98, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12,
	0x04, 0x0a, 0x02, 0xef, 0x0e, 0x12, 0xdc, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04,
	0x0a, 0x02, 0xec, 0x0e, 0x12, 0xd7, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xee, 0x0e, 0x10, 0x01, 0x42, 0x86,
	0x01, 0x0a, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x1c, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x34, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_advisory_vulnerabilities_proto_rawDescOnce sync.Once
	file_advisory_vulnerabilities_proto_rawDescData = file_advisory_vulnerabilities_proto_rawDesc
)

func file_advisory_vulnerabilities_proto_rawDescGZIP() []byte {
	file_advisory_vulnerabilities_proto_rawDescOnce.Do(func() {
		file_advisory_vulnerabilities_proto_rawDescData = protoimpl.X.CompressGZIP(file_advisory_vulnerabilities_proto_rawDescData)
	})
	return file_advisory_vulnerabilities_proto_rawDescData
}

var file_advisory_vulnerabilities_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_advisory_vulnerabilities_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_advisory_vulnerabilities_proto_goTypes = []any{
	(AdvisoryEvent_Status)(0),                          // 0: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Status
	(AdvisoryEvent_FalsePositiveDetermination_Type)(0), // 1: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FalsePositiveDetermination.Type
	(*Advisory)(nil),                                   // 2: chainguard.platform.vulnerabilities.v1.Advisory
	(*AdvisoryEvent)(nil),                              // 3: chainguard.platform.vulnerabilities.v1.AdvisoryEvent
	(*AdvisoryFilter)(nil),                             // 4: chainguard.platform.vulnerabilities.v1.AdvisoryFilter
	(*AdvisoriesList)(nil),                             // 5: chainguard.platform.vulnerabilities.v1.AdvisoriesList
	(*DeleteAdvisoryRequest)(nil),                      // 6: chainguard.platform.vulnerabilities.v1.DeleteAdvisoryRequest
	(*CreateAdvisoryEventRequest)(nil),                 // 7: chainguard.platform.vulnerabilities.v1.CreateAdvisoryEventRequest
	(*AdvisoryEventFilter)(nil),                        // 8: chainguard.platform.vulnerabilities.v1.AdvisoryEventFilter
	(*AdvisoryEventList)(nil),                          // 9: chainguard.platform.vulnerabilities.v1.AdvisoryEventList
	(*AdvisoryEvent_Detection)(nil),                    // 10: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection
	(*AdvisoryEvent_Fixed)(nil),                        // 11: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Fixed
	(*AdvisoryEvent_TruePositiveDetermination)(nil),    // 12: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.TruePositiveDetermination
	(*AdvisoryEvent_FalsePositiveDetermination)(nil),   // 13: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FalsePositiveDetermination
	(*AdvisoryEvent_AnalysisNotPlanned)(nil),           // 14: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.AnalysisNotPlanned
	(*AdvisoryEvent_FixNotPlanned)(nil),                // 15: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FixNotPlanned
	(*AdvisoryEvent_PendingUpstreamFix)(nil),           // 16: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.PendingUpstreamFix
	(*AdvisoryEvent_Detection_NVDAPI)(nil),             // 17: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.NVDAPI
	(*AdvisoryEvent_Detection_Manual)(nil),             // 18: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.Manual
	(*AdvisoryEvent_Detection_ScanV1)(nil),             // 19: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.ScanV1
	(*timestamppb.Timestamp)(nil),                      // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                              // 21: google.protobuf.Empty
}
var file_advisory_vulnerabilities_proto_depIdxs = []int32{
	20, // 0: chainguard.platform.vulnerabilities.v1.Advisory.created_at:type_name -> google.protobuf.Timestamp
	20, // 1: chainguard.platform.vulnerabilities.v1.Advisory.updated_at:type_name -> google.protobuf.Timestamp
	20, // 2: chainguard.platform.vulnerabilities.v1.Advisory.deleted_at:type_name -> google.protobuf.Timestamp
	3,  // 3: chainguard.platform.vulnerabilities.v1.Advisory.events:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent
	20, // 4: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.timestamp:type_name -> google.protobuf.Timestamp
	10, // 5: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.detection:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection
	11, // 6: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.fixed:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Fixed
	13, // 7: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.false_positive_determination:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FalsePositiveDetermination
	14, // 8: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.analysis_not_planned:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.AnalysisNotPlanned
	15, // 9: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.fix_not_planned:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FixNotPlanned
	16, // 10: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.pending_upstream_fix:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.PendingUpstreamFix
	12, // 11: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.true_positive_determination:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.TruePositiveDetermination
	0,  // 12: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.status:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Status
	2,  // 13: chainguard.platform.vulnerabilities.v1.AdvisoriesList.items:type_name -> chainguard.platform.vulnerabilities.v1.Advisory
	3,  // 14: chainguard.platform.vulnerabilities.v1.CreateAdvisoryEventRequest.items:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent
	3,  // 15: chainguard.platform.vulnerabilities.v1.AdvisoryEventList.items:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent
	17, // 16: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.nvdapi:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.NVDAPI
	18, // 17: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.manual:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.Manual
	19, // 18: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.scanv1:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.Detection.ScanV1
	1,  // 19: chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FalsePositiveDetermination.type:type_name -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent.FalsePositiveDetermination.Type
	2,  // 20: chainguard.platform.vulnerabilities.v1.Advisories.Create:input_type -> chainguard.platform.vulnerabilities.v1.Advisory
	4,  // 21: chainguard.platform.vulnerabilities.v1.Advisories.List:input_type -> chainguard.platform.vulnerabilities.v1.AdvisoryFilter
	2,  // 22: chainguard.platform.vulnerabilities.v1.Advisories.Update:input_type -> chainguard.platform.vulnerabilities.v1.Advisory
	6,  // 23: chainguard.platform.vulnerabilities.v1.Advisories.Delete:input_type -> chainguard.platform.vulnerabilities.v1.DeleteAdvisoryRequest
	7,  // 24: chainguard.platform.vulnerabilities.v1.Advisories.CreateAdvisoryEvent:input_type -> chainguard.platform.vulnerabilities.v1.CreateAdvisoryEventRequest
	8,  // 25: chainguard.platform.vulnerabilities.v1.Advisories.ListAdvisoryEvents:input_type -> chainguard.platform.vulnerabilities.v1.AdvisoryEventFilter
	2,  // 26: chainguard.platform.vulnerabilities.v1.Advisories.Create:output_type -> chainguard.platform.vulnerabilities.v1.Advisory
	5,  // 27: chainguard.platform.vulnerabilities.v1.Advisories.List:output_type -> chainguard.platform.vulnerabilities.v1.AdvisoriesList
	2,  // 28: chainguard.platform.vulnerabilities.v1.Advisories.Update:output_type -> chainguard.platform.vulnerabilities.v1.Advisory
	21, // 29: chainguard.platform.vulnerabilities.v1.Advisories.Delete:output_type -> google.protobuf.Empty
	3,  // 30: chainguard.platform.vulnerabilities.v1.Advisories.CreateAdvisoryEvent:output_type -> chainguard.platform.vulnerabilities.v1.AdvisoryEvent
	9,  // 31: chainguard.platform.vulnerabilities.v1.Advisories.ListAdvisoryEvents:output_type -> chainguard.platform.vulnerabilities.v1.AdvisoryEventList
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_advisory_vulnerabilities_proto_init() }
func file_advisory_vulnerabilities_proto_init() {
	if File_advisory_vulnerabilities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_advisory_vulnerabilities_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Advisory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoriesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAdvisoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAdvisoryEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_Detection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_Fixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_TruePositiveDetermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_FalsePositiveDetermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_AnalysisNotPlanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_FixNotPlanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_PendingUpstreamFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_Detection_NVDAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_Detection_Manual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_vulnerabilities_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AdvisoryEvent_Detection_ScanV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_advisory_vulnerabilities_proto_msgTypes[0].OneofWrappers = []any{}
	file_advisory_vulnerabilities_proto_msgTypes[1].OneofWrappers = []any{
		(*AdvisoryEvent_Detection_)(nil),
		(*AdvisoryEvent_Fixed_)(nil),
		(*AdvisoryEvent_FalsePositiveDetermination_)(nil),
		(*AdvisoryEvent_AnalysisNotPlanned_)(nil),
		(*AdvisoryEvent_FixNotPlanned_)(nil),
		(*AdvisoryEvent_PendingUpstreamFix_)(nil),
		(*AdvisoryEvent_TruePositiveDetermination_)(nil),
	}
	file_advisory_vulnerabilities_proto_msgTypes[2].OneofWrappers = []any{}
	file_advisory_vulnerabilities_proto_msgTypes[8].OneofWrappers = []any{
		(*AdvisoryEvent_Detection_Nvdapi)(nil),
		(*AdvisoryEvent_Detection_Manual_)(nil),
		(*AdvisoryEvent_Detection_Scanv1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_advisory_vulnerabilities_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_advisory_vulnerabilities_proto_goTypes,
		DependencyIndexes: file_advisory_vulnerabilities_proto_depIdxs,
		EnumInfos:         file_advisory_vulnerabilities_proto_enumTypes,
		MessageInfos:      file_advisory_vulnerabilities_proto_msgTypes,
	}.Build()
	File_advisory_vulnerabilities_proto = out.File
	file_advisory_vulnerabilities_proto_rawDesc = nil
	file_advisory_vulnerabilities_proto_goTypes = nil
	file_advisory_vulnerabilities_proto_depIdxs = nil
}
