syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/registry/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.registry.v1";
option java_outer_classname = "PlatformRegistryProto";

package chainguard.platform.registry;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";
import "vuln.platform.proto";
import "sbom.platform.proto";

service Registry {
  rpc CreateRepo(CreateRepoRequest) returns (Repo) {
    option (google.api.http) = {
      post: "/registry/v1/repos/{parent_id=**}"
      body: "repo"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_CREATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.repo.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc UpdateRepo(Repo) returns (Repo) {
    option (google.api.http) = {
      put: "/registry/v1/repos/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_UPDATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.repo.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc ListRepos(RepoFilter) returns (RepoList) {
    option (google.api.http) = {
      get: "/registry/v1/repos"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST]
        unscoped: true
      }
    };
  }

  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/registry/v1/repos/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.repo.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc CreateTag(CreateTagRequest) returns (Tag) {
    option (google.api.http) = {
      post: "/registry/v1/tags/{repo_id=**}"
      body: "tag"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TAG_CREATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.tag.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc UpdateTag(Tag) returns (Tag) {
    option (google.api.http) = {
      put: "/registry/v1/tags/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TAG_UPDATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.tag.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc DeleteTag(DeleteTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/registry/v1/tags/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TAG_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.platform.registry.tag.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc ListTags(TagFilter) returns (TagList) {
    option (google.api.http) = {
      get: "/registry/v1/tags"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TAG_LIST]
        unscoped: true
      }
    };
  }

  rpc ListTagHistory(TagHistoryFilter) returns (TagHistoryList) {
    option (google.api.http) = {
      get: "/registry/v1/tags/{parent_id=**}/history"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TAG_LIST]
      }
    };
  }

  rpc GetSbom(SbomRequest) returns (chainguard.platform.tenant.Sbom2) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digests/{digest=*}/sbom"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_TENANT_SBOMS_LIST, CAP_MANIFEST_METADATA_LIST]
      }
    };
  }

  rpc GetImageConfig(ImageConfigRequest) returns (ImageConfig) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digests/{digest=*}/imageconfig"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_MANIFEST_METADATA_LIST]
      }
    };
  }

  rpc GetArchs(ArchRequest) returns (Archs) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digests/{digest=*}/architectures"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_MANIFEST_METADATA_LIST]
      }
    };
  }

  rpc GetSize(SizeRequest) returns (Size) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digests/{digest=*}/size"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_MANIFEST_METADATA_LIST]
      }
    };
  }

  rpc GetRawSbom(RawSbomRequest) returns (RawSbom) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digest/{digest=*}/rawsbom"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_TENANT_SBOMS_LIST]
      }
    };
  }

  rpc GetVulnReport(VulnReportRequest) returns (chainguard.platform.tenant.VulnReport) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/digests/{digest=*}/vulnreport"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_REPO_LIST, CAP_TENANT_VULN_REPORTS_LIST]
      }
    };
  }

  rpc ListManifestMetadata(ManifestMetadataFilter) returns (ManifestMetadataList) {
    option (google.api.http) = {
      get: "/registry/v1/repos/{repo_id=**}/manifestmetdata"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_MANIFEST_METADATA_LIST]
      }
    };
  };

  rpc GetPackageVersionMetadata(PackageVersionMetadataRequest) returns (PackageVersionMetadata) {
    option (google.api.http) = {
      get: "/registry/v1/versions/{package=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_VERSION_LIST]
        unscoped: true
      }
    };
  }

  rpc ListBuildReports(BuildReportFilter) returns (BuildReportList) {
    option (google.api.http) = {
      get: "/registry/v1/buildreports"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_BUILD_REPORT_LIST]
        unscoped: true
      }
    };
  }
}

message Repo {
  // id is the identifier of this specific repository.
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  // name is the human-readable name of the repository.
  string name = 2;

  // catalog_tier is the catalog tier this repository belongs to.
  CatalogTier catalog_tier = 3;

  // bundles is a list of tags/labels that allow us to group repositories to each other for sales purposes.
  repeated string bundles = 4;

  // readme is raw Markdown file contents describing the repo.
  string readme = 5;

  // (optional) Repository sync configuration. If enabled, images are synced from the source to this repo.
  // NOTE: This property can only be set by Chainguard.
  // Note: the json_name defaults to "syncConfig" which causes our eventing
  // system to not work properly (since the protobuf name is "sync_config")
  SyncConfig sync_config = 6 [json_name="sync_config"];

  // (optional) custom apko image configuration that gets applied to images in this repo.
  CustomOverlay custom_overlay = 7;
}

enum CatalogTier {
  UNKNOWN  = 0;

  FREE     = 1 [deprecated = true];
  STANDARD = 2 [deprecated = true];
  PREMIUM  = 3 [deprecated = true];

  APPLICATION = 4;
  BASE = 5;
  FIPS = 6;
  AI = 7;
}

message SyncConfig {
  // Repo ID to sync from.
  string source = 1;

  // Controls whether exported tags will be uniquely labeled.
  bool unique_tags = 2;

  // When the catalog syncer should stop syncing from the source repository.
  google.protobuf.Timestamp expiration = 3;

  // GCP Artifact Registry repo to sync to.
  string google = 4;

  // AWS ECR repo to sync to.
  string amazon = 5;

  // Hold 6 for Azure.

  // Controls whether to synchronize APKs for the images in this repository
  // to the enclosing Chainguard group.
  bool sync_apks = 7;

  // An apko configuration overlay to rebuild images with when syncing them.
  string apko_overlay = 8;
}

message CustomOverlay {
  // Mirrors apko configuration for image contents.
  ImageContents contents = 1;
}

message ImageContents {
  // Packages to append to the image config.
  repeated string packages = 1;
}

message CreateRepoRequest {
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  Repo repo = 2;
}

message DeleteRepoRequest {
  // ID, UID of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message RepoList {
  repeated Repo items = 1;
}

message RepoFilter {
  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 1;

  // name is the exact name of the record.
  string name = 2;

  // id is the identifier of this specific repository.
  string id = 3;
}

message CreateTagRequest {
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];
  Tag tag = 2;
}

message DeleteTagRequest {
  // ID, UID of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message Tag {
  // id, identifier of this Tag, a UIDP under a Repo.
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  // name, the unique name of the Tag.
  string name = 2;

  // digest, the digest of the manifest with this tag.
  string digest = 3;

  // last time this tag was updated.
  google.protobuf.Timestamp last_updated = 4;

  // deprecated, true if the tag is deprecated.
  bool deprecated = 5;

  // bundles is a list of tags/labels for sales purposes.
  repeated string bundles = 6;
}

message TagFilter {
  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 1;

  // The unique name of the Tag to list.
  string name = 2;

  // The timestamp after which returned records were updated.
  google.protobuf.Timestamp updated_since = 3;

  // Exclude tags of the form "sha256-*".
  bool exclude_referrers = 6;

  // Exclude tags of the form "*-20yymmdd".
  bool exclude_dates = 7;

  // Exclude tags of the form "*-r[0-9]+".
  bool exclude_epochs = 8;

  string id = 9;
}

message TagList {
  repeated Tag items = 1;
}

message TagHistoryFilter {
  // tag UIDP to list history for.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];

  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
}

message TagHistoryList {
  repeated TagHistory items = 1;
}

message TagHistory {
  google.protobuf.Timestamp update_timestamp = 1;
  string digest = 2;
}

message DiffImageResponse {
  PackagesDiff packages = 1;
  VulnerabilitiesDiff vulnerabilities = 2;

  // This field referred to the FilesDiff mesage and is no longer in use.
  reserved 3;

  // This field referred to the ImageConfigDiff message and is no longer in use.
  reserved 4;

  // warnings is a list of warning messages to return to the requesting client.
  // Warning messages describe a problem the client making the DiffImageRequest should correct or be aware of.
  // Warnings over 256 characters and large numbers of warnings may be truncated.
  repeated string warnings = 5;
}

message SbomRequest {
  // The UIDP of the image repo to get an SBOM for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];

  // The digest of the image to get an SBOM for.
  string digest = 2;

  // The architecture to get the SBOM for.
  string arch = 3;
}

message PackageVersionMetadataRequest {
  // The name of the package.
  string package = 1;
}

message Archs {
  // Architectures belonging to the requested digest's manifests.
  repeated string archs = 1;
}

message ArchFilter {
  // The architecture to filter on.
  string arch = 1;
}

message Size {
  // Size per manifest digest, by architecture.
  int64 size = 1;

  // Architecture.
  string arch = 2;
}

message ImageConfig {
  // User defines the username or UID which the process in the container should run as.
  string user = 1;

  // ExposedPorts a set of ports to expose from a container running this image.
  message ExposedPort {}
  map<string, ExposedPort> exposed_ports = 2;

  // Env is a list of environment variables to be used in a container.
  repeated string env = 3;

  // Entrypoint defines a list of arguments to use as the command to execute when the container starts.
  repeated string entrypoint = 4;

  // Cmd defines the default arguments to the entrypoint of the container.
  repeated string cmd = 5;

  message Volume {}
  // Volumes is a set of directories describing where the process is likely write data specific to a container instance.
  map<string, Volume> volumes = 6;

  // WorkingDir sets the current working directory of the entrypoint process in the container.
  string working_dir = 7;

  // Labels contains arbitrary metadata for the container.
  map<string, string> labels = 8;

  // StopSignal contains the system call signal that will be sent to the container to exit.
  string stop_signal = 9;
}

message PackagesDiff {
  repeated PackageReference added = 1;
  repeated PackageReference removed = 2;

  message ChangedPackageReference {
    string name = 1;
    VersionReference current = 2;
    VersionReference previous = 3;
  }

  repeated ChangedPackageReference changed = 3;
}

message VersionReference {
  string version = 1;
  string reference = 2;
}

// PackageReference is a reference to a package, containing minimal information to identify it.
message PackageReference {
  string name = 1;
  string version = 2;
  string reference = 3;
}

message VulnerabilitiesDiff {
  repeated VulnerabilityReference added = 1;
  repeated VulnerabilityReference removed = 2;
  repeated ScannerMetadata metadata = 3;
}

message ScannerMetadata {
  string digest = 1;
  chainguard.platform.tenant.Scanner scanner = 2;
  google.protobuf.Timestamp vulnerability_db_last_build_time = 3;
  string vulnerability_db_schema_version = 4;
}

// VulnerabilityReference is a reference to a vulnerability, containing minimal information to identify it.
message VulnerabilityReference {
  string id = 1;
  string reference = 2;
  string severity = 3;
}

// DiffImageRequests are used to request a diff between two images.
message DiffImageRequest {
  // The UIDP of the image repo to diff against.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];

  string from_digest = 2;
  string to_digest = 3;
}

message ArchRequest {
  // The UIDP of the image repo to get architectures for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];

  // The digest of the image to get architectures for.
  string digest = 2;
}

message SizeRequest {
  // The UIDP of the image repo to get size and architecture information for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];

  // The digest of the image to get size and architecture information for.
  string digest = 2;

  // The architecture to filter on.
  string arch = 3;
}

message ImageConfigRequest {
  // The UIDP of the image repo to get config for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];
  // The digest of the image to get config for.
  string digest = 2;
  // The architecture to get config for.
  string arch = 3;
}

message RawSbomRequest {
  // The UIDP of the image repo to get config for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];
  // The digest of the image to get config for.
  string digest = 2;
  // The oci reference to get sbom for.
  string reference = 3;
  // The architecture to get config for.
  string arch = 4;
}

message VulnReportRequest {
  // The UIDP of the image repo to get a VulnReport for.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];
  // The digest of the image to get a VulnReport for.
  string digest = 2;
}

message ManifestMetadataIndexFilter {
  // The tag/index digest to fetch metadata for.
  string digest = 1;
  // The architecture to fetch metadata for.
  string arch = 2;
}

message ManifestMetadataFilterEntry {
  oneof filter {
    // For fetching metadata for an image digest
    string image_digest = 1;
    // For fetching metadata for an index digest
    ManifestMetadataIndexFilter index_filter = 2;
  }
}

message ManifestMetadataFilter {
  // The UIDP of the image repo that the digests belongs to.
  string repo_id = 1 [(chainguard.annotations.iam_scope) = true];
  // List of image digests or index digest to fetch package metadata for.
  // All entries specified would be retrieved.
  repeated ManifestMetadataFilterEntry items = 2;
}

message PkgMetadata {
  // purl of package or subpackage; spec https://github.com/package-url/purl-spec
  string purl = 1;
  // if differ from purl, it means it is a subpackage
  string origin_purl = 2;
  // date when EOL, date 0-0-0 when not eol
  google.protobuf.Timestamp eol_date = 3;
  // timestamp when package was built, date 0-0-0 when build timestamp not available
  google.protobuf.Timestamp build_timestamp = 4;
  // license of package, empty if unknown
  string license = 5;
}

message ManifestMetadata {
  // Digest of image that packages are associated with.
  string digest = 1;
  // List of packages that are part of image.
  repeated PkgMetadata pkg_metadata = 2;
}

message ManifestMetadataList {
  repeated ManifestMetadata items = 1;
}

message RawSbom {
	string rawSbom = 1;
}

// This type mimics the "status" section from the original
// YAML files located at https://github.com/chainguard-dev/package-version-metadata
message PackageVersionMetadata {
  // list of versions which are now eol
  repeated PackageVersion eolVersions = 1;
  // the last time this data was updated
  string lastUpdatedTimestamp = 2;
  // the latest version of the software
  string latestVersion = 3;
  // list of versions which are active
  repeated PackageVersion versions = 4;
}

message PackageVersion {
  // the date when this version goes eol
  string eolDate = 1;
  // whether or not the package exists in an apk repo
  bool exists = 2;
  // whether or not a FIPS-enabled version of the package exists in an apk repo
  bool fips = 3;
  // may be set to a date or true if the software is marked as lts
  string lts = 4;
  // the date this version was release
  string releaseDate = 5;
  // the version stream identifier
  string version = 6;
}

// BuildReportFilter is used to filter BuildReports for ListBuildReports call.
message BuildReportFilter {
  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 1;

  // use to choose reports started after this time.
  // defaults to 1 day ago.
  google.protobuf.Timestamp started_since = 2;
}

// BuildReport is a record of a build, including the configuration used, the result, and the log.
//
// These are created by the build system, the clients should not create/update these themselves,
// but can read them to see the build information as well as build results.
message BuildReport {
  // id, identifier of this BuildReport, a UIDP under a Repo.
  string id = 1;

  // The configuration used to build the image, in APKO build config JSON.
  string config = 2;

  // The version-locked configuration used to build the image, in APKO build config JSON.
  string locked_config = 3;

  enum Result {
    Unknown = 0;
    Success = 1;
    Failure = 2;
  }
  // The result of the build.
  Result result = 4;

  // The warnings generated during the build.
  repeated string warnings = 5;

  // The build log. For the moment, this is the build log's content.
  // This could later change to an URI if the build log gets large enough.
  string log = 6;

  // The digest of the image built, in case of success.
  string digest = 7;

  // The version of the APKO used to build the image.
  string apko_version = 8;

  // The start time of the build. It is set by the server automatically,
  // anything written by the client will be ignored.
  google.protobuf.Timestamp started_at = 9;

  // The end time of the build. Must be after the started_at time.
  google.protobuf.Timestamp completed_at = 10;
}

// BuildReportList is a list of BuildReports.
message BuildReportList {
  repeated BuildReport reports = 1;
}
