// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: apko.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Apko_ResolveConfig_FullMethodName = "/chainguard.platform.registry.Apko/ResolveConfig"
	Apko_BuildImage_FullMethodName    = "/chainguard.platform.registry.Apko/BuildImage"
)

// ApkoClient is the client API for Apko service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApkoClient interface {
	ResolveConfig(ctx context.Context, in *ResolveConfigRequest, opts ...grpc.CallOption) (*ApkoConfig, error)
	BuildImage(ctx context.Context, in *BuildImageRequest, opts ...grpc.CallOption) (*BuildImageResponse, error)
}

type apkoClient struct {
	cc grpc.ClientConnInterface
}

func NewApkoClient(cc grpc.ClientConnInterface) ApkoClient {
	return &apkoClient{cc}
}

func (c *apkoClient) ResolveConfig(ctx context.Context, in *ResolveConfigRequest, opts ...grpc.CallOption) (*ApkoConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApkoConfig)
	err := c.cc.Invoke(ctx, Apko_ResolveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apkoClient) BuildImage(ctx context.Context, in *BuildImageRequest, opts ...grpc.CallOption) (*BuildImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildImageResponse)
	err := c.cc.Invoke(ctx, Apko_BuildImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApkoServer is the server API for Apko service.
// All implementations must embed UnimplementedApkoServer
// for forward compatibility.
type ApkoServer interface {
	ResolveConfig(context.Context, *ResolveConfigRequest) (*ApkoConfig, error)
	BuildImage(context.Context, *BuildImageRequest) (*BuildImageResponse, error)
	mustEmbedUnimplementedApkoServer()
}

// UnimplementedApkoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApkoServer struct{}

func (UnimplementedApkoServer) ResolveConfig(context.Context, *ResolveConfigRequest) (*ApkoConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveConfig not implemented")
}
func (UnimplementedApkoServer) BuildImage(context.Context, *BuildImageRequest) (*BuildImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildImage not implemented")
}
func (UnimplementedApkoServer) mustEmbedUnimplementedApkoServer() {}
func (UnimplementedApkoServer) testEmbeddedByValue()              {}

// UnsafeApkoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApkoServer will
// result in compilation errors.
type UnsafeApkoServer interface {
	mustEmbedUnimplementedApkoServer()
}

func RegisterApkoServer(s grpc.ServiceRegistrar, srv ApkoServer) {
	// If the following call pancis, it indicates UnimplementedApkoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Apko_ServiceDesc, srv)
}

func _Apko_ResolveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApkoServer).ResolveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apko_ResolveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApkoServer).ResolveConfig(ctx, req.(*ResolveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apko_BuildImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApkoServer).BuildImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apko_BuildImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApkoServer).BuildImage(ctx, req.(*BuildImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Apko_ServiceDesc is the grpc.ServiceDesc for Apko service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apko_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.registry.Apko",
	HandlerType: (*ApkoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveConfig",
			Handler:    _Apko_ResolveConfig_Handler,
		},
		{
			MethodName: "BuildImage",
			Handler:    _Apko_BuildImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apko.platform.proto",
}
