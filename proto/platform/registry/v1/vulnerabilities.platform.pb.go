// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: vulnerabilities.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scanner_Name int32

const (
	Scanner_UNKNOWN Scanner_Name = 0
	Scanner_GRYPE   Scanner_Name = 1
	Scanner_TRIVY   Scanner_Name = 2
)

// Enum value maps for Scanner_Name.
var (
	Scanner_Name_name = map[int32]string{
		0: "UNKNOWN",
		1: "GRYPE",
		2: "TRIVY",
	}
	Scanner_Name_value = map[string]int32{
		"UNKNOWN": 0,
		"GRYPE":   1,
		"TRIVY":   2,
	}
)

func (x Scanner_Name) Enum() *Scanner_Name {
	p := new(Scanner_Name)
	*p = x
	return p
}

func (x Scanner_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scanner_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_vulnerabilities_platform_proto_enumTypes[0].Descriptor()
}

func (Scanner_Name) Type() protoreflect.EnumType {
	return &file_vulnerabilities_platform_proto_enumTypes[0]
}

func (x Scanner_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scanner_Name.Descriptor instead.
func (Scanner_Name) EnumDescriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{7, 0}
}

type Vulnerability_Severity int32

const (
	Vulnerability_UNKNOWN    Vulnerability_Severity = 0
	Vulnerability_LOW        Vulnerability_Severity = 1
	Vulnerability_MEDIUM     Vulnerability_Severity = 2
	Vulnerability_HIGH       Vulnerability_Severity = 3
	Vulnerability_CRITICAL   Vulnerability_Severity = 4
	Vulnerability_NEGLIGIBLE Vulnerability_Severity = 5
)

// Enum value maps for Vulnerability_Severity.
var (
	Vulnerability_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
		4: "CRITICAL",
		5: "NEGLIGIBLE",
	}
	Vulnerability_Severity_value = map[string]int32{
		"UNKNOWN":    0,
		"LOW":        1,
		"MEDIUM":     2,
		"HIGH":       3,
		"CRITICAL":   4,
		"NEGLIGIBLE": 5,
	}
)

func (x Vulnerability_Severity) Enum() *Vulnerability_Severity {
	p := new(Vulnerability_Severity)
	*p = x
	return p
}

func (x Vulnerability_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vulnerability_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_vulnerabilities_platform_proto_enumTypes[1].Descriptor()
}

func (Vulnerability_Severity) Type() protoreflect.EnumType {
	return &file_vulnerabilities_platform_proto_enumTypes[1]
}

func (x Vulnerability_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vulnerability_Severity.Descriptor instead.
func (Vulnerability_Severity) EnumDescriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{10, 0}
}

type Vulnerability_Fix_State int32

const (
	Vulnerability_Fix_UNKNOWN   Vulnerability_Fix_State = 0
	Vulnerability_Fix_FIXED     Vulnerability_Fix_State = 1
	Vulnerability_Fix_NOT_FIXED Vulnerability_Fix_State = 2
	Vulnerability_Fix_WONT_FIX  Vulnerability_Fix_State = 3
)

// Enum value maps for Vulnerability_Fix_State.
var (
	Vulnerability_Fix_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIXED",
		2: "NOT_FIXED",
		3: "WONT_FIX",
	}
	Vulnerability_Fix_State_value = map[string]int32{
		"UNKNOWN":   0,
		"FIXED":     1,
		"NOT_FIXED": 2,
		"WONT_FIX":  3,
	}
)

func (x Vulnerability_Fix_State) Enum() *Vulnerability_Fix_State {
	p := new(Vulnerability_Fix_State)
	*p = x
	return p
}

func (x Vulnerability_Fix_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vulnerability_Fix_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vulnerabilities_platform_proto_enumTypes[2].Descriptor()
}

func (Vulnerability_Fix_State) Type() protoreflect.EnumType {
	return &file_vulnerabilities_platform_proto_enumTypes[2]
}

func (x Vulnerability_Fix_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vulnerability_Fix_State.Descriptor instead.
func (Vulnerability_Fix_State) EnumDescriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{10, 1, 0}
}

type VulnCountReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to retrieve vulnerability summaries for
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// tag is the version of the image to retrieve vulnerability summaries for.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// from defines the beginning of the date range of vulnerability summaries, inclusive.
	From *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// end defines the end of the date range of vulnerability summaries, inclusive.
	To *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *VulnCountReportFilter) Reset() {
	*x = VulnCountReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnCountReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnCountReportFilter) ProtoMessage() {}

func (x *VulnCountReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnCountReportFilter.ProtoReflect.Descriptor instead.
func (*VulnCountReportFilter) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{0}
}

func (x *VulnCountReportFilter) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *VulnCountReportFilter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VulnCountReportFilter) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *VulnCountReportFilter) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type VulnCountReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VulnCountReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VulnCountReportList) Reset() {
	*x = VulnCountReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnCountReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnCountReportList) ProtoMessage() {}

func (x *VulnCountReportList) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnCountReportList.ProtoReflect.Descriptor instead.
func (*VulnCountReportList) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{1}
}

func (x *VulnCountReportList) GetItems() []*VulnCountReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type VulnCountReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the image scanned.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// tag is the version of the image scanned.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// date is when the image was scanned.
	Date *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// vuln_counts enumerate the number of each CVE per severity found.
	VulnCounts []*VulnCount `protobuf:"bytes,4,rep,name=vuln_counts,json=vulnCounts,proto3" json:"vuln_counts,omitempty"`
	// size_bytes is the size in bytes of the image at scan time.
	SizeBytes int64 `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *VulnCountReport) Reset() {
	*x = VulnCountReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnCountReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnCountReport) ProtoMessage() {}

func (x *VulnCountReport) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnCountReport.ProtoReflect.Descriptor instead.
func (*VulnCountReport) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{2}
}

func (x *VulnCountReport) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *VulnCountReport) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VulnCountReport) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *VulnCountReport) GetVulnCounts() []*VulnCount {
	if x != nil {
		return x.VulnCounts
	}
	return nil
}

func (x *VulnCountReport) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

type VulnCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// severity is the CVE severity being enumerated
	Severity Vulnerability_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=chainguard.platform.registry.Vulnerability_Severity" json:"severity,omitempty"`
	// count is the number of CVEs at this severity detected.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VulnCount) Reset() {
	*x = VulnCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnCount) ProtoMessage() {}

func (x *VulnCount) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnCount.ProtoReflect.Descriptor instead.
func (*VulnCount) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{3}
}

func (x *VulnCount) GetSeverity() Vulnerability_Severity {
	if x != nil {
		return x.Severity
	}
	return Vulnerability_UNKNOWN
}

func (x *VulnCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRawVulnReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// digest is the exact digest of the image to request the raw scan result of.
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// scanner is the scanner to request the raw report from.
	Scanner Scanner_Name `protobuf:"varint,2,opt,name=scanner,proto3,enum=chainguard.platform.registry.Scanner_Name" json:"scanner,omitempty"`
	// created_at is an optional timestamp to retrieve a scan report for.
	// If not given, the latest report is returned.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetRawVulnReportRequest) Reset() {
	*x = GetRawVulnReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawVulnReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawVulnReportRequest) ProtoMessage() {}

func (x *GetRawVulnReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawVulnReportRequest.ProtoReflect.Descriptor instead.
func (*GetRawVulnReportRequest) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{4}
}

func (x *GetRawVulnReportRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *GetRawVulnReportRequest) GetScanner() Scanner_Name {
	if x != nil {
		return x.Scanner
	}
	return Scanner_UNKNOWN
}

func (x *GetRawVulnReportRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type RawVulnReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// digest is the exact digest of the scanned image.
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// scanner is the details of the scanner that generated this report.
	Scanner *Scanner `protobuf:"bytes,2,opt,name=scanner,proto3" json:"scanner,omitempty"`
	// created_at is the time the report was generated.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// raw_report is a JSON string of the raw report output from the scanner.
	// This is only populated for reports with size less than the maximum allowed.
	RawReport string `protobuf:"bytes,4,opt,name=raw_report,json=rawReport,proto3" json:"raw_report,omitempty"`
	// raw_report_url is an expiring URL for a direct download of the
	// raw scan report.
	RawReportUrl string `protobuf:"bytes,5,opt,name=raw_report_url,json=rawReportUrl,proto3" json:"raw_report_url,omitempty"`
}

func (x *RawVulnReport) Reset() {
	*x = RawVulnReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawVulnReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawVulnReport) ProtoMessage() {}

func (x *RawVulnReport) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawVulnReport.ProtoReflect.Descriptor instead.
func (*RawVulnReport) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{5}
}

func (x *RawVulnReport) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *RawVulnReport) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *RawVulnReport) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RawVulnReport) GetRawReport() string {
	if x != nil {
		return x.RawReport
	}
	return ""
}

func (x *RawVulnReport) GetRawReportUrl() string {
	if x != nil {
		return x.RawReportUrl
	}
	return ""
}

type VulnReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// digest is the exact digest of the scanned image.
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// scanner is the details of the scanner used to generate the report.
	Scanner *Scanner `protobuf:"bytes,2,opt,name=scanner,proto3" json:"scanner,omitempty"`
	// created_at is the time the report was generated.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// vulnerabilities are the found vulns in the scanned image.
	// For Create
	Vulnerabilities []*Vulnerability `protobuf:"bytes,4,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
}

func (x *VulnReport) Reset() {
	*x = VulnReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReport) ProtoMessage() {}

func (x *VulnReport) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReport.ProtoReflect.Descriptor instead.
func (*VulnReport) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{6}
}

func (x *VulnReport) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *VulnReport) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *VulnReport) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VulnReport) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

type Scanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the scanner.
	Name Scanner_Name `protobuf:"varint,1,opt,name=name,proto3,enum=chainguard.platform.registry.Scanner_Name" json:"name,omitempty"`
	// scanner_version is the version of the scanner used to generate the report.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// db_build_time is the time the vulnerability database was built that was used
	// to generate the report.
	DbBuildTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=db_build_time,json=dbBuildTime,proto3" json:"db_build_time,omitempty"`
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{7}
}

func (x *Scanner) GetName() Scanner_Name {
	if x != nil {
		return x.Name
	}
	return Scanner_UNKNOWN
}

func (x *Scanner) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Scanner) GetDbBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DbBuildTime
	}
	return nil
}

type VulnReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_id is the UIDP of the repo to list reports for.
	// One of repo_id and digest are required.
	RepoId string `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	// digest is the exact digest of the image to list reports for.
	// One of repo_id and digest are required. If populated, digest takes precedence over repo_id.
	Digest string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// tag is the optional name of the tag to pull reports for.
	// Ignored if digest is populated.
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// scanner is the optional scanner to limit vuln reports to.
	// If not provided, reports from all scanners will be included.
	Scanner *Scanner `protobuf:"bytes,4,opt,name=scanner,proto3" json:"scanner,omitempty"`
	// created_since returns reports that have been created
	// after the given time.
	CreatedSince *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_since,json=createdSince,proto3" json:"created_since,omitempty"`
}

func (x *VulnReportFilter) Reset() {
	*x = VulnReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReportFilter) ProtoMessage() {}

func (x *VulnReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReportFilter.ProtoReflect.Descriptor instead.
func (*VulnReportFilter) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{8}
}

func (x *VulnReportFilter) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *VulnReportFilter) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *VulnReportFilter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VulnReportFilter) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *VulnReportFilter) GetCreatedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedSince
	}
	return nil
}

type VulnReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VulnReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VulnReportList) Reset() {
	*x = VulnReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReportList) ProtoMessage() {}

func (x *VulnReportList) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReportList.ProtoReflect.Descriptor instead.
func (*VulnReportList) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{9}
}

func (x *VulnReportList) GetItems() []*VulnReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the vulnerability.
	// e.g. CVE-2024-12345
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// aliases are other identifiers for this vulnerability.
	Aliases []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// purls are the package URLs of the affected packages.
	Purls []string `protobuf:"bytes,3,rep,name=purls,proto3" json:"purls,omitempty"`
	// description is a short description of the vulnerability.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// details give additional textual details about the vulnerability.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	// severity is the value representing the severity of the vulnerability.
	Severity Vulnerability_Severity `protobuf:"varint,6,opt,name=severity,proto3,enum=chainguard.platform.registry.Vulnerability_Severity" json:"severity,omitempty"`
	// List of CVSS information about the exploitability of the vulnerability.
	Cvss []*Vulnerability_CVSS `protobuf:"bytes,7,rep,name=cvss,proto3" json:"cvss,omitempty"`
	// fix is the version and state of a potential fix for this vulnerability.
	Fix *Vulnerability_Fix `protobuf:"bytes,8,opt,name=fix,proto3" json:"fix,omitempty"`
	// URLs related to this vulnerability.
	RelatedUrls []string `protobuf:"bytes,9,rep,name=related_urls,json=relatedUrls,proto3" json:"related_urls,omitempty"`
	// locations are paths affected by the vulnerability.
	Locations []string `protobuf:"bytes,10,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{10}
}

func (x *Vulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vulnerability) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Vulnerability) GetPurls() []string {
	if x != nil {
		return x.Purls
	}
	return nil
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vulnerability) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Vulnerability) GetSeverity() Vulnerability_Severity {
	if x != nil {
		return x.Severity
	}
	return Vulnerability_UNKNOWN
}

func (x *Vulnerability) GetCvss() []*Vulnerability_CVSS {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *Vulnerability) GetFix() *Vulnerability_Fix {
	if x != nil {
		return x.Fix
	}
	return nil
}

func (x *Vulnerability) GetRelatedUrls() []string {
	if x != nil {
		return x.RelatedUrls
	}
	return nil
}

func (x *Vulnerability) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

type Vulnerability_CVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	Score string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	// version used to populate score and severity.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Vulnerability_CVSS) Reset() {
	*x = Vulnerability_CVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability_CVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability_CVSS) ProtoMessage() {}

func (x *Vulnerability_CVSS) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability_CVSS.ProtoReflect.Descriptor instead.
func (*Vulnerability_CVSS) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Vulnerability_CVSS) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Vulnerability_CVSS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Vulnerability_Fix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of in versions of the package on which the vulnerability has been solved.
	Versions []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix.
	State Vulnerability_Fix_State `protobuf:"varint,2,opt,name=state,proto3,enum=chainguard.platform.registry.Vulnerability_Fix_State" json:"state,omitempty"`
}

func (x *Vulnerability_Fix) Reset() {
	*x = Vulnerability_Fix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vulnerabilities_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability_Fix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability_Fix) ProtoMessage() {}

func (x *Vulnerability_Fix) ProtoReflect() protoreflect.Message {
	mi := &file_vulnerabilities_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability_Fix.ProtoReflect.Descriptor instead.
func (*Vulnerability_Fix) Descriptor() ([]byte, []int) {
	return file_vulnerabilities_platform_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Vulnerability_Fix) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Vulnerability_Fix) GetState() Vulnerability_Fix_State {
	if x != nil {
		return x.State
	}
	return Vulnerability_Fix_UNKNOWN
}

var File_vulnerabilities_platform_proto protoreflect.FileDescriptor

var file_vulnerabilities_platform_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x6f, 0x22, 0x5a, 0x0a, 0x13, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd0, 0x01,
	0x0a, 0x0f, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x76, 0x75, 0x6c, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x76, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x73, 0x0a, 0x09, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x52,
	0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xce, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x62, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x49, 0x56, 0x59, 0x10, 0x02,
	0x22, 0xd7, 0x01, 0x0a, 0x10, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x0e, 0x56, 0x75,
	0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe4, 0x05, 0x0a,
	0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x04,
	0x63, 0x76, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x52, 0x04, 0x63, 0x76,
	0x73, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x69, 0x78,
	0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x36, 0x0a, 0x04, 0x43, 0x56, 0x53, 0x53, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xac,
	0x01, 0x0a, 0x03, 0x46, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46,
	0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x4f, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x10, 0x03, 0x22, 0x54, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x05, 0x32, 0xe9, 0x05, 0x0a, 0x0f, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2c, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x8a, 0xaf, 0xa8, 0xd2,
	0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xfd, 0x0c, 0x10, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x72, 0x61, 0x77, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08,
	0x12, 0x06, 0x0a, 0x02, 0xfd, 0x0c, 0x10, 0x01, 0x12, 0xb6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xfd, 0x0c, 0x10,
	0x01, 0x12, 0xcb, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xfd, 0x0c, 0x10, 0x01, 0x42,
	0x80, 0x01, 0x0a, 0x27, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x24, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vulnerabilities_platform_proto_rawDescOnce sync.Once
	file_vulnerabilities_platform_proto_rawDescData = file_vulnerabilities_platform_proto_rawDesc
)

func file_vulnerabilities_platform_proto_rawDescGZIP() []byte {
	file_vulnerabilities_platform_proto_rawDescOnce.Do(func() {
		file_vulnerabilities_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_vulnerabilities_platform_proto_rawDescData)
	})
	return file_vulnerabilities_platform_proto_rawDescData
}

var file_vulnerabilities_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vulnerabilities_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_vulnerabilities_platform_proto_goTypes = []any{
	(Scanner_Name)(0),               // 0: chainguard.platform.registry.Scanner.Name
	(Vulnerability_Severity)(0),     // 1: chainguard.platform.registry.Vulnerability.Severity
	(Vulnerability_Fix_State)(0),    // 2: chainguard.platform.registry.Vulnerability.Fix.State
	(*VulnCountReportFilter)(nil),   // 3: chainguard.platform.registry.VulnCountReportFilter
	(*VulnCountReportList)(nil),     // 4: chainguard.platform.registry.VulnCountReportList
	(*VulnCountReport)(nil),         // 5: chainguard.platform.registry.VulnCountReport
	(*VulnCount)(nil),               // 6: chainguard.platform.registry.VulnCount
	(*GetRawVulnReportRequest)(nil), // 7: chainguard.platform.registry.GetRawVulnReportRequest
	(*RawVulnReport)(nil),           // 8: chainguard.platform.registry.RawVulnReport
	(*VulnReport)(nil),              // 9: chainguard.platform.registry.VulnReport
	(*Scanner)(nil),                 // 10: chainguard.platform.registry.Scanner
	(*VulnReportFilter)(nil),        // 11: chainguard.platform.registry.VulnReportFilter
	(*VulnReportList)(nil),          // 12: chainguard.platform.registry.VulnReportList
	(*Vulnerability)(nil),           // 13: chainguard.platform.registry.Vulnerability
	(*Vulnerability_CVSS)(nil),      // 14: chainguard.platform.registry.Vulnerability.CVSS
	(*Vulnerability_Fix)(nil),       // 15: chainguard.platform.registry.Vulnerability.Fix
	(*timestamppb.Timestamp)(nil),   // 16: google.protobuf.Timestamp
}
var file_vulnerabilities_platform_proto_depIdxs = []int32{
	16, // 0: chainguard.platform.registry.VulnCountReportFilter.from:type_name -> google.protobuf.Timestamp
	16, // 1: chainguard.platform.registry.VulnCountReportFilter.to:type_name -> google.protobuf.Timestamp
	5,  // 2: chainguard.platform.registry.VulnCountReportList.items:type_name -> chainguard.platform.registry.VulnCountReport
	16, // 3: chainguard.platform.registry.VulnCountReport.date:type_name -> google.protobuf.Timestamp
	6,  // 4: chainguard.platform.registry.VulnCountReport.vuln_counts:type_name -> chainguard.platform.registry.VulnCount
	1,  // 5: chainguard.platform.registry.VulnCount.severity:type_name -> chainguard.platform.registry.Vulnerability.Severity
	0,  // 6: chainguard.platform.registry.GetRawVulnReportRequest.scanner:type_name -> chainguard.platform.registry.Scanner.Name
	16, // 7: chainguard.platform.registry.GetRawVulnReportRequest.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: chainguard.platform.registry.RawVulnReport.scanner:type_name -> chainguard.platform.registry.Scanner
	16, // 9: chainguard.platform.registry.RawVulnReport.created_at:type_name -> google.protobuf.Timestamp
	10, // 10: chainguard.platform.registry.VulnReport.scanner:type_name -> chainguard.platform.registry.Scanner
	16, // 11: chainguard.platform.registry.VulnReport.created_at:type_name -> google.protobuf.Timestamp
	13, // 12: chainguard.platform.registry.VulnReport.vulnerabilities:type_name -> chainguard.platform.registry.Vulnerability
	0,  // 13: chainguard.platform.registry.Scanner.name:type_name -> chainguard.platform.registry.Scanner.Name
	16, // 14: chainguard.platform.registry.Scanner.db_build_time:type_name -> google.protobuf.Timestamp
	10, // 15: chainguard.platform.registry.VulnReportFilter.scanner:type_name -> chainguard.platform.registry.Scanner
	16, // 16: chainguard.platform.registry.VulnReportFilter.created_since:type_name -> google.protobuf.Timestamp
	9,  // 17: chainguard.platform.registry.VulnReportList.items:type_name -> chainguard.platform.registry.VulnReport
	1,  // 18: chainguard.platform.registry.Vulnerability.severity:type_name -> chainguard.platform.registry.Vulnerability.Severity
	14, // 19: chainguard.platform.registry.Vulnerability.cvss:type_name -> chainguard.platform.registry.Vulnerability.CVSS
	15, // 20: chainguard.platform.registry.Vulnerability.fix:type_name -> chainguard.platform.registry.Vulnerability.Fix
	2,  // 21: chainguard.platform.registry.Vulnerability.Fix.state:type_name -> chainguard.platform.registry.Vulnerability.Fix.State
	11, // 22: chainguard.platform.registry.Vulnerabilities.ListVulnReports:input_type -> chainguard.platform.registry.VulnReportFilter
	7,  // 23: chainguard.platform.registry.Vulnerabilities.GetRawVulnReport:input_type -> chainguard.platform.registry.GetRawVulnReportRequest
	3,  // 24: chainguard.platform.registry.Vulnerabilities.ListVulnCountReports:input_type -> chainguard.platform.registry.VulnCountReportFilter
	3,  // 25: chainguard.platform.registry.Vulnerabilities.ListCumulativeVulnCountReports:input_type -> chainguard.platform.registry.VulnCountReportFilter
	12, // 26: chainguard.platform.registry.Vulnerabilities.ListVulnReports:output_type -> chainguard.platform.registry.VulnReportList
	8,  // 27: chainguard.platform.registry.Vulnerabilities.GetRawVulnReport:output_type -> chainguard.platform.registry.RawVulnReport
	4,  // 28: chainguard.platform.registry.Vulnerabilities.ListVulnCountReports:output_type -> chainguard.platform.registry.VulnCountReportList
	4,  // 29: chainguard.platform.registry.Vulnerabilities.ListCumulativeVulnCountReports:output_type -> chainguard.platform.registry.VulnCountReportList
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_vulnerabilities_platform_proto_init() }
func file_vulnerabilities_platform_proto_init() {
	if File_vulnerabilities_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vulnerabilities_platform_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*VulnCountReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*VulnCountReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*VulnCountReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*VulnCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetRawVulnReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RawVulnReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*VulnReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Scanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*VulnReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*VulnReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Vulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Vulnerability_CVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vulnerabilities_platform_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Vulnerability_Fix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vulnerabilities_platform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vulnerabilities_platform_proto_goTypes,
		DependencyIndexes: file_vulnerabilities_platform_proto_depIdxs,
		EnumInfos:         file_vulnerabilities_platform_proto_enumTypes,
		MessageInfos:      file_vulnerabilities_platform_proto_msgTypes,
	}.Build()
	File_vulnerabilities_platform_proto = out.File
	file_vulnerabilities_platform_proto_rawDesc = nil
	file_vulnerabilities_platform_proto_goTypes = nil
	file_vulnerabilities_platform_proto_depIdxs = nil
}
