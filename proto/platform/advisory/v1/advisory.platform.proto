syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/advisory/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.advisory.v1";
option java_outer_classname = "PlatformAdvisoryProto";

package chainguard.platform.advisory;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";

service SecurityAdvisory {
  rpc ListDocuments(DocumentFilter) returns (DocumentList) {
    option (google.api.http) = {
      get: "/advisory/v1/documents"
    };
    option (chainguard.annotations.iam) = {
      // This method doesn't require authentication.
      disabled: {}
    };
  }

  rpc ListVulnerabilityMetadata(VulnerabilityMetadataFilter) returns (VulnerabilityMetadataList) {
    option (google.api.http) = {
      get: "/advisory/v1/metadata"
    };
    option (chainguard.annotations.iam) = {
      // This method doesn't require authentication.
      disabled: {}
    };
  }
}

message VulnerabilityMetadata {
  // id is the identifier of this specific vuln.
  string id = 1;

  string summary = 2;

  string details = 3;

  repeated Reference references = 4;

  repeated Severity severity = 5;
}

message Reference {
  Type type = 1;

  string url = 2;

  enum Type {
    // The "unset" value.
    UNSPECIFIED = 0;

    // Published security advisory for the vulnerability.
    ADVISORY = 1;

    // Article or blog post describing the vulnerability.
    ARTICLE = 2;

    // Scanner or tool that allows detection in prod environments.
    DETECTION = 3;

    // Social media discussion about vuln.
    DISCUSSION = 4;

    // Report on vuln.
    REPORT = 5;

    // Source code browser link to fix.
    FIX = 6;

    // Source code browser link to introduction of vuln.
    INTRODUCED = 7;

    // Home web page for package.
    PACKAGE = 8;

    // Demonstration of validity of vuln claim.
    EVIDENCE = 9;

    // Web page of unspecified kind.
    WEB = 10;
  }
}

message Severity {
  // CVSS version standard.
  Type type = 1;

  // Vector string representing CVSS score based on type.
  string score = 2;

  enum Type {
    // The "unset" value.
    UNSPECIFIED = 0;

    // CVSS v2
    CVSS_V2 = 1;

    // CVSS >= 3.0 and < 4.0
    CVSS_V3 = 2;

    // CVSS >= 4.0 and < 5.0
    CVSS_V4	= 3;
  }
}

message Advisory {
  // id is the identifier of this specific advisory.
  string id = 1;

  repeated Event events = 2;

  repeated string aliases = 3;
}

message Document {
  string id = 1;

  repeated Advisory advisories = 2;
}

message Event {
  google.protobuf.Timestamp timestamp = 1;

  oneof data {
    TruePositiveDetermination true_positive_determination = 10;

    FalsePositiveDetermination false_positive_determination = 11;

    Fixed fixed = 12;

    Detection detection = 13;

    AnalysisNotPlanned analysis_not_planned = 14;

    FixNotPlanned fix_not_planned = 15;

    PendingUpstreamFix pending_upstream_fix = 16;
  }
}

message TruePositiveDetermination {
  string note = 1;
}

message FalsePositiveDetermination {
  Type type = 1;

  string note = 2;

  enum Type {
    // The "unset" value.
    FPT_TYPE_UNSPECIFIED = 0;

    // VEX: vulnerable_code_not_present.
    FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED = 1;

    // VEX: component_not_present.
    FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH = 2;

    // VEX: vulnerable_code_not_present.
    FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED = 3;

    // VEX: vulnerable_code_not_present.
    FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE = 4;

    // VEX: vulnerable_code_not_in_execute_path.
    FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH = 5;

    // VEX: vulnerable_code_cannot_be_controlled_by_adversary.
    FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = 6;

    // VEX: inline_mitigations_already_exist.
    FPT_TYPE_INLINE_MITIGATIONS_EXIST = 7;
  }
}

message Fixed {
  string fixed_version = 1;
}

message Detection {
  oneof type {
    DetectionTypeNVDAPI nvdapi = 1;

    DetectionTypeManual manual = 2;
  }

  message DetectionTypeNVDAPI {
    string cpe_searched = 1;

    string cpe_found = 2;
  }

  message DetectionTypeManual {}
}

message AnalysisNotPlanned {
  string note = 1;
}

message FixNotPlanned {
  string note = 1;
}

message PendingUpstreamFix {
  string note = 1;
}

message DocumentFilter {
  // id is the id of a package.
  string id = 1;

  repeated string cves = 2;
}

message DocumentList {
  repeated Document items = 1;
}

message VulnerabilityMetadataFilter {
  // id is the id of a vuln.
  string id = 1;
}

message VulnerabilityMetadataList {
  repeated VulnerabilityMetadata items = 1;
}
