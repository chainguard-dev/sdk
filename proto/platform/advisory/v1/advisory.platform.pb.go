// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: advisory.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reference_Type int32

const (
	// The "unset" value.
	Reference_UNSPECIFIED Reference_Type = 0
	// Published security advisory for the vulnerability.
	Reference_ADVISORY Reference_Type = 1
	// Article or blog post describing the vulnerability.
	Reference_ARTICLE Reference_Type = 2
	// Scanner or tool that allows detection in prod environments.
	Reference_DETECTION Reference_Type = 3
	// Social media discussion about vuln.
	Reference_DISCUSSION Reference_Type = 4
	// Report on vuln.
	Reference_REPORT Reference_Type = 5
	// Source code browser link to fix.
	Reference_FIX Reference_Type = 6
	// Source code browser link to introduction of vuln.
	Reference_INTRODUCED Reference_Type = 7
	// Home web page for package.
	Reference_PACKAGE Reference_Type = 8
	// Demonstration of validity of vuln claim.
	Reference_EVIDENCE Reference_Type = 9
	// Web page of unspecified kind.
	Reference_WEB Reference_Type = 10
)

// Enum value maps for Reference_Type.
var (
	Reference_Type_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "ADVISORY",
		2:  "ARTICLE",
		3:  "DETECTION",
		4:  "DISCUSSION",
		5:  "REPORT",
		6:  "FIX",
		7:  "INTRODUCED",
		8:  "PACKAGE",
		9:  "EVIDENCE",
		10: "WEB",
	}
	Reference_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ADVISORY":    1,
		"ARTICLE":     2,
		"DETECTION":   3,
		"DISCUSSION":  4,
		"REPORT":      5,
		"FIX":         6,
		"INTRODUCED":  7,
		"PACKAGE":     8,
		"EVIDENCE":    9,
		"WEB":         10,
	}
)

func (x Reference_Type) Enum() *Reference_Type {
	p := new(Reference_Type)
	*p = x
	return p
}

func (x Reference_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reference_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_advisory_platform_proto_enumTypes[0].Descriptor()
}

func (Reference_Type) Type() protoreflect.EnumType {
	return &file_advisory_platform_proto_enumTypes[0]
}

func (x Reference_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reference_Type.Descriptor instead.
func (Reference_Type) EnumDescriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{5, 0}
}

type Severity_Type int32

const (
	// The "unset" value.
	Severity_UNSPECIFIED Severity_Type = 0
	// CVSS v2
	Severity_CVSS_V2 Severity_Type = 1
	// CVSS >= 3.0 and < 4.0
	Severity_CVSS_V3 Severity_Type = 2
	// CVSS >= 4.0 and < 5.0
	Severity_CVSS_V4 Severity_Type = 3
	Severity_UBUNTU  Severity_Type = 4
)

// Enum value maps for Severity_Type.
var (
	Severity_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CVSS_V2",
		2: "CVSS_V3",
		3: "CVSS_V4",
		4: "UBUNTU",
	}
	Severity_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CVSS_V2":     1,
		"CVSS_V3":     2,
		"CVSS_V4":     3,
		"UBUNTU":      4,
	}
)

func (x Severity_Type) Enum() *Severity_Type {
	p := new(Severity_Type)
	*p = x
	return p
}

func (x Severity_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_advisory_platform_proto_enumTypes[1].Descriptor()
}

func (Severity_Type) Type() protoreflect.EnumType {
	return &file_advisory_platform_proto_enumTypes[1]
}

func (x Severity_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity_Type.Descriptor instead.
func (Severity_Type) EnumDescriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{6, 0}
}

type FalsePositiveDetermination_Type int32

const (
	// The "unset" value.
	FalsePositiveDetermination_FPT_TYPE_UNSPECIFIED FalsePositiveDetermination_Type = 0
	// VEX: vulnerable_code_not_present.
	FalsePositiveDetermination_FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED FalsePositiveDetermination_Type = 1
	// VEX: component_not_present.
	FalsePositiveDetermination_FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH FalsePositiveDetermination_Type = 2
	// VEX: vulnerable_code_not_present.
	FalsePositiveDetermination_FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED FalsePositiveDetermination_Type = 3
	// VEX: vulnerable_code_not_present.
	FalsePositiveDetermination_FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE FalsePositiveDetermination_Type = 4
	// VEX: vulnerable_code_not_in_execute_path.
	FalsePositiveDetermination_FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH FalsePositiveDetermination_Type = 5
	// VEX: vulnerable_code_cannot_be_controlled_by_adversary.
	FalsePositiveDetermination_FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY FalsePositiveDetermination_Type = 6
	// VEX: inline_mitigations_already_exist.
	FalsePositiveDetermination_FPT_TYPE_INLINE_MITIGATIONS_EXIST FalsePositiveDetermination_Type = 7
)

// Enum value maps for FalsePositiveDetermination_Type.
var (
	FalsePositiveDetermination_Type_name = map[int32]string{
		0: "FPT_TYPE_UNSPECIFIED",
		1: "FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED",
		2: "FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH",
		3: "FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED",
		4: "FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE",
		5: "FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH",
		6: "FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
		7: "FPT_TYPE_INLINE_MITIGATIONS_EXIST",
	}
	FalsePositiveDetermination_Type_value = map[string]int32{
		"FPT_TYPE_UNSPECIFIED":                                       0,
		"FPT_TYPE_VULNERABILITY_RECORD_ANALYSIS_CONTESTED":           1,
		"FPT_TYPE_COMPONENT_VULNERABILITY_MISMATCH":                  2,
		"FPT_TYPE_VULNERABLE_CODE_VERSION_NOT_USED":                  3,
		"FPT_TYPE_VULNERABLE_CODE_NOT_INCLUDED_IN_PACKAGE":           4,
		"FPT_TYPE_VULNERABLE_CODE_NOT_IN_EXECUTION_PATH":             5,
		"FPT_TYPE_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY": 6,
		"FPT_TYPE_INLINE_MITIGATIONS_EXIST":                          7,
	}
)

func (x FalsePositiveDetermination_Type) Enum() *FalsePositiveDetermination_Type {
	p := new(FalsePositiveDetermination_Type)
	*p = x
	return p
}

func (x FalsePositiveDetermination_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FalsePositiveDetermination_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_advisory_platform_proto_enumTypes[2].Descriptor()
}

func (FalsePositiveDetermination_Type) Type() protoreflect.EnumType {
	return &file_advisory_platform_proto_enumTypes[2]
}

func (x FalsePositiveDetermination_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FalsePositiveDetermination_Type.Descriptor instead.
func (FalsePositiveDetermination_Type) EnumDescriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{11, 0}
}

type ResolvedVulnsReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// image_refs are the repo and tags to pull resolved vulns for.
	ImageRefs []*ResolvedVulnsReportFilter_ImageRef `protobuf:"bytes,1,rep,name=image_refs,json=imageRefs,proto3" json:"image_refs,omitempty"`
	// from defines the beginning of the date range of advisory events, inclusive.
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// end defines the end of the date range of advisory events, inclusive.
	To *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ResolvedVulnsReportFilter) Reset() {
	*x = ResolvedVulnsReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedVulnsReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedVulnsReportFilter) ProtoMessage() {}

func (x *ResolvedVulnsReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedVulnsReportFilter.ProtoReflect.Descriptor instead.
func (*ResolvedVulnsReportFilter) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{0}
}

func (x *ResolvedVulnsReportFilter) GetImageRefs() []*ResolvedVulnsReportFilter_ImageRef {
	if x != nil {
		return x.ImageRefs
	}
	return nil
}

func (x *ResolvedVulnsReportFilter) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ResolvedVulnsReportFilter) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ResolvedVulnsReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ResolvedVulnsReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResolvedVulnsReportList) Reset() {
	*x = ResolvedVulnsReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedVulnsReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedVulnsReportList) ProtoMessage() {}

func (x *ResolvedVulnsReportList) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedVulnsReportList.ProtoReflect.Descriptor instead.
func (*ResolvedVulnsReportList) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{1}
}

func (x *ResolvedVulnsReportList) GetItems() []*ResolvedVulnsReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type ResolvedVulnsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date is when the list vulnerabilities were reported as resolved.
	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// resolved_vulns are the vulnerabilities marked fixed or as a false positive for the given date.
	ResolvedVulns []*ResolvedVuln `protobuf:"bytes,2,rep,name=resolved_vulns,json=resolvedVulns,proto3" json:"resolved_vulns,omitempty"`
}

func (x *ResolvedVulnsReport) Reset() {
	*x = ResolvedVulnsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedVulnsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedVulnsReport) ProtoMessage() {}

func (x *ResolvedVulnsReport) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedVulnsReport.ProtoReflect.Descriptor instead.
func (*ResolvedVulnsReport) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{2}
}

func (x *ResolvedVulnsReport) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ResolvedVulnsReport) GetResolvedVulns() []*ResolvedVuln {
	if x != nil {
		return x.ResolvedVulns
	}
	return nil
}

type ResolvedVuln struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the CGA ID for the associated advisory
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// aliases are other identifiers this vulnerability is known by
	Aliases []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// css_severities are the OSV assigned CVSS severities for this vulnerability.
	// If not known or not assigned on OSV, this holds a single UNSPECIFIED value.
	CvssSeverities []*Severity `protobuf:"bytes,3,rep,name=cvss_severities,json=cvssSeverities,proto3" json:"cvss_severities,omitempty"`
}

func (x *ResolvedVuln) Reset() {
	*x = ResolvedVuln{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedVuln) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedVuln) ProtoMessage() {}

func (x *ResolvedVuln) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedVuln.ProtoReflect.Descriptor instead.
func (*ResolvedVuln) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{3}
}

func (x *ResolvedVuln) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResolvedVuln) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *ResolvedVuln) GetCvssSeverities() []*Severity {
	if x != nil {
		return x.CvssSeverities
	}
	return nil
}

type VulnerabilityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of this specific vuln.
	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Summary    string       `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Details    string       `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	References []*Reference `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`
	Severity   []*Severity  `protobuf:"bytes,5,rep,name=severity,proto3" json:"severity,omitempty"`
}

func (x *VulnerabilityMetadata) Reset() {
	*x = VulnerabilityMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityMetadata) ProtoMessage() {}

func (x *VulnerabilityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityMetadata.ProtoReflect.Descriptor instead.
func (*VulnerabilityMetadata) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{4}
}

func (x *VulnerabilityMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnerabilityMetadata) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *VulnerabilityMetadata) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *VulnerabilityMetadata) GetReferences() []*Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *VulnerabilityMetadata) GetSeverity() []*Severity {
	if x != nil {
		return x.Severity
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Reference_Type `protobuf:"varint,1,opt,name=type,proto3,enum=chainguard.platform.advisory.Reference_Type" json:"type,omitempty"`
	Url  string         `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{5}
}

func (x *Reference) GetType() Reference_Type {
	if x != nil {
		return x.Type
	}
	return Reference_UNSPECIFIED
}

func (x *Reference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Severity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CVSS version standard.
	Type Severity_Type `protobuf:"varint,1,opt,name=type,proto3,enum=chainguard.platform.advisory.Severity_Type" json:"type,omitempty"`
	// Vector string representing CVSS score based on type.
	Score string `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Severity) Reset() {
	*x = Severity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Severity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Severity) ProtoMessage() {}

func (x *Severity) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Severity.ProtoReflect.Descriptor instead.
func (*Severity) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{6}
}

func (x *Severity) GetType() Severity_Type {
	if x != nil {
		return x.Type
	}
	return Severity_UNSPECIFIED
}

func (x *Severity) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type Advisory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of this specific advisory.
	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Events  []*Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Aliases []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// package_namespace identifies the repository that
	// the origin package belongs to (e.g. wolfi or chainguard).
	PackageNamespace string `protobuf:"bytes,4,opt,name=package_namespace,json=packageNamespace,proto3" json:"package_namespace,omitempty"`
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisory.ProtoReflect.Descriptor instead.
func (*Advisory) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{7}
}

func (x *Advisory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Advisory) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Advisory) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Advisory) GetPackageNamespace() string {
	if x != nil {
		return x.PackageNamespace
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Advisories []*Advisory `protobuf:"bytes,2,rep,name=advisories,proto3" json:"advisories,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{8}
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetAdvisories() []*Advisory {
	if x != nil {
		return x.Advisories
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Data:
	//
	//	*Event_TruePositiveDetermination
	//	*Event_FalsePositiveDetermination
	//	*Event_Fixed
	//	*Event_Detection
	//	*Event_AnalysisNotPlanned
	//	*Event_FixNotPlanned
	//	*Event_PendingUpstreamFix
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{9}
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetTruePositiveDetermination() *TruePositiveDetermination {
	if x, ok := x.GetData().(*Event_TruePositiveDetermination); ok {
		return x.TruePositiveDetermination
	}
	return nil
}

func (x *Event) GetFalsePositiveDetermination() *FalsePositiveDetermination {
	if x, ok := x.GetData().(*Event_FalsePositiveDetermination); ok {
		return x.FalsePositiveDetermination
	}
	return nil
}

func (x *Event) GetFixed() *Fixed {
	if x, ok := x.GetData().(*Event_Fixed); ok {
		return x.Fixed
	}
	return nil
}

func (x *Event) GetDetection() *Detection {
	if x, ok := x.GetData().(*Event_Detection); ok {
		return x.Detection
	}
	return nil
}

func (x *Event) GetAnalysisNotPlanned() *AnalysisNotPlanned {
	if x, ok := x.GetData().(*Event_AnalysisNotPlanned); ok {
		return x.AnalysisNotPlanned
	}
	return nil
}

func (x *Event) GetFixNotPlanned() *FixNotPlanned {
	if x, ok := x.GetData().(*Event_FixNotPlanned); ok {
		return x.FixNotPlanned
	}
	return nil
}

func (x *Event) GetPendingUpstreamFix() *PendingUpstreamFix {
	if x, ok := x.GetData().(*Event_PendingUpstreamFix); ok {
		return x.PendingUpstreamFix
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_TruePositiveDetermination struct {
	TruePositiveDetermination *TruePositiveDetermination `protobuf:"bytes,10,opt,name=true_positive_determination,json=truePositiveDetermination,proto3,oneof"`
}

type Event_FalsePositiveDetermination struct {
	FalsePositiveDetermination *FalsePositiveDetermination `protobuf:"bytes,11,opt,name=false_positive_determination,json=falsePositiveDetermination,proto3,oneof"`
}

type Event_Fixed struct {
	Fixed *Fixed `protobuf:"bytes,12,opt,name=fixed,proto3,oneof"`
}

type Event_Detection struct {
	Detection *Detection `protobuf:"bytes,13,opt,name=detection,proto3,oneof"`
}

type Event_AnalysisNotPlanned struct {
	AnalysisNotPlanned *AnalysisNotPlanned `protobuf:"bytes,14,opt,name=analysis_not_planned,json=analysisNotPlanned,proto3,oneof"`
}

type Event_FixNotPlanned struct {
	FixNotPlanned *FixNotPlanned `protobuf:"bytes,15,opt,name=fix_not_planned,json=fixNotPlanned,proto3,oneof"`
}

type Event_PendingUpstreamFix struct {
	PendingUpstreamFix *PendingUpstreamFix `protobuf:"bytes,16,opt,name=pending_upstream_fix,json=pendingUpstreamFix,proto3,oneof"`
}

func (*Event_TruePositiveDetermination) isEvent_Data() {}

func (*Event_FalsePositiveDetermination) isEvent_Data() {}

func (*Event_Fixed) isEvent_Data() {}

func (*Event_Detection) isEvent_Data() {}

func (*Event_AnalysisNotPlanned) isEvent_Data() {}

func (*Event_FixNotPlanned) isEvent_Data() {}

func (*Event_PendingUpstreamFix) isEvent_Data() {}

type TruePositiveDetermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *TruePositiveDetermination) Reset() {
	*x = TruePositiveDetermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruePositiveDetermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruePositiveDetermination) ProtoMessage() {}

func (x *TruePositiveDetermination) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruePositiveDetermination.ProtoReflect.Descriptor instead.
func (*TruePositiveDetermination) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{10}
}

func (x *TruePositiveDetermination) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type FalsePositiveDetermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FalsePositiveDetermination_Type `protobuf:"varint,1,opt,name=type,proto3,enum=chainguard.platform.advisory.FalsePositiveDetermination_Type" json:"type,omitempty"`
	Note string                          `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *FalsePositiveDetermination) Reset() {
	*x = FalsePositiveDetermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FalsePositiveDetermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FalsePositiveDetermination) ProtoMessage() {}

func (x *FalsePositiveDetermination) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FalsePositiveDetermination.ProtoReflect.Descriptor instead.
func (*FalsePositiveDetermination) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{11}
}

func (x *FalsePositiveDetermination) GetType() FalsePositiveDetermination_Type {
	if x != nil {
		return x.Type
	}
	return FalsePositiveDetermination_FPT_TYPE_UNSPECIFIED
}

func (x *FalsePositiveDetermination) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type Fixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedVersion string `protobuf:"bytes,1,opt,name=fixed_version,json=fixedVersion,proto3" json:"fixed_version,omitempty"`
}

func (x *Fixed) Reset() {
	*x = Fixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed) ProtoMessage() {}

func (x *Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed.ProtoReflect.Descriptor instead.
func (*Fixed) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{12}
}

func (x *Fixed) GetFixedVersion() string {
	if x != nil {
		return x.FixedVersion
	}
	return ""
}

type Detection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Detection_Nvdapi
	//	*Detection_Manual
	//	*Detection_Scanv1
	Type isDetection_Type `protobuf_oneof:"type"`
}

func (x *Detection) Reset() {
	*x = Detection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection) ProtoMessage() {}

func (x *Detection) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection.ProtoReflect.Descriptor instead.
func (*Detection) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{13}
}

func (m *Detection) GetType() isDetection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Detection) GetNvdapi() *Detection_DetectionTypeNVDAPI {
	if x, ok := x.GetType().(*Detection_Nvdapi); ok {
		return x.Nvdapi
	}
	return nil
}

func (x *Detection) GetManual() *Detection_DetectionTypeManual {
	if x, ok := x.GetType().(*Detection_Manual); ok {
		return x.Manual
	}
	return nil
}

func (x *Detection) GetScanv1() *Detection_DetectionTypeScanV1 {
	if x, ok := x.GetType().(*Detection_Scanv1); ok {
		return x.Scanv1
	}
	return nil
}

type isDetection_Type interface {
	isDetection_Type()
}

type Detection_Nvdapi struct {
	Nvdapi *Detection_DetectionTypeNVDAPI `protobuf:"bytes,1,opt,name=nvdapi,proto3,oneof"`
}

type Detection_Manual struct {
	Manual *Detection_DetectionTypeManual `protobuf:"bytes,2,opt,name=manual,proto3,oneof"`
}

type Detection_Scanv1 struct {
	Scanv1 *Detection_DetectionTypeScanV1 `protobuf:"bytes,3,opt,name=scanv1,proto3,oneof"`
}

func (*Detection_Nvdapi) isDetection_Type() {}

func (*Detection_Manual) isDetection_Type() {}

func (*Detection_Scanv1) isDetection_Type() {}

type AnalysisNotPlanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AnalysisNotPlanned) Reset() {
	*x = AnalysisNotPlanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisNotPlanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisNotPlanned) ProtoMessage() {}

func (x *AnalysisNotPlanned) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisNotPlanned.ProtoReflect.Descriptor instead.
func (*AnalysisNotPlanned) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{14}
}

func (x *AnalysisNotPlanned) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type FixNotPlanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *FixNotPlanned) Reset() {
	*x = FixNotPlanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixNotPlanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixNotPlanned) ProtoMessage() {}

func (x *FixNotPlanned) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixNotPlanned.ProtoReflect.Descriptor instead.
func (*FixNotPlanned) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{15}
}

func (x *FixNotPlanned) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type PendingUpstreamFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *PendingUpstreamFix) Reset() {
	*x = PendingUpstreamFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingUpstreamFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingUpstreamFix) ProtoMessage() {}

func (x *PendingUpstreamFix) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingUpstreamFix.ProtoReflect.Descriptor instead.
func (*PendingUpstreamFix) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{16}
}

func (x *PendingUpstreamFix) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type DocumentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of a package.
	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cves []string `protobuf:"bytes,2,rep,name=cves,proto3" json:"cves,omitempty"`
}

func (x *DocumentFilter) Reset() {
	*x = DocumentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFilter) ProtoMessage() {}

func (x *DocumentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFilter.ProtoReflect.Descriptor instead.
func (*DocumentFilter) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{17}
}

func (x *DocumentFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentFilter) GetCves() []string {
	if x != nil {
		return x.Cves
	}
	return nil
}

type DocumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Document `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DocumentList) Reset() {
	*x = DocumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentList) ProtoMessage() {}

func (x *DocumentList) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentList.ProtoReflect.Descriptor instead.
func (*DocumentList) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{18}
}

func (x *DocumentList) GetItems() []*Document {
	if x != nil {
		return x.Items
	}
	return nil
}

type VulnerabilityMetadataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of a vuln.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VulnerabilityMetadataFilter) Reset() {
	*x = VulnerabilityMetadataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityMetadataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityMetadataFilter) ProtoMessage() {}

func (x *VulnerabilityMetadataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityMetadataFilter.ProtoReflect.Descriptor instead.
func (*VulnerabilityMetadataFilter) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{19}
}

func (x *VulnerabilityMetadataFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VulnerabilityMetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VulnerabilityMetadata `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VulnerabilityMetadataList) Reset() {
	*x = VulnerabilityMetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityMetadataList) ProtoMessage() {}

func (x *VulnerabilityMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityMetadataList.ProtoReflect.Descriptor instead.
func (*VulnerabilityMetadataList) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{20}
}

func (x *VulnerabilityMetadataList) GetItems() []*VulnerabilityMetadata {
	if x != nil {
		return x.Items
	}
	return nil
}

type ResolvedVulnsReportFilter_ImageRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the image repo.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// tags are optional tags to specify which version of the image to filter.
	// If tags is empty, it is assumed the caller wants latest.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ResolvedVulnsReportFilter_ImageRef) Reset() {
	*x = ResolvedVulnsReportFilter_ImageRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedVulnsReportFilter_ImageRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedVulnsReportFilter_ImageRef) ProtoMessage() {}

func (x *ResolvedVulnsReportFilter_ImageRef) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedVulnsReportFilter_ImageRef.ProtoReflect.Descriptor instead.
func (*ResolvedVulnsReportFilter_ImageRef) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ResolvedVulnsReportFilter_ImageRef) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ResolvedVulnsReportFilter_ImageRef) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Detection_DetectionTypeNVDAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpeSearched string `protobuf:"bytes,1,opt,name=cpe_searched,json=cpeSearched,proto3" json:"cpe_searched,omitempty"`
	CpeFound    string `protobuf:"bytes,2,opt,name=cpe_found,json=cpeFound,proto3" json:"cpe_found,omitempty"`
}

func (x *Detection_DetectionTypeNVDAPI) Reset() {
	*x = Detection_DetectionTypeNVDAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection_DetectionTypeNVDAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection_DetectionTypeNVDAPI) ProtoMessage() {}

func (x *Detection_DetectionTypeNVDAPI) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection_DetectionTypeNVDAPI.ProtoReflect.Descriptor instead.
func (*Detection_DetectionTypeNVDAPI) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Detection_DetectionTypeNVDAPI) GetCpeSearched() string {
	if x != nil {
		return x.CpeSearched
	}
	return ""
}

func (x *Detection_DetectionTypeNVDAPI) GetCpeFound() string {
	if x != nil {
		return x.CpeFound
	}
	return ""
}

type Detection_DetectionTypeManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Detection_DetectionTypeManual) Reset() {
	*x = Detection_DetectionTypeManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection_DetectionTypeManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection_DetectionTypeManual) ProtoMessage() {}

func (x *Detection_DetectionTypeManual) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection_DetectionTypeManual.ProtoReflect.Descriptor instead.
func (*Detection_DetectionTypeManual) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{13, 1}
}

type Detection_DetectionTypeScanV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scanner           string `protobuf:"bytes,1,opt,name=scanner,proto3" json:"scanner,omitempty"`
	SubpackageName    string `protobuf:"bytes,2,opt,name=subpackage_name,json=subpackageName,proto3" json:"subpackage_name,omitempty"`
	ComponentId       string `protobuf:"bytes,3,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	ComponentName     string `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentVersion  string `protobuf:"bytes,5,opt,name=component_version,json=componentVersion,proto3" json:"component_version,omitempty"`
	ComponentType     string `protobuf:"bytes,6,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentLocation string `protobuf:"bytes,7,opt,name=component_location,json=componentLocation,proto3" json:"component_location,omitempty"`
}

func (x *Detection_DetectionTypeScanV1) Reset() {
	*x = Detection_DetectionTypeScanV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advisory_platform_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection_DetectionTypeScanV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection_DetectionTypeScanV1) ProtoMessage() {}

func (x *Detection_DetectionTypeScanV1) ProtoReflect() protoreflect.Message {
	mi := &file_advisory_platform_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection_DetectionTypeScanV1.ProtoReflect.Descriptor instead.
func (*Detection_DetectionTypeScanV1) Descriptor() ([]byte, []int) {
	return file_advisory_platform_proto_rawDescGZIP(), []int{13, 2}
}

func (x *Detection_DetectionTypeScanV1) GetScanner() string {
	if x != nil {
		return x.Scanner
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetSubpackageName() string {
	if x != nil {
		return x.SubpackageName
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetComponentVersion() string {
	if x != nil {
		return x.ComponentVersion
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *Detection_DetectionTypeScanV1) GetComponentLocation() string {
	if x != nil {
		return x.ComponentLocation
	}
	return ""
}

var File_advisory_platform_proto protoreflect.FileDescriptor

var file_advisory_platform_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c,
	0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x32, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x62, 0x0a,
	0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56,
	0x75, 0x6c, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75,
	0x6c, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x76, 0x73, 0x73, 0x5f,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x76, 0x73, 0x73, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53,
	0x43, 0x55, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x49, 0x58, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42,
	0x10, 0x0a, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x56, 0x53, 0x53, 0x5f, 0x56, 0x32, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x56, 0x53, 0x53, 0x5f, 0x56, 0x33, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x56, 0x53,
	0x53, 0x5f, 0x56, 0x34, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x42, 0x55, 0x4e, 0x54, 0x55,
	0x10, 0x04, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xeb, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x79, 0x0a, 0x1b, 0x74,
	0x72, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x75,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x1c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x6c, 0x73,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x14, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x4e, 0x6f, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x78, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x78, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x78, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x19, 0x54, 0x72, 0x75, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x8b, 0x04, 0x0a, 0x1a, 0x46, 0x61, 0x6c, 0x73, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x85, 0x03, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x34, 0x0a, 0x30, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e,
	0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x55, 0x4c, 0x4e,
	0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x50, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x05, 0x12, 0x3e, 0x0a,
	0x3a, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x41, 0x52, 0x59, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x07, 0x22, 0x2c, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xae, 0x05, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x06, 0x6e, 0x76, 0x64, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x56, 0x44, 0x41, 0x50, 0x49, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x76, 0x64, 0x61, 0x70, 0x69, 0x12, 0x55, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x55,
	0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x63, 0x61, 0x6e, 0x76, 0x31, 0x1a, 0x55, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x56, 0x44, 0x41, 0x50, 0x49, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x15, 0x0a, 0x13,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x1a, 0xa5, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4e,
	0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x23, 0x0a,
	0x0d, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x76,
	0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x2d, 0x0a, 0x1b, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x66, 0x0a, 0x19, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xac, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x91, 0x01, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2a, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x02, 0x0a, 0x00,
	0x12, 0xb6, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x02, 0x0a, 0x00, 0x12, 0xca, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75,
	0x6c, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x75, 0x6c,
	0x6e, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0xf4, 0x0c, 0xc5, 0x0c,
	0xcf, 0x0c, 0xcd, 0x0c, 0x10, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_advisory_platform_proto_rawDescOnce sync.Once
	file_advisory_platform_proto_rawDescData = file_advisory_platform_proto_rawDesc
)

func file_advisory_platform_proto_rawDescGZIP() []byte {
	file_advisory_platform_proto_rawDescOnce.Do(func() {
		file_advisory_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_advisory_platform_proto_rawDescData)
	})
	return file_advisory_platform_proto_rawDescData
}

var file_advisory_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_advisory_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_advisory_platform_proto_goTypes = []any{
	(Reference_Type)(0),                        // 0: chainguard.platform.advisory.Reference.Type
	(Severity_Type)(0),                         // 1: chainguard.platform.advisory.Severity.Type
	(FalsePositiveDetermination_Type)(0),       // 2: chainguard.platform.advisory.FalsePositiveDetermination.Type
	(*ResolvedVulnsReportFilter)(nil),          // 3: chainguard.platform.advisory.ResolvedVulnsReportFilter
	(*ResolvedVulnsReportList)(nil),            // 4: chainguard.platform.advisory.ResolvedVulnsReportList
	(*ResolvedVulnsReport)(nil),                // 5: chainguard.platform.advisory.ResolvedVulnsReport
	(*ResolvedVuln)(nil),                       // 6: chainguard.platform.advisory.ResolvedVuln
	(*VulnerabilityMetadata)(nil),              // 7: chainguard.platform.advisory.VulnerabilityMetadata
	(*Reference)(nil),                          // 8: chainguard.platform.advisory.Reference
	(*Severity)(nil),                           // 9: chainguard.platform.advisory.Severity
	(*Advisory)(nil),                           // 10: chainguard.platform.advisory.Advisory
	(*Document)(nil),                           // 11: chainguard.platform.advisory.Document
	(*Event)(nil),                              // 12: chainguard.platform.advisory.Event
	(*TruePositiveDetermination)(nil),          // 13: chainguard.platform.advisory.TruePositiveDetermination
	(*FalsePositiveDetermination)(nil),         // 14: chainguard.platform.advisory.FalsePositiveDetermination
	(*Fixed)(nil),                              // 15: chainguard.platform.advisory.Fixed
	(*Detection)(nil),                          // 16: chainguard.platform.advisory.Detection
	(*AnalysisNotPlanned)(nil),                 // 17: chainguard.platform.advisory.AnalysisNotPlanned
	(*FixNotPlanned)(nil),                      // 18: chainguard.platform.advisory.FixNotPlanned
	(*PendingUpstreamFix)(nil),                 // 19: chainguard.platform.advisory.PendingUpstreamFix
	(*DocumentFilter)(nil),                     // 20: chainguard.platform.advisory.DocumentFilter
	(*DocumentList)(nil),                       // 21: chainguard.platform.advisory.DocumentList
	(*VulnerabilityMetadataFilter)(nil),        // 22: chainguard.platform.advisory.VulnerabilityMetadataFilter
	(*VulnerabilityMetadataList)(nil),          // 23: chainguard.platform.advisory.VulnerabilityMetadataList
	(*ResolvedVulnsReportFilter_ImageRef)(nil), // 24: chainguard.platform.advisory.ResolvedVulnsReportFilter.ImageRef
	(*Detection_DetectionTypeNVDAPI)(nil),      // 25: chainguard.platform.advisory.Detection.DetectionTypeNVDAPI
	(*Detection_DetectionTypeManual)(nil),      // 26: chainguard.platform.advisory.Detection.DetectionTypeManual
	(*Detection_DetectionTypeScanV1)(nil),      // 27: chainguard.platform.advisory.Detection.DetectionTypeScanV1
	(*timestamppb.Timestamp)(nil),              // 28: google.protobuf.Timestamp
}
var file_advisory_platform_proto_depIdxs = []int32{
	24, // 0: chainguard.platform.advisory.ResolvedVulnsReportFilter.image_refs:type_name -> chainguard.platform.advisory.ResolvedVulnsReportFilter.ImageRef
	28, // 1: chainguard.platform.advisory.ResolvedVulnsReportFilter.from:type_name -> google.protobuf.Timestamp
	28, // 2: chainguard.platform.advisory.ResolvedVulnsReportFilter.to:type_name -> google.protobuf.Timestamp
	5,  // 3: chainguard.platform.advisory.ResolvedVulnsReportList.items:type_name -> chainguard.platform.advisory.ResolvedVulnsReport
	28, // 4: chainguard.platform.advisory.ResolvedVulnsReport.date:type_name -> google.protobuf.Timestamp
	6,  // 5: chainguard.platform.advisory.ResolvedVulnsReport.resolved_vulns:type_name -> chainguard.platform.advisory.ResolvedVuln
	9,  // 6: chainguard.platform.advisory.ResolvedVuln.cvss_severities:type_name -> chainguard.platform.advisory.Severity
	8,  // 7: chainguard.platform.advisory.VulnerabilityMetadata.references:type_name -> chainguard.platform.advisory.Reference
	9,  // 8: chainguard.platform.advisory.VulnerabilityMetadata.severity:type_name -> chainguard.platform.advisory.Severity
	0,  // 9: chainguard.platform.advisory.Reference.type:type_name -> chainguard.platform.advisory.Reference.Type
	1,  // 10: chainguard.platform.advisory.Severity.type:type_name -> chainguard.platform.advisory.Severity.Type
	12, // 11: chainguard.platform.advisory.Advisory.events:type_name -> chainguard.platform.advisory.Event
	10, // 12: chainguard.platform.advisory.Document.advisories:type_name -> chainguard.platform.advisory.Advisory
	28, // 13: chainguard.platform.advisory.Event.timestamp:type_name -> google.protobuf.Timestamp
	13, // 14: chainguard.platform.advisory.Event.true_positive_determination:type_name -> chainguard.platform.advisory.TruePositiveDetermination
	14, // 15: chainguard.platform.advisory.Event.false_positive_determination:type_name -> chainguard.platform.advisory.FalsePositiveDetermination
	15, // 16: chainguard.platform.advisory.Event.fixed:type_name -> chainguard.platform.advisory.Fixed
	16, // 17: chainguard.platform.advisory.Event.detection:type_name -> chainguard.platform.advisory.Detection
	17, // 18: chainguard.platform.advisory.Event.analysis_not_planned:type_name -> chainguard.platform.advisory.AnalysisNotPlanned
	18, // 19: chainguard.platform.advisory.Event.fix_not_planned:type_name -> chainguard.platform.advisory.FixNotPlanned
	19, // 20: chainguard.platform.advisory.Event.pending_upstream_fix:type_name -> chainguard.platform.advisory.PendingUpstreamFix
	2,  // 21: chainguard.platform.advisory.FalsePositiveDetermination.type:type_name -> chainguard.platform.advisory.FalsePositiveDetermination.Type
	25, // 22: chainguard.platform.advisory.Detection.nvdapi:type_name -> chainguard.platform.advisory.Detection.DetectionTypeNVDAPI
	26, // 23: chainguard.platform.advisory.Detection.manual:type_name -> chainguard.platform.advisory.Detection.DetectionTypeManual
	27, // 24: chainguard.platform.advisory.Detection.scanv1:type_name -> chainguard.platform.advisory.Detection.DetectionTypeScanV1
	11, // 25: chainguard.platform.advisory.DocumentList.items:type_name -> chainguard.platform.advisory.Document
	7,  // 26: chainguard.platform.advisory.VulnerabilityMetadataList.items:type_name -> chainguard.platform.advisory.VulnerabilityMetadata
	20, // 27: chainguard.platform.advisory.SecurityAdvisory.ListDocuments:input_type -> chainguard.platform.advisory.DocumentFilter
	22, // 28: chainguard.platform.advisory.SecurityAdvisory.ListVulnerabilityMetadata:input_type -> chainguard.platform.advisory.VulnerabilityMetadataFilter
	3,  // 29: chainguard.platform.advisory.SecurityAdvisory.ListResolvedVulnsReports:input_type -> chainguard.platform.advisory.ResolvedVulnsReportFilter
	21, // 30: chainguard.platform.advisory.SecurityAdvisory.ListDocuments:output_type -> chainguard.platform.advisory.DocumentList
	23, // 31: chainguard.platform.advisory.SecurityAdvisory.ListVulnerabilityMetadata:output_type -> chainguard.platform.advisory.VulnerabilityMetadataList
	4,  // 32: chainguard.platform.advisory.SecurityAdvisory.ListResolvedVulnsReports:output_type -> chainguard.platform.advisory.ResolvedVulnsReportList
	30, // [30:33] is the sub-list for method output_type
	27, // [27:30] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_advisory_platform_proto_init() }
func file_advisory_platform_proto_init() {
	if File_advisory_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_advisory_platform_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedVulnsReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedVulnsReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedVulnsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedVuln); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*VulnerabilityMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Severity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Advisory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TruePositiveDetermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FalsePositiveDetermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Fixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Detection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AnalysisNotPlanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FixNotPlanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PendingUpstreamFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*VulnerabilityMetadataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*VulnerabilityMetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedVulnsReportFilter_ImageRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Detection_DetectionTypeNVDAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Detection_DetectionTypeManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advisory_platform_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Detection_DetectionTypeScanV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_advisory_platform_proto_msgTypes[9].OneofWrappers = []any{
		(*Event_TruePositiveDetermination)(nil),
		(*Event_FalsePositiveDetermination)(nil),
		(*Event_Fixed)(nil),
		(*Event_Detection)(nil),
		(*Event_AnalysisNotPlanned)(nil),
		(*Event_FixNotPlanned)(nil),
		(*Event_PendingUpstreamFix)(nil),
	}
	file_advisory_platform_proto_msgTypes[13].OneofWrappers = []any{
		(*Detection_Nvdapi)(nil),
		(*Detection_Manual)(nil),
		(*Detection_Scanv1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_advisory_platform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_advisory_platform_proto_goTypes,
		DependencyIndexes: file_advisory_platform_proto_depIdxs,
		EnumInfos:         file_advisory_platform_proto_enumTypes,
		MessageInfos:      file_advisory_platform_proto_msgTypes,
	}.Build()
	File_advisory_platform_proto = out.File
	file_advisory_platform_proto_rawDesc = nil
	file_advisory_platform_proto_goTypes = nil
	file_advisory_platform_proto_depIdxs = nil
}
