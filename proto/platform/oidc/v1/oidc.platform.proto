syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/oidc/v1";

package chainguard.platform.oidc;

import "google/api/annotations.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

service SecurityTokenService {

  rpc Exchange(ExchangeRequest) returns (RawToken) {
    option (google.api.http) = {
      post: "/sts/exchange"
      additional_bindings {
        get: "/sts/exchange"
      }
    };
  }

  rpc ExchangeRefreshToken(ExchangeRefreshTokenRequest) returns (TokenPair) {
    option (google.api.http) = {
      post: "/sts/exchange_refresh_token"
    };
  }
}

message ExchangeRefreshTokenRequest {
  repeated string aud = 1;

  // Deprecated: use scopes instead
  string scope = 2 [deprecated = true];

  // List of capabilities to request for the token.
  repeated string cap = 3 [(google.api.resource_reference) = {
    type: "chainguard.capabilities/Capability"
  }];

  // One or more group scopes to restrict the returned token to.
  // If scope and scopes are both provided, the union of their values is
  // considered, after deduplication.
  //
  // The returned token will include role bindings for the requested scopes,
  // if any exist, that are either granted directly at that scope or inherited from
  // its ancestors. That is, a role binding granted at a "lower" scope in the ancestry
  // applies to all descendants of that scope.
  //
  // For example, given a role binding on group `foo` with id `foo/rb-id-1`
  // and a role binding on group `foo/bar` with id `foo/bar/rb-id-2`:
  //  - given scopes = [foo, foo/bar] => {foo: [foo/rb-id-1], foo/bar: [foo/bar/rb-id-2]}
  //  - given scopes = [foo/bar] => {foo/bar: [foo/rb-id-1, foo/bar/rb-id-2]}
  repeated string scopes = 4;
}

message ExchangeRequest {
  repeated string aud = 1;

  // Deprecated: use scopes instead
  string scope = 2 [deprecated = true];

  // `cluster` field was deprecated and removed.
  reserved 3;
  reserved "cluster";

  string identity = 4;

  // List of capabilities to request for the token.
  repeated string cap = 5 [(google.api.resource_reference) = {
    type: "chainguard.capabilities/Capability"
  }];

  // `include_upstream_token` field was deprecated and removed.
  reserved 6;
  reserved "include_upstream_token";

  // Empty or the UIDP of the custom identity provider.
  string identity_provider = 7;

  // One or more group scopes to restrict the returned token to.
  // If scope and scopes are both provided, the union of their values is
  // considered, after deduplication.
  //
  // The returned token will include role bindings for the requested scopes,
  // if any exist, that are either granted directly at that scope or inherited from
  // its ancestors. That is, a role binding granted at a "lower" scope in the ancestry
  // applies to all descendants of that scope.
  //
  // For example, given a role binding on group `foo` with id `foo/rb-id-1`
  // and a role binding on group `foo/bar` with id `foo/bar/rb-id-2`:
  //  - given scopes = [foo, foo/bar] => {foo: [foo/rb-id-1], foo/bar: [foo/bar/rb-id-2]}
  //  - given scopes = [foo/bar] => {foo/bar: [foo/rb-id-1, foo/bar/rb-id-2]}
  repeated string scopes = 8;
}

message RawToken {
  string token = 1;
  string refresh_token = 2;
  // (optional) Expiry time of the token.
  google.protobuf.Timestamp expiry = 3;
}

// ExchangeRefreshToken returns a pair of token, in order to allow
// refresh token to also be rotated.
message TokenPair {
  RawToken token = 1;
  RawToken refresh_token = 2;
}
