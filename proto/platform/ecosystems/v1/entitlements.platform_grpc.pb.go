// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: entitlements.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Entitlements_Create_FullMethodName = "/chainguard.platform.ecosystems.Entitlements/Create"
	Entitlements_List_FullMethodName   = "/chainguard.platform.ecosystems.Entitlements/List"
	Entitlements_Delete_FullMethodName = "/chainguard.platform.ecosystems.Entitlements/Delete"
)

// EntitlementsClient is the client API for Entitlements service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitlementsClient interface {
	Create(ctx context.Context, in *CreateEntitlementRequest, opts ...grpc.CallOption) (*Entitlement, error)
	List(ctx context.Context, in *EntitlementFilter, opts ...grpc.CallOption) (*EntitlementList, error)
	Delete(ctx context.Context, in *DeleteEntitlementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type entitlementsClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitlementsClient(cc grpc.ClientConnInterface) EntitlementsClient {
	return &entitlementsClient{cc}
}

func (c *entitlementsClient) Create(ctx context.Context, in *CreateEntitlementRequest, opts ...grpc.CallOption) (*Entitlement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entitlement)
	err := c.cc.Invoke(ctx, Entitlements_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitlementsClient) List(ctx context.Context, in *EntitlementFilter, opts ...grpc.CallOption) (*EntitlementList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntitlementList)
	err := c.cc.Invoke(ctx, Entitlements_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitlementsClient) Delete(ctx context.Context, in *DeleteEntitlementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Entitlements_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitlementsServer is the server API for Entitlements service.
// All implementations must embed UnimplementedEntitlementsServer
// for forward compatibility.
type EntitlementsServer interface {
	Create(context.Context, *CreateEntitlementRequest) (*Entitlement, error)
	List(context.Context, *EntitlementFilter) (*EntitlementList, error)
	Delete(context.Context, *DeleteEntitlementRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEntitlementsServer()
}

// UnimplementedEntitlementsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntitlementsServer struct{}

func (UnimplementedEntitlementsServer) Create(context.Context, *CreateEntitlementRequest) (*Entitlement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEntitlementsServer) List(context.Context, *EntitlementFilter) (*EntitlementList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEntitlementsServer) Delete(context.Context, *DeleteEntitlementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEntitlementsServer) mustEmbedUnimplementedEntitlementsServer() {}
func (UnimplementedEntitlementsServer) testEmbeddedByValue()                      {}

// UnsafeEntitlementsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitlementsServer will
// result in compilation errors.
type UnsafeEntitlementsServer interface {
	mustEmbedUnimplementedEntitlementsServer()
}

func RegisterEntitlementsServer(s grpc.ServiceRegistrar, srv EntitlementsServer) {
	// If the following call pancis, it indicates UnimplementedEntitlementsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Entitlements_ServiceDesc, srv)
}

func _Entitlements_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitlementsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entitlements_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitlementsServer).Create(ctx, req.(*CreateEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entitlements_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitlementFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitlementsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entitlements_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitlementsServer).List(ctx, req.(*EntitlementFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entitlements_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitlementsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entitlements_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitlementsServer).Delete(ctx, req.(*DeleteEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entitlements_ServiceDesc is the grpc.ServiceDesc for Entitlements service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entitlements_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.ecosystems.Entitlements",
	HandlerType: (*EntitlementsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Entitlements_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Entitlements_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Entitlements_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entitlements.platform.proto",
}
