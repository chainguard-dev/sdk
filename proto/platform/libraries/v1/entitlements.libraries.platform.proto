syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/libraries/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.libraries.v1";
option java_outer_classname = "Entitlement";

package chainguard.platform.libraries;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "annotations/auth.proto";
import "annotations/events.proto";

service Entitlements {
  rpc Create(CreateEntitlementRequest) returns (Entitlement) {
    option (google.api.http) = {
      post: "/libraries/v1/entitlements/{parent_id=**}"
      body: "ecosystem"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_LIBRARIES_ENTITLEMENTS_CREATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.libraries.entitlements.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc List(EntitlementFilter) returns (EntitlementList) {
    option (google.api.http) = {
      get: "/libraries/v1/entitlements"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_LIBRARIES_ENTITLEMENTS_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteEntitlementRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/libraries/v1/entitlements/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_LIBRARIES_ENTITLEMENTS_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.libraries.entitlements.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }
}

// Entitlement maps an org to an library ecosystem they are entitled to pull.
message Entitlement {
  // id is the uidp of the entitlement, a child of a group.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  // ecosystem is the language ecosystem this entitlement grants access to.
  Ecosystem ecosystem = 2;
}

message EntitlementList {
  repeated Entitlement items = 1;
}

// Ecosystem represents the language libraries an org can be entitled to.
enum Ecosystem {
  UNKNOWN = 0;
  JAVA = 1;
  PYTHON = 2;
  JAVASCRIPT = 3;
}

message CreateEntitlementRequest {
  // parent_id is the group to create the entitlement for.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  // ecosystem is the language ecosystem to entitle this group to.
  Ecosystem ecosystem = 2;
}

message EntitlementFilter {
  // parent_id is the group to list entitlements for. Required.
  string parent_id = 1;
  // ecosystems are the language ecosystems to list entitlements for. If empty, all entitlements for the group will be listed.
  repeated Ecosystem ecosystems = 2;

}

message DeleteEntitlementRequest {
  // id is the exact uidp of the entitlement to delete.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}
