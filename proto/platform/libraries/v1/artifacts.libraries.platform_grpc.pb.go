// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: artifacts.libraries.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Artifacts_List_FullMethodName             = "/chainguard.platform.libraries.Artifacts/List"
	Artifacts_ListVersions_FullMethodName     = "/chainguard.platform.libraries.Artifacts/ListVersions"
	Artifacts_GetArtifactCount_FullMethodName = "/chainguard.platform.libraries.Artifacts/GetArtifactCount"
)

// ArtifactsClient is the client API for Artifacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactsClient interface {
	List(ctx context.Context, in *ArtifactFilter, opts ...grpc.CallOption) (*ArtifactList, error)
	ListVersions(ctx context.Context, in *ArtifactVersionFilter, opts ...grpc.CallOption) (*ArtifactVersionList, error)
	GetArtifactCount(ctx context.Context, in *GetArtifactCountRequest, opts ...grpc.CallOption) (*GetArtifactCountResponse, error)
}

type artifactsClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactsClient(cc grpc.ClientConnInterface) ArtifactsClient {
	return &artifactsClient{cc}
}

func (c *artifactsClient) List(ctx context.Context, in *ArtifactFilter, opts ...grpc.CallOption) (*ArtifactList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArtifactList)
	err := c.cc.Invoke(ctx, Artifacts_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) ListVersions(ctx context.Context, in *ArtifactVersionFilter, opts ...grpc.CallOption) (*ArtifactVersionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArtifactVersionList)
	err := c.cc.Invoke(ctx, Artifacts_ListVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) GetArtifactCount(ctx context.Context, in *GetArtifactCountRequest, opts ...grpc.CallOption) (*GetArtifactCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArtifactCountResponse)
	err := c.cc.Invoke(ctx, Artifacts_GetArtifactCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactsServer is the server API for Artifacts service.
// All implementations must embed UnimplementedArtifactsServer
// for forward compatibility.
type ArtifactsServer interface {
	List(context.Context, *ArtifactFilter) (*ArtifactList, error)
	ListVersions(context.Context, *ArtifactVersionFilter) (*ArtifactVersionList, error)
	GetArtifactCount(context.Context, *GetArtifactCountRequest) (*GetArtifactCountResponse, error)
	mustEmbedUnimplementedArtifactsServer()
}

// UnimplementedArtifactsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtifactsServer struct{}

func (UnimplementedArtifactsServer) List(context.Context, *ArtifactFilter) (*ArtifactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedArtifactsServer) ListVersions(context.Context, *ArtifactVersionFilter) (*ArtifactVersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedArtifactsServer) GetArtifactCount(context.Context, *GetArtifactCountRequest) (*GetArtifactCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactCount not implemented")
}
func (UnimplementedArtifactsServer) mustEmbedUnimplementedArtifactsServer() {}
func (UnimplementedArtifactsServer) testEmbeddedByValue()                   {}

// UnsafeArtifactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactsServer will
// result in compilation errors.
type UnsafeArtifactsServer interface {
	mustEmbedUnimplementedArtifactsServer()
}

func RegisterArtifactsServer(s grpc.ServiceRegistrar, srv ArtifactsServer) {
	// If the following call pancis, it indicates UnimplementedArtifactsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Artifacts_ServiceDesc, srv)
}

func _Artifacts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artifacts_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).List(ctx, req.(*ArtifactFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactVersionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artifacts_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).ListVersions(ctx, req.(*ArtifactVersionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_GetArtifactCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).GetArtifactCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artifacts_GetArtifactCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).GetArtifactCount(ctx, req.(*GetArtifactCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Artifacts_ServiceDesc is the grpc.ServiceDesc for Artifacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Artifacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.libraries.Artifacts",
	HandlerType: (*ArtifactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Artifacts_List_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _Artifacts_ListVersions_Handler,
		},
		{
			MethodName: "GetArtifactCount",
			Handler:    _Artifacts_GetArtifactCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifacts.libraries.platform.proto",
}
