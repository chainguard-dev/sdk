// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: identities.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Identities_Create_FullMethodName         = "/chainguard.platform.events.Identities/Create"
	Identities_UpdateMetadata_FullMethodName = "/chainguard.platform.events.Identities/UpdateMetadata"
)

// IdentitiesClient is the client API for Identities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentitiesClient interface {
	Create(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	UpdateMetadata(ctx context.Context, in *IdentityMetadata, opts ...grpc.CallOption) (*IdentityMetadata, error)
}

type identitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitiesClient(cc grpc.ClientConnInterface) IdentitiesClient {
	return &identitiesClient{cc}
}

func (c *identitiesClient) Create(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, Identities_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesClient) UpdateMetadata(ctx context.Context, in *IdentityMetadata, opts ...grpc.CallOption) (*IdentityMetadata, error) {
	out := new(IdentityMetadata)
	err := c.cc.Invoke(ctx, Identities_UpdateMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitiesServer is the server API for Identities service.
// All implementations must embed UnimplementedIdentitiesServer
// for forward compatibility
type IdentitiesServer interface {
	Create(context.Context, *Identity) (*Identity, error)
	UpdateMetadata(context.Context, *IdentityMetadata) (*IdentityMetadata, error)
	mustEmbedUnimplementedIdentitiesServer()
}

// UnimplementedIdentitiesServer must be embedded to have forward compatible implementations.
type UnimplementedIdentitiesServer struct {
}

func (UnimplementedIdentitiesServer) Create(context.Context, *Identity) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIdentitiesServer) UpdateMetadata(context.Context, *IdentityMetadata) (*IdentityMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedIdentitiesServer) mustEmbedUnimplementedIdentitiesServer() {}

// UnsafeIdentitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentitiesServer will
// result in compilation errors.
type UnsafeIdentitiesServer interface {
	mustEmbedUnimplementedIdentitiesServer()
}

func RegisterIdentitiesServer(s grpc.ServiceRegistrar, srv IdentitiesServer) {
	s.RegisterService(&Identities_ServiceDesc, srv)
}

func _Identities_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identities_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServer).Create(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identities_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identities_UpdateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServer).UpdateMetadata(ctx, req.(*IdentityMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

// Identities_ServiceDesc is the grpc.ServiceDesc for Identities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.events.Identities",
	HandlerType: (*IdentitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Identities_Create_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Identities_UpdateMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identities.platform.proto",
}
