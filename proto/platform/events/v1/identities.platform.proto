syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/events/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.events.v1";
option java_outer_classname = "PlatformEventsIdentitiesProto";

package chainguard.platform.events;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "annotations/auth.proto";
import "annotations/events.proto";

service Identities {
  rpc Create(Identity) returns (Identity) {
    option (google.api.http) = {
      post: "/iam/v1/identities"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        // TODO(nsmith): The authentications story here is pretty rough. This
        // identity creation must be an unscoped permission because they aren't
        // nested under IAM groups.... we need a better scoping story here. Is
        // there any reason we can't nest these under a group?
        capabilities: [CAP_IAM_IDENTITY_CREATE]
        unscoped: true
      }
    };
  }

  rpc UpdateMetadata(IdentityMetadata) returns (IdentityMetadata) {
    option (google.api.http) = {
      patch: "/iam/v1/identities/metadata"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
			// Authentication will be implicit in the handler - the updated identity
			// is the one from the token.
      enabled: {
        capabilities: []
        unscoped: true
      }
    };
    option (chainguard.annotations.events) = {
			// Emit an internal event to track user onboarding.
      type: "dev.chainguard.api.iam.identity.metadata.updated.v1"
      audience: INTERNAL
    };
  }

  // NB: List, Update and Delete unimplemented here as its unclear how
  // permissions would work. Like how do we scope list to the identities a user
  // _should_ have access to instead of the global set of all identities
  // (insert yikes energy).
}

message Identity {
  // id is unique identifier of this specific identity.
  string id = 1;

  // subject of OIDC ID tokens issued for this identity. Matchs the `sub`
  // claim.
  string subject = 2;

  // issuer of the OIDC ID tokens issued for this identity. Matches the `iss`
  // claim.
  string issuer = 3;

  // Optional JWKS formatted public keys for the issuer. If supplied
  // verification of ID tokens is attempted using these keys instead of the
  // normal OIDC discovery path. This enables e.g clusters behing NAT to
  // authenticate.
  string issuer_keys = 4;

  // Expiration of identity / issuer keys. After this date /time the issuer
  // keys will not be trusted. Defaults / maximum of 30 days after creation
  // time.
  google.protobuf.Timestamp expiration = 5;
}

message IdentityMetadata {
  OnboardingQuestions onboarding_questions = 1;

  // Output only. This is the name of the user.
  string name = 2;

	// Whether the user has opted to receive updates from Chainguard.
	bool updatesOptIn = 3;

  message OnboardingQuestions {
    string company_name = 1;
    repeated string providers = 2;
    string product = 3;
  }
}
