// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: subscriptions.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Subscriptions_Create_FullMethodName = "/chainguard.platform.events.Subscriptions/Create"
	Subscriptions_List_FullMethodName   = "/chainguard.platform.events.Subscriptions/List"
	Subscriptions_Delete_FullMethodName = "/chainguard.platform.events.Subscriptions/Delete"
)

// SubscriptionsClient is the client API for Subscriptions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionsClient interface {
	Create(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error)
	List(ctx context.Context, in *SubscriptionFilter, opts ...grpc.CallOption) (*SubscriptionList, error)
	Delete(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subscriptionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionsClient(cc grpc.ClientConnInterface) SubscriptionsClient {
	return &subscriptionsClient{cc}
}

func (c *subscriptionsClient) Create(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subscription)
	err := c.cc.Invoke(ctx, Subscriptions_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) List(ctx context.Context, in *SubscriptionFilter, opts ...grpc.CallOption) (*SubscriptionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionList)
	err := c.cc.Invoke(ctx, Subscriptions_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Delete(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Subscriptions_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionsServer is the server API for Subscriptions service.
// All implementations must embed UnimplementedSubscriptionsServer
// for forward compatibility.
type SubscriptionsServer interface {
	Create(context.Context, *CreateSubscriptionRequest) (*Subscription, error)
	List(context.Context, *SubscriptionFilter) (*SubscriptionList, error)
	Delete(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubscriptionsServer()
}

// UnimplementedSubscriptionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionsServer struct{}

func (UnimplementedSubscriptionsServer) Create(context.Context, *CreateSubscriptionRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubscriptionsServer) List(context.Context, *SubscriptionFilter) (*SubscriptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSubscriptionsServer) Delete(context.Context, *DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubscriptionsServer) mustEmbedUnimplementedSubscriptionsServer() {}
func (UnimplementedSubscriptionsServer) testEmbeddedByValue()                       {}

// UnsafeSubscriptionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionsServer will
// result in compilation errors.
type UnsafeSubscriptionsServer interface {
	mustEmbedUnimplementedSubscriptionsServer()
}

func RegisterSubscriptionsServer(s grpc.ServiceRegistrar, srv SubscriptionsServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Subscriptions_ServiceDesc, srv)
}

func _Subscriptions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscriptions_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Create(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscriptions_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).List(ctx, req.(*SubscriptionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscriptions_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Delete(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subscriptions_ServiceDesc is the grpc.ServiceDesc for Subscriptions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subscriptions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.events.Subscriptions",
	HandlerType: (*SubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Subscriptions_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Subscriptions_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Subscriptions_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriptions.platform.proto",
}
