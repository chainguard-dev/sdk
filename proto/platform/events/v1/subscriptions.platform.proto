syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/events/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.events.v1";
option java_outer_classname = "PlatformEventsSubscriptionProto";

package chainguard.platform.events;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";

service Subscriptions {
  rpc Create(CreateSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = {
      post: "/events/v1/subscriptions/{parent_id=**}"
      body: "subscription"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_EVENTS_SUBSCRIPTION_CREATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.events.subscription.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc List(SubscriptionFilter) returns (SubscriptionList) {
    option (google.api.http) = {
      get: "/events/v1/subscriptions"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_EVENTS_SUBSCRIPTION_LIST]
        unscoped: true
      }
    };
  }

  rpc Delete(DeleteSubscriptionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/events/v1/subscriptions/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_EVENTS_SUBSCRIPTION_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.events.subscription.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }
}

message CreateSubscriptionRequest {
  // parent_id, The Group UIDP path under which the new subscription is associated.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];
  // Subscription is the subscription to create;
  Subscription subscription = 2;
}

message Subscription {
  // id is identifier of this specific subscription.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
  // sink is the address to which events shall be delivered using the selected protocol.
  string sink = 2;
}

message SubscriptionList {
  repeated Subscription items = 1;
}

message SubscriptionFilter {
  // id is the exact UIDP of the record.
  string id = 1;

  // uidp filers records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 2;
}

message DeleteSubscriptionRequest {
  // id is the exact UIDP of the record.
  string id = 1 [(chainguard.annotations.iam_scope) = true];
}
