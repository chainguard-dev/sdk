// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cluster.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Clusters_Create_FullMethodName   = "/chainguard.platform.tenant.Clusters/Create"
	Clusters_Delete_FullMethodName   = "/chainguard.platform.tenant.Clusters/Delete"
	Clusters_Discover_FullMethodName = "/chainguard.platform.tenant.Clusters/Discover"
	Clusters_List_FullMethodName     = "/chainguard.platform.tenant.Clusters/List"
	Clusters_Update_FullMethodName   = "/chainguard.platform.tenant.Clusters/Update"
	Clusters_Profiles_FullMethodName = "/chainguard.platform.tenant.Clusters/Profiles"
	Clusters_Config_FullMethodName   = "/chainguard.platform.tenant.Clusters/Config"
	Clusters_CIDR_FullMethodName     = "/chainguard.platform.tenant.Clusters/CIDR"
)

// ClustersClient is the client API for Clusters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClustersClient interface {
	Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Discover(ctx context.Context, in *ClusterDiscoveryRequest, opts ...grpc.CallOption) (*ClusterDiscoveryResponse, error)
	List(ctx context.Context, in *ClusterFilter, opts ...grpc.CallOption) (*ClusterList, error)
	Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	Profiles(ctx context.Context, in *ClusterProfilesRequest, opts ...grpc.CallOption) (*ClusterProfilesResponse, error)
	Config(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfigResponse, error)
	CIDR(ctx context.Context, in *ClusterCIDRRequest, opts ...grpc.CallOption) (*ClusterCIDRResponse, error)
}

type clustersClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersClient(cc grpc.ClientConnInterface) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, Clusters_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Clusters_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Discover(ctx context.Context, in *ClusterDiscoveryRequest, opts ...grpc.CallOption) (*ClusterDiscoveryResponse, error) {
	out := new(ClusterDiscoveryResponse)
	err := c.cc.Invoke(ctx, Clusters_Discover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) List(ctx context.Context, in *ClusterFilter, opts ...grpc.CallOption) (*ClusterList, error) {
	out := new(ClusterList)
	err := c.cc.Invoke(ctx, Clusters_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, Clusters_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Profiles(ctx context.Context, in *ClusterProfilesRequest, opts ...grpc.CallOption) (*ClusterProfilesResponse, error) {
	out := new(ClusterProfilesResponse)
	err := c.cc.Invoke(ctx, Clusters_Profiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Config(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfigResponse, error) {
	out := new(ClusterConfigResponse)
	err := c.cc.Invoke(ctx, Clusters_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) CIDR(ctx context.Context, in *ClusterCIDRRequest, opts ...grpc.CallOption) (*ClusterCIDRResponse, error) {
	out := new(ClusterCIDRResponse)
	err := c.cc.Invoke(ctx, Clusters_CIDR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServer is the server API for Clusters service.
// All implementations must embed UnimplementedClustersServer
// for forward compatibility
type ClustersServer interface {
	Create(context.Context, *CreateClusterRequest) (*Cluster, error)
	Delete(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error)
	Discover(context.Context, *ClusterDiscoveryRequest) (*ClusterDiscoveryResponse, error)
	List(context.Context, *ClusterFilter) (*ClusterList, error)
	Update(context.Context, *Cluster) (*Cluster, error)
	Profiles(context.Context, *ClusterProfilesRequest) (*ClusterProfilesResponse, error)
	Config(context.Context, *ClusterConfigRequest) (*ClusterConfigResponse, error)
	CIDR(context.Context, *ClusterCIDRRequest) (*ClusterCIDRResponse, error)
	mustEmbedUnimplementedClustersServer()
}

// UnimplementedClustersServer must be embedded to have forward compatible implementations.
type UnimplementedClustersServer struct {
}

func (UnimplementedClustersServer) Create(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClustersServer) Delete(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClustersServer) Discover(context.Context, *ClusterDiscoveryRequest) (*ClusterDiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedClustersServer) List(context.Context, *ClusterFilter) (*ClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClustersServer) Update(context.Context, *Cluster) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClustersServer) Profiles(context.Context, *ClusterProfilesRequest) (*ClusterProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profiles not implemented")
}
func (UnimplementedClustersServer) Config(context.Context, *ClusterConfigRequest) (*ClusterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedClustersServer) CIDR(context.Context, *ClusterCIDRRequest) (*ClusterCIDRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CIDR not implemented")
}
func (UnimplementedClustersServer) mustEmbedUnimplementedClustersServer() {}

// UnsafeClustersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClustersServer will
// result in compilation errors.
type UnsafeClustersServer interface {
	mustEmbedUnimplementedClustersServer()
}

func RegisterClustersServer(s grpc.ServiceRegistrar, srv ClustersServer) {
	s.RegisterService(&Clusters_ServiceDesc, srv)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Discover(ctx, req.(*ClusterDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClusterFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Profiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Profiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Profiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Profiles(ctx, req.(*ClusterProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Config(ctx, req.(*ClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_CIDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCIDRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).CIDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clusters_CIDR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).CIDR(ctx, req.(*ClusterCIDRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clusters_ServiceDesc is the grpc.ServiceDesc for Clusters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clusters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.tenant.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _Clusters_Discover_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Profiles",
			Handler:    _Clusters_Profiles_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Clusters_Config_Handler,
		},
		{
			MethodName: "CIDR",
			Handler:    _Clusters_CIDR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.platform.proto",
}
