syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantClusterProto";

package chainguard.platform.tenant;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "annotations/events.proto";
import "platform/common/v1/uidp.platform.proto";
import "platform/iam/v1/group.platform.proto";

service Clusters {
  rpc Create(CreateClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      post: "/tenant/v1/clusters/{parent_id=**}"
      body: "cluster"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          CAP_TENANT_CLUSTERS_CREATE,
          // Creating a managed Cluster entails creating a RoleBinding
          // for the cluster's identity, so check that the caller has
          // permission to create RoleBindings as well.
          CAP_IAM_ROLE_BINDINGS_CREATE
        ]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.tenant.cluster.created.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Delete(DeleteClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/tenant/v1/clusters/{id=**}"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_CLUSTERS_DELETE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.tenant.cluster.deleted.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Discover(ClusterDiscoveryRequest) returns (ClusterDiscoveryResponse) {
    option (google.api.http) = {
      post: "/tenant/v1/clusters"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [
          // This API is used to discover all of the clusters accessible
          // to the IAM roles associated with the group specified in the
          // request, use this special capability to cover this permission.
          CAP_TENANT_CLUSTERS_DISCOVER,
          // As part of the discovery response we return "enrolled"
          // clusters, so check the List capability.
          CAP_TENANT_CLUSTERS_LIST
        ]
      }
    };
  }

  rpc List(ClusterFilter) returns (ClusterList) {
    option (google.api.http) = {
      get: "/tenant/v1/clusters"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_CLUSTERS_LIST]
        unscoped: true
      }
    };
  }

  rpc Update(Cluster) returns (Cluster) {
    option (google.api.http) = {
      put: "/tenant/v1/clusters/{id=**}"
      body: "*"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_CLUSTERS_UPDATE]
      }
    };
    option (chainguard.annotations.events) = {
      type: "dev.chainguard.api.tenant.cluster.updated.v1"
      extensions: ["group"]
      audience: CUSTOMER
    };
  }

  rpc Profiles(ClusterProfilesRequest) returns (ClusterProfilesResponse) {
    option (chainguard.annotations.iam) = {
      // Just check that the caller is registered.
      enabled: {}
    };
  }

  rpc Config(ClusterConfigRequest) returns (ClusterConfigResponse) {
    option (chainguard.annotations.iam) = {
      // Just check that the caller is registered.
      enabled: {}
    };
  }

  rpc CIDR(ClusterCIDRRequest) returns (ClusterCIDRResponse) {
    option (chainguard.annotations.iam) = {
      // Just check that the caller is registered.
      enabled: {}
    };
  }
}

message CreateClusterRequest {
  // parent_id, The Group under which this Cluster resides.
  string parent_id = 1 [(chainguard.annotations.iam_scope) = true];

  // Cluster is the definition of the managed cluster to create.
  Cluster cluster = 2;
}

message DeleteClusterRequest {
   // id is the exact UIDP of the record.
   string id = 1 [(chainguard.annotations.iam_scope) = true];
}

message ClusterDiscoveryRequest {
  // id is the exact UIDP of the group to impersonate to search for clusters.
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  // providers is the list of providers to perform discovery on.
  repeated Cluster.Provider providers = 2;

  // profiles includes the set of profiles to perform discovery for,
  // which may impact eligibility (some profiles may not be supported
  // on some providers).
  repeated string profiles = 3;

  // states is a collection of the states to return, or all if
  // none are specified.
  repeated State states = 4;

  enum State {
    UNKNOWN     = 0;
    UNSUPPORTED = 1;
    NEEDS_WORK  = 2;
    ELIGIBLE    = 3;
    ENROLLED    = 4;
  }
}

message ClusterDiscoveryResponse {
  repeated Result results = 1;

  message Result {
    Cluster.Provider provider = 1;
    string account = 2;
    Cluster.Location location = 3;
    string name = 4;

    oneof state {
      // unsupported clusters cannot be enrolled with our
      // Agentless cluster support.
      Unsupported unsupported = 10;

      // needs_work clusters can be modified in some way so
      // that they are supported by our Agentless infrastructure.
      NeedsWork needs_work = 11;

      // eligible clusters are able to be directly enrolled as
      // agentless tenants immediately.  This message contains
      // all of the information needed to enroll this cluster.
      Eligible eligible = 12;

      // enrolled clusters are clusters that have already been
      // enrolled as agentless tenants.
      Enrolled enrolled = 13;
    }

    message Unsupported {
      // reason holds the reason the cluster is not currently supported.
      string reason = 1;
    }

    message NeedsWork {
      // steps holds the set of changes the user needs to make in order
      // for the cluster to become eligible.
      repeated string steps = 1;
    }

    message Eligible {
      chainguard.platform.tenant.Cluster.Info info = 1;
    }

    message Enrolled {
      // id is the UIDP of the tenant Cluster.
      string id = 1;

      // profiles contains the set of profiles that this
      // cluster was enrolled with.
      repeated string profiles = 2;

      chainguard.platform.tenant.Cluster.Info info = 3;
    }
  }
}

message Cluster {
  // id, The Cluster UIDP under which this Cluster resides.
  string id = 1 [(chainguard.annotations.iam_scope) = true];

  // remote_id is the remote ID of this cluster.
  string remote_id = 2;

  // issuer is the identity issuer tied to this cluster.
  string issuer = 3;

  // registered tracks the timestamp at which this cluster was registered.
  google.protobuf.Timestamp registered = 4;

  // last_seen tracks the timestamp at which this cluster was last seen.
  google.protobuf.Timestamp last_seen = 5;

  // version holds the Kubernetes version last reported by the cluster.
  string version = 6;

  // agent_version holds the version of the Chainguard agent last reported by the cluster.
  string agent_version = 7;

  // activity is a mapping from "Source" URLs to an activity record summarizing
  // recent activity from this source.
  map<string, ClusterActivity> activity = 8;

  // name of the cluster.
  string name = 9;

  // a short description of this cluster.
  string description = 10;

  // group the cluster resides in
  chainguard.platform.iam.Group group = 99;

  /////////////////////////////////////////////
  // Group "managed" options starting at 100 //
  /////////////////////////////////////////////

  // managed_name is the unique name we have given to this cluster's managed agent.
  // This field is output-only, and is populated only when this cluster is "managed".
  string managed_name = 100;

  // provider holds the flavor of cluster provider, which is used to determine how we
  // authenticate with the cluster.
  Provider provider = 101;

  // affinity specifies a scheduling preference for where to run the managed agent.
  // Other factors, such as the provider may be taken into account when choosing a
  // host cluster.
  Location affinity = 105;

  // info contains the cluster information from the kubeconfig context.
  Info info = 102;

  // auth_info holds authentication details for connecting to KinD in test scenarios.
  AuthInfo auth_info = 104;

  // status contains the managed cluster's status.
  Status status = 103;

  // host_cluster surfaces the opaque identifier for the Chainguard cluster hosting
  // this agent.
  string host_cluster = 106;

  // profiles specifies the root set of tenant configurations that we want to run
  // on this cluster.
  repeated string profiles = 107;

  // EnforcerOptions contains additional Enforcer configuration settings.
  // +optional
  optional EnforcerOptions enforcer_options = 108;

  message EnforcerOptions {
    // +optional
    optional bool webhook_fail_open = 1;
    // +optional
    optional bool enable_cip_cache = 2;
    // +optional
    optional NamespaceEnforcementMode namespace_enforcement_mode = 3;
  }

  enum NamespaceEnforcementMode {
    OptOut  = 0;
    OptIn  = 1;
  }

  enum Provider {
    UNKNOWN = 0;
    GKE = 1;
    EKS = 2;

    // GCP Services (10+)
    CLOUD_RUN = 10;

    // AWS Services (20+)
    ECS = 20;
    APP_RUNNER = 21;

    // For testing.
    KIND = 100;
  }

  enum Location {
    AUTO = 0;

    // Use 1xx for US
    US_EAST    = 101;
    US_CENTRAL = 102;
    US_WEST    = 103;

    // TODO: Segment up other areas
  }

  // This is based off of k8s.io/client-go/tools/clientcmd/api/v1.Cluster
  // This can be extracted from kubectl for a named cluster (replace CLUSTER_NAME) with:
  //   kubectl config view \
  //     --flatten -o jsonpath='{.clusters[?(@.name == "CLUSTER_NAME")].cluster}'
  message Info {
    // Server is the address of the kubernetes cluster (https://hostname:port).
    string server = 1;

    // TODO: TLSServerName = 2;

    // TODO: InsecureSkipTLSVerify = 3;

    // TODO: CertificateAuthority = 4;

    // CertificateAuthorityData contains PEM-encoded certificate authority certificates.
    // Overrides CertificateAuthority
    bytes CertificateAuthorityData = 5;

    // TODO: ProxyURL = 6;

    // TODO: Extensions = 7;
  }

  // This is based off of k8s.io/client-go/tools/clientcmd/api/v1.AuthInfo
  // This should only ever be used with KinD clusters during testing, it WILL
  // NOT be stored securely.
  message AuthInfo {
    // client_certificate_data contains PEM-encoded data from a client cert file for TLS.
    bytes client_certificate_data = 2;

    // client_key_data contains PEM-encoded data from a client key file for TLS.
    bytes client_key_data = 4;
  }

  message Status {
    enum State {
      UNKNOWN = 0;
      Ready = 1;
      NotReady = 2;
    }

    State ready = 1;
    string reason = 2;
    string message = 3;
  }
}

message ClusterActivity {
  // profile is the Chainguard profile to which the source of this activity belongs.
  string profile = 6;

  // namespace is the namespace in which the source of this cluster activity lives.
  string namespace = 1;

  // controller_name is the name of the Controller CRD which was the source of this
  // activity on the tenant cluster.
  string controller_name = 2;

  // webhook_name is the name of the Webhook CRD which was the source of this
  // activity on the tenant cluster.
  string webhook_name = 3;

  // spec_hash is the hash of the Controller or Webhook CRD's spec, which forms a
  // loose form of versioning.
  string spec_hash = 4;

  // last_seen tracks the timestamp at which this source was last active.
  google.protobuf.Timestamp last_seen = 5;
}

message ClusterList {
    repeated Cluster items = 1;
}

message ClusterFilter {
  // id is the exact UID of the record.
  string id = 1;

  // active_since is the timestamp after which returned clusters should have been active.
  // This applies to both cluster registration and when it was "last seen".
  google.protobuf.Timestamp active_since = 2;

  // uidp filers records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 3;

  // remote_id is the remote ID of this cluster.
  string remote_id = 4;

  // name is the exact name of the cluster.
  string name = 5;
}

message ClusterProfilesRequest {}

message ClusterProfilesResponse {
  repeated Profile profile = 1;

  message Profile {
    string name = 1;
    string description = 2;

    repeated string dependencies = 3;
  }
}

message ClusterConfigRequest {
  // profiles specifies the root profiles we want as part of this configuration.
  repeated string profiles = 1;

  // EnforcerOptions contains additional Enforcer configuration settings.
  optional EnforcerOptions enforcer_options = 2;

  message EnforcerOptions {
    // +optional
    optional bool webhook_fail_open = 1;
    // +optional
    optional bool enable_cip_cache = 2;
    // +optional
    optional NamespaceEnforcementMode namespace_enforcement_mode = 3;
  }

  enum NamespaceEnforcementMode {
    OptOut  = 0;
    OptIn  = 1;
  }
}

message ClusterConfigResponse {
  bytes mcp_config = 1;
  bytes tenant_config = 2;

  // profiles includes the full set of profiles returned (including transitive
  // dependencies of the input profiles)
  repeated string profiles = 3;
}

message ClusterCIDRRequest {
}

message ClusterCIDRResponse {
  // cidr_blocks specifies the cidr blocks enforce uses to communicate with clusters.
  repeated string cidr_blocks = 1;
}
