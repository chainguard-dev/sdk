syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantVulnProto";

package chainguard.platform.tenant;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";
import "sbom.platform.proto";

service VulnReports {
  rpc List(VulnReportFilter) returns (VulnReportList) {
    option (google.api.http) = {
      get: "/tenant/v1/vulnreports"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_VULN_REPORTS_LIST]
        unscoped: true
      }
    };
  }
}

message VulnReport {
    // id, The VulnReport UIDP at which this VulnReport resides.
    string id = 1;

    // vulnerability_db_last_build_time holds the time when the vulnerability database was built last time.
    google.protobuf.Timestamp vulnerability_db_last_build_time = 2;

    // Report's list of vulnerability matches(s).
    repeated VulnerabilityMatch vulnerability_matches = 3;

    // scanner contains some information about the scanner used to generate the report.
    Scanner scanner = 4;

    // report_generation tracks the timestamp at which this report was generated.
    google.protobuf.Timestamp report_generation = 5;

    // raw_vuln_report may or may not be useful in the long term, but for now to make
    // progress on this, we'll just yolo and serialize it here.
    bytes raw_vuln_report = 6;

    // last_seen tracks the timestamp at which this vuln report was last seen.
    google.protobuf.Timestamp last_seen = 7;
}

message Scanner {
  // name contains the vendor name of the scanner.
  string name = 1;
  // version holds the version of the used scanner to generate the report.
  string version = 2;
}

message VulnerabilityMatch {
    // Vulnerability holds information about the found vulnerability.
    VulnerabilityRecord vulnerability = 1;

    // Package affected by this vulnerability.
    Package2 pkg = 2;

    // Fix related data about this vulnerability.
    optional Fix fix = 3;
}

message VulnerabilityRecord {
    // id of the vulnerability e.g. CVE_1231-12.
    string id = 1;

    // a short description of this vulnerability.
    string description = 2;

    // severity is the value representing the severity of the vulnerability
    Severity severity = 3;

    enum Severity {
        UNKNOWN = 0;
        LOW = 1;
        MEDIUM = 2;
        HIGH = 3;
        CRITICAL = 4;
    }

     // source from where the vulnerability information was obtained, e.g. nvd, github, osv.
    string source = 4;

    // List of cvss information about the exploitability of the vulnerability.
    repeated Cvss cvss = 5;

    message Cvss {
      // CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
      string score = 1;
      // CVSS version used to populate score and severity.
      string version = 2;
    }

    // List of cpe_uri on which the vulnerability was found.
    repeated string cpe_uri = 6;

    // URLs related to this vulnerability.
    repeated string related_urls = 7;

    // advisories related to this vulnerability.
    map<string, string> advisories = 8;

    message RelatedVulnerability {
      // ID of the vulnerability.
      string id = 1;
      // Source from where the vulnerability information was obtained, e.g. nvd, github, osv.
      string source = 2;
    }

    // related vulnerabilities to the main vulnerability reported here.
    repeated RelatedVulnerability related_vulnerabilities = 9;

    // display_id is the normalized value of the vulnerability ID often defined by a CVE-ID.
    string display_id = 10;
}

message Fix {
  // List of in versions of the package on which the vulnerability has been solved.
  repeated string versions = 1;

  // state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix.
  State state = 2;
  enum State {
      UNKNOWN = 0;
      FIXED = 1;
      NOT_FIXED = 2;
      WONT_FIX = 3;
  }
}

message VulnReportList {
  repeated VulnReport items = 1;
}

message VulnReportFilter {
    // id is the exact UID of the record.
    string id = 1;

    chainguard.platform.common.UIDPFilter uidp = 2;

    // This field was retired and is no longer served.
    reserved 3;

    // This field was retired and is no longer served.
    reserved 4;

    // active_since is the timestamp after which the records should
    // have last been observed in the returned context.
    google.protobuf.Timestamp active_since = 5;

    // include_raw_vuln_report is a flag to return a list of reports containing the raw report.
    bool include_raw_vuln_report = 6;
}
