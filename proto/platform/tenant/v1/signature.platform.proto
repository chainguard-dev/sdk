syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantSignatureProto";

package chainguard.platform.tenant;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service Signatures {
  rpc List(SignatureFilter) returns (SignatureList) {
    option (google.api.http) = {
      get: "/tenant/v1/signatures"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_RECORD_SIGNATURES_LIST]
        unscoped: true
      }
    };
  }
}

message Signature {
    // id, The Signature UIDP at which this Signature resides.
    string id = 1;

    // name of the Signature.
    string name = 2;

    // a short description of this Signature.
    string description = 3;

    // last_seen tracks the timestamp at which this signature was last seen.
    google.protobuf.Timestamp last_seen = 4;

    // predicate_type is an optional field that captures the type of signed
    // metadata this signature has signed.
    //  - For simple signatures (e.g. directly signed artifact), this will
    //    be empty to represent the "null claim".
    //  - For signed claims (e.g. attestations), this will hold the in-toto
    //    predicate type of the signed claim.
    string predicate_type = 5;

    oneof kind {
      // none is the kind of signature that is attached when a policy
      // designates an image as "statically" trusted.
      google.protobuf.Empty none = 10;

      // keyless is the kind of signature that is attached when a signature
      // was produced via a "keyless" flow.
      Keyless keyless = 11;

      // key is the kind of signature that is attached when a signature
      // was produced via a static key pair.
      Key key = 12;
    }

    message Keyless {
      string issuer = 1;
      string subject = 2;

      // TODO: Consider making this a oneof when other providers
      // start producing interesting claims.
      Github github = 3;

      message Github {
        // OID: 1.3.6.1.4.1.57264.1.2
        string workflow_trigger = 1;

        // OID: 1.3.6.1.4.1.57264.1.3
        string workflow_sha = 2;

        // OID: 1.3.6.1.4.1.57264.1.4
        string workflow_name = 3;

        // OID: 1.3.6.1.4.1.57264.1.5
        string workflow_repo = 4;

        // OID: 1.3.6.1.4.1.57264.1.6
        string workflow_ref = 5;
      }
    }

    message Key {
      // TODO: What useful information should we encode here?
    }
}

message SignatureList {
    repeated Signature items = 1;
}

message SignatureFilter {
    chainguard.platform.common.UIDPFilter uidp = 1;

    // active_since is the timestamp after which the records should
    // have last been observed in the returned context.
    google.protobuf.Timestamp active_since = 2;

    string name = 3;

    optional string predicate_type = 4;
}
