syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantPolicyResultProto";

package chainguard.platform.tenant;

import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service PolicyResults {
  rpc List(PolicyResultFilter) returns (PolicyResultList) {
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_RECORD_POLICY_RESULTS_LIST]
        unscoped: true
      }
    };
  }
}

message PolicyResult {
    // id, The PolicyResult UIDP at which this PolicyResult resides.
    string id = 1;

    // name of the PolicyResult.
    string name = 2;

    // a short description of this PolicyResult.
    string description = 3;

    // policy_id is the metadata.uid of the Policy this result captures an evaluation of.
    string policy_id = 4;

    // version is the metadata.resourceVersion of the Policy this result captures an evaluation of.
    string version = 5;

    // last_checked tracks the timestamp at which this policy result was last checked.
    google.protobuf.Timestamp last_checked = 6;

    // result holds the result of this policy evaluation.
    Result result = 7;

    // diagnostic holds the diagnostic message associated with the result of this policy evaluation.
    string diagnostic = 8;

    enum Result {
      UNKNOWN = 0;

      // PASS represents when a policy evaluation completed without any
      // diagnostics returned.
      PASS    = 1;

      // WARN represents when a policy evaluation completed with warnings
      // (e.g. the policy used mode: warn).
      WARN    = 2;

      // FAIL represents when a policy evaluation completed with errors
      // (e.g. the policy used mode: enforce).
      FAIL    = 3;
    }

    // This loosely tracks the policy-controller's PolicyResult type found here:
    // https://github.com/sigstore/policy-controller/blob/f777dcc2e/pkg/webhook/validator_result.go
    map<string, AuthorityMatch> authority_matches = 9;

    message AuthorityMatch {
      // The matched signatures.
      SignatureMatches signatures = 1;

      // A map from attestation name to matched attestations.
      map<string, SignatureMatches> attestations = 2;

      message SignatureMatches {
        // The list of signature record UIDPs
        repeated string ids = 1;
      }
    }

    // parent_type, It is the parent type associated with the PolicyResult, can be Record, RecordContext or Workload.
    ParentType parent_type = 10;

    enum ParentType {
      PARENT_TYPE_UNKNOWN = 0;
      RECORD              = 1;
      RECORD_CONTEXT      = 2;
      WORKLOAD            = 3;
    }
}

message PolicyResultList {
    repeated PolicyResult items = 1;
}

message PolicyResultFilter {
    chainguard.platform.common.UIDPFilter uidp = 1;

    // checked_since is the timestamp after which the policy should
    // have last been checked.
    google.protobuf.Timestamp checked_since = 2;

    // policy_id looks up evaluations of the policy identified by this metadata.uid
    string policy_id = 3;

    // results filters policy results with one of the provided result.
    repeated PolicyResult.Result results = 4;

    // parent_type filters policy results with the provided parent_type.
    PolicyResult.ParentType parent_type = 5;
}
