// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: record.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v1 "chainguard.dev/sdk/proto/platform/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordStatus_Result int32

const (
	RecordStatus_UNKNOWN RecordStatus_Result = 0
	RecordStatus_PASS    RecordStatus_Result = 1
	RecordStatus_FAIL    RecordStatus_Result = 2
)

// Enum value maps for RecordStatus_Result.
var (
	RecordStatus_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "PASS",
		2: "FAIL",
	}
	RecordStatus_Result_value = map[string]int32{
		"UNKNOWN": 0,
		"PASS":    1,
		"FAIL":    2,
	}
)

func (x RecordStatus_Result) Enum() *RecordStatus_Result {
	p := new(RecordStatus_Result)
	*p = x
	return p
}

func (x RecordStatus_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordStatus_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_record_platform_proto_enumTypes[0].Descriptor()
}

func (RecordStatus_Result) Type() protoreflect.EnumType {
	return &file_record_platform_proto_enumTypes[0]
}

func (x RecordStatus_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordStatus_Result.Descriptor instead.
func (RecordStatus_Result) EnumDescriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{1, 0}
}

type Context_Ancestry_Role int32

const (
	Context_Ancestry_UNKNOWN Context_Ancestry_Role = 0
	Context_Ancestry_BASE    Context_Ancestry_Role = 1
	Context_Ancestry_DERIVED Context_Ancestry_Role = 2
)

// Enum value maps for Context_Ancestry_Role.
var (
	Context_Ancestry_Role_name = map[int32]string{
		0: "UNKNOWN",
		1: "BASE",
		2: "DERIVED",
	}
	Context_Ancestry_Role_value = map[string]int32{
		"UNKNOWN": 0,
		"BASE":    1,
		"DERIVED": 2,
	}
)

func (x Context_Ancestry_Role) Enum() *Context_Ancestry_Role {
	p := new(Context_Ancestry_Role)
	*p = x
	return p
}

func (x Context_Ancestry_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Context_Ancestry_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_record_platform_proto_enumTypes[1].Descriptor()
}

func (Context_Ancestry_Role) Type() protoreflect.EnumType {
	return &file_record_platform_proto_enumTypes[1]
}

func (x Context_Ancestry_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Context_Ancestry_Role.Descriptor instead.
func (Context_Ancestry_Role) EnumDescriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2, 1, 0}
}

type Context_Variant_Role int32

const (
	Context_Variant_UNKNOWN Context_Variant_Role = 0
	Context_Variant_INDEX   Context_Variant_Role = 1
	Context_Variant_VARIANT Context_Variant_Role = 2
)

// Enum value maps for Context_Variant_Role.
var (
	Context_Variant_Role_name = map[int32]string{
		0: "UNKNOWN",
		1: "INDEX",
		2: "VARIANT",
	}
	Context_Variant_Role_value = map[string]int32{
		"UNKNOWN": 0,
		"INDEX":   1,
		"VARIANT": 2,
	}
)

func (x Context_Variant_Role) Enum() *Context_Variant_Role {
	p := new(Context_Variant_Role)
	*p = x
	return p
}

func (x Context_Variant_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Context_Variant_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_record_platform_proto_enumTypes[2].Descriptor()
}

func (Context_Variant_Role) Type() protoreflect.EnumType {
	return &file_record_platform_proto_enumTypes[2]
}

func (x Context_Variant_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Context_Variant_Role.Descriptor instead.
func (Context_Variant_Role) EnumDescriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2, 2, 0}
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id holds the UIDP for this image's record
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// cluster identifies the specific cluster for the record.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// image is the container image for the record.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// last_seen is the last time we've seen this image anywhere on this cluster.
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	// last_refreshed will hold a PredicateType => Last time it was successfully
	// refreshed.
	LastRefreshed map[string]*timestamppb.Timestamp `protobuf:"bytes,4,rep,name=last_refreshed,json=lastRefreshed,proto3" json:"last_refreshed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sboms         []*Sbom                           `protobuf:"bytes,6,rep,name=sboms,proto3" json:"sboms,omitempty"`
	// status is a map from analysis type (e.g. "sbom", "vuln") => RecordStatus to indidate success/failure,
	// the analysis timestamp, as well as any diagnostic message in case of failures.
	Status map[string]*RecordStatus `protobuf:"bytes,9,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Record) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Record) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Record) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Record) GetLastRefreshed() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.LastRefreshed
	}
	return nil
}

func (x *Record) GetSboms() []*Sbom {
	if x != nil {
		return x.Sboms
	}
	return nil
}

func (x *Record) GetStatus() map[string]*RecordStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RecordStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastChecked *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	Result      RecordStatus_Result    `protobuf:"varint,2,opt,name=result,proto3,enum=chainguard.platform.tenant.RecordStatus_Result" json:"result,omitempty"`
	Diagnostic  string                 `protobuf:"bytes,3,opt,name=diagnostic,proto3" json:"diagnostic,omitempty"`
}

func (x *RecordStatus) Reset() {
	*x = RecordStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStatus) ProtoMessage() {}

func (x *RecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStatus.ProtoReflect.Descriptor instead.
func (*RecordStatus) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{1}
}

func (x *RecordStatus) GetLastChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChecked
	}
	return nil
}

func (x *RecordStatus) GetResult() RecordStatus_Result {
	if x != nil {
		return x.Result
	}
	return RecordStatus_UNKNOWN
}

func (x *RecordStatus) GetDiagnostic() string {
	if x != nil {
		return x.Diagnostic
	}
	return ""
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// context_id is a unique ID, output only.
	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// last_seen is the last time we've seen the image_id in this context.
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	// Types that are assignable to Context:
	//
	//	*Context_Workload_
	//	*Context_Ancestry_
	//	*Context_Variant_
	Context isContext_Context `protobuf_oneof:"context"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2}
}

func (x *Context) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *Context) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (m *Context) GetContext() isContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *Context) GetWorkload() *Context_Workload {
	if x, ok := x.GetContext().(*Context_Workload_); ok {
		return x.Workload
	}
	return nil
}

func (x *Context) GetAncestry() *Context_Ancestry {
	if x, ok := x.GetContext().(*Context_Ancestry_); ok {
		return x.Ancestry
	}
	return nil
}

func (x *Context) GetVariant() *Context_Variant {
	if x, ok := x.GetContext().(*Context_Variant_); ok {
		return x.Variant
	}
	return nil
}

type isContext_Context interface {
	isContext_Context()
}

type Context_Workload_ struct {
	Workload *Context_Workload `protobuf:"bytes,10,opt,name=workload,proto3,oneof"`
}

type Context_Ancestry_ struct {
	Ancestry *Context_Ancestry `protobuf:"bytes,11,opt,name=ancestry,proto3,oneof"`
}

type Context_Variant_ struct {
	Variant *Context_Variant `protobuf:"bytes,12,opt,name=variant,proto3,oneof"`
}

func (*Context_Workload_) isContext_Context() {}

func (*Context_Ancestry_) isContext_Context() {}

func (*Context_Variant_) isContext_Context() {}

type Sbom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages []*Package `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (x *Sbom) Reset() {
	*x = Sbom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sbom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sbom) ProtoMessage() {}

func (x *Sbom) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sbom.ProtoReflect.Descriptor instead.
func (*Sbom) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{3}
}

func (x *Sbom) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Purl    string `protobuf:"bytes,3,opt,name=purl,proto3" json:"purl,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{4}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last_checked holds when this policy was last evaluated.
	LastChecked *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	// valid holds whether the policy evaluation was successful.
	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	// diagnostic holds any messages surfaced by the policy evaluation.
	Diagnostic string `protobuf:"bytes,3,opt,name=diagnostic,proto3" json:"diagnostic,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{5}
}

func (x *Policy) GetLastChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChecked
	}
	return nil
}

func (x *Policy) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Policy) GetDiagnostic() string {
	if x != nil {
		return x.Diagnostic
	}
	return ""
}

type RecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Record `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RecordList) Reset() {
	*x = RecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordList) ProtoMessage() {}

func (x *RecordList) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordList.ProtoReflect.Descriptor instead.
func (*RecordList) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{6}
}

func (x *RecordList) GetItems() []*Record {
	if x != nil {
		return x.Items
	}
	return nil
}

type RecordFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UID of the record.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// uidp filters records based on their position in the group hierarchy.
	Uidp *v1.UIDPFilter `protobuf:"bytes,6,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// image is specified if a specific Record is desired.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// predicate specifies to fetch Records where either there's no
	// LastRefreshed for this predicate type, or if it needs to be refreshed.
	Predicate string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// cluster is specified if restricting to a given cluster id.
	// This field is required.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// active_since is the timestamp after which returned records should have been active.
	// This applies to when an image was "last seen".
	ActiveSince *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=active_since,json=activeSince,proto3" json:"active_since,omitempty"`
}

func (x *RecordFilter) Reset() {
	*x = RecordFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFilter) ProtoMessage() {}

func (x *RecordFilter) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFilter.ProtoReflect.Descriptor instead.
func (*RecordFilter) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{7}
}

func (x *RecordFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordFilter) GetUidp() *v1.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *RecordFilter) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RecordFilter) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *RecordFilter) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RecordFilter) GetActiveSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveSince
	}
	return nil
}

// TODO: Replace with upstream proto messages wherever possible.
type GroupVersionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GroupVersionKind) Reset() {
	*x = GroupVersionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupVersionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVersionKind) ProtoMessage() {}

func (x *GroupVersionKind) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVersionKind.ProtoReflect.Descriptor instead.
func (*GroupVersionKind) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{8}
}

func (x *GroupVersionKind) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupVersionKind) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GroupVersionKind) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Workload contexts are added to existence records that have been
// observed running on a cluster.
type Context_Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      *GroupVersionKind `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Uid       string            `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Context_Workload) Reset() {
	*x = Context_Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Workload) ProtoMessage() {}

func (x *Context_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Workload.ProtoReflect.Descriptor instead.
func (*Context_Workload) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Context_Workload) GetKind() *GroupVersionKind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Context_Workload) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Context_Workload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Context_Workload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Ancestry relationships are added to records when a "base image"
// relationship has been uncovered.  This context is added to BOTH
// records with their respective roles.  The base image will get
// the Role BASE, and the derivative image will get the Rile DERIVED.
type Context_Ancestry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role Context_Ancestry_Role `protobuf:"varint,1,opt,name=role,proto3,enum=chainguard.platform.tenant.Context_Ancestry_Role" json:"role,omitempty"`
	// The id of the other image's record in this ancestry relationship.
	// If our Role is BASE, then this will hold the ID of the DERIVED
	// image's record, and vice versa.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Context_Ancestry) Reset() {
	*x = Context_Ancestry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Ancestry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Ancestry) ProtoMessage() {}

func (x *Context_Ancestry) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Ancestry.ProtoReflect.Descriptor instead.
func (*Context_Ancestry) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Context_Ancestry) GetRole() Context_Ancestry_Role {
	if x != nil {
		return x.Role
	}
	return Context_Ancestry_UNKNOWN
}

func (x *Context_Ancestry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Variant relationships are added to records when we find an "index"
// containing multiple different variations (typically os/arch) of the
// same logical image.  These are referred to as "OCI Image Index",
// "Docker Manifest List", and occasionally "fat images".  This context
// is added to ALL records including the INDEX and all VARIANTs of that
// index.  The INDEX will typically contain N contexts carrying the Role
// INDEX, the id of the VARIANT's record, and the version information
// that discriminates that VARIANT from other VARIANTs.  The VARIANT
// will typically (but not always!) contain 1 context varrying the Role
// VARIANT, the id of the INDEX's record, and the version information
// that discriminates it among the other VARIANTs in the INDEX.
type Context_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role Context_Variant_Role `protobuf:"varint,1,opt,name=role,proto3,enum=chainguard.platform.tenant.Context_Variant_Role" json:"role,omitempty"`
	// The id of the image index's record linking this
	// image (transitively) to the cluster.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The version information distinguishing this variant
	// from other possible variants of the index.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Context_Variant) Reset() {
	*x = Context_Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Variant) ProtoMessage() {}

func (x *Context_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_record_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Variant.ProtoReflect.Descriptor instead.
func (*Context_Variant) Descriptor() ([]byte, []int) {
	return file_record_platform_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Context_Variant) GetRole() Context_Variant_Role {
	if x != nil {
		return x.Role
	}
	return Context_Variant_UNKNOWN
}

func (x *Context_Variant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Context_Variant) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_record_platform_proto protoreflect.FileDescriptor

var file_record_platform_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x69, 0x64, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xae, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x62, 0x6f, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x62, 0x6f, 0x6d, 0x52, 0x05, 0x73, 0x62, 0x6f, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x5c, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x22, 0x29, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x22, 0x99, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0x90, 0x01, 0x0a,
	0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x1a,
	0x8d, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x1a,
	0xa6, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x04, 0x53, 0x62, 0x6f, 0x6d, 0x12, 0x3f, 0x0a, 0x08, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x07,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22,
	0x46, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32,
	0xa1, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x26,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0xdb,
	0x04, 0x10, 0x01, 0x42, 0x72, 0x0a, 0x25, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_record_platform_proto_rawDescOnce sync.Once
	file_record_platform_proto_rawDescData = file_record_platform_proto_rawDesc
)

func file_record_platform_proto_rawDescGZIP() []byte {
	file_record_platform_proto_rawDescOnce.Do(func() {
		file_record_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_platform_proto_rawDescData)
	})
	return file_record_platform_proto_rawDescData
}

var file_record_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_record_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_record_platform_proto_goTypes = []interface{}{
	(RecordStatus_Result)(0),      // 0: chainguard.platform.tenant.RecordStatus.Result
	(Context_Ancestry_Role)(0),    // 1: chainguard.platform.tenant.Context.Ancestry.Role
	(Context_Variant_Role)(0),     // 2: chainguard.platform.tenant.Context.Variant.Role
	(*Record)(nil),                // 3: chainguard.platform.tenant.Record
	(*RecordStatus)(nil),          // 4: chainguard.platform.tenant.RecordStatus
	(*Context)(nil),               // 5: chainguard.platform.tenant.Context
	(*Sbom)(nil),                  // 6: chainguard.platform.tenant.Sbom
	(*Package)(nil),               // 7: chainguard.platform.tenant.Package
	(*Policy)(nil),                // 8: chainguard.platform.tenant.Policy
	(*RecordList)(nil),            // 9: chainguard.platform.tenant.RecordList
	(*RecordFilter)(nil),          // 10: chainguard.platform.tenant.RecordFilter
	(*GroupVersionKind)(nil),      // 11: chainguard.platform.tenant.GroupVersionKind
	nil,                           // 12: chainguard.platform.tenant.Record.LastRefreshedEntry
	nil,                           // 13: chainguard.platform.tenant.Record.StatusEntry
	(*Context_Workload)(nil),      // 14: chainguard.platform.tenant.Context.Workload
	(*Context_Ancestry)(nil),      // 15: chainguard.platform.tenant.Context.Ancestry
	(*Context_Variant)(nil),       // 16: chainguard.platform.tenant.Context.Variant
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*v1.UIDPFilter)(nil),         // 18: chainguard.platform.common.UIDPFilter
}
var file_record_platform_proto_depIdxs = []int32{
	17, // 0: chainguard.platform.tenant.Record.last_seen:type_name -> google.protobuf.Timestamp
	12, // 1: chainguard.platform.tenant.Record.last_refreshed:type_name -> chainguard.platform.tenant.Record.LastRefreshedEntry
	6,  // 2: chainguard.platform.tenant.Record.sboms:type_name -> chainguard.platform.tenant.Sbom
	13, // 3: chainguard.platform.tenant.Record.status:type_name -> chainguard.platform.tenant.Record.StatusEntry
	17, // 4: chainguard.platform.tenant.RecordStatus.last_checked:type_name -> google.protobuf.Timestamp
	0,  // 5: chainguard.platform.tenant.RecordStatus.result:type_name -> chainguard.platform.tenant.RecordStatus.Result
	17, // 6: chainguard.platform.tenant.Context.last_seen:type_name -> google.protobuf.Timestamp
	14, // 7: chainguard.platform.tenant.Context.workload:type_name -> chainguard.platform.tenant.Context.Workload
	15, // 8: chainguard.platform.tenant.Context.ancestry:type_name -> chainguard.platform.tenant.Context.Ancestry
	16, // 9: chainguard.platform.tenant.Context.variant:type_name -> chainguard.platform.tenant.Context.Variant
	7,  // 10: chainguard.platform.tenant.Sbom.packages:type_name -> chainguard.platform.tenant.Package
	17, // 11: chainguard.platform.tenant.Policy.last_checked:type_name -> google.protobuf.Timestamp
	3,  // 12: chainguard.platform.tenant.RecordList.items:type_name -> chainguard.platform.tenant.Record
	18, // 13: chainguard.platform.tenant.RecordFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	17, // 14: chainguard.platform.tenant.RecordFilter.active_since:type_name -> google.protobuf.Timestamp
	17, // 15: chainguard.platform.tenant.Record.LastRefreshedEntry.value:type_name -> google.protobuf.Timestamp
	4,  // 16: chainguard.platform.tenant.Record.StatusEntry.value:type_name -> chainguard.platform.tenant.RecordStatus
	11, // 17: chainguard.platform.tenant.Context.Workload.kind:type_name -> chainguard.platform.tenant.GroupVersionKind
	1,  // 18: chainguard.platform.tenant.Context.Ancestry.role:type_name -> chainguard.platform.tenant.Context.Ancestry.Role
	2,  // 19: chainguard.platform.tenant.Context.Variant.role:type_name -> chainguard.platform.tenant.Context.Variant.Role
	10, // 20: chainguard.platform.tenant.Records.List:input_type -> chainguard.platform.tenant.RecordFilter
	9,  // 21: chainguard.platform.tenant.Records.List:output_type -> chainguard.platform.tenant.RecordList
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_record_platform_proto_init() }
func file_record_platform_proto_init() {
	if File_record_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sbom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupVersionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Ancestry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_platform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_record_platform_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Context_Workload_)(nil),
		(*Context_Ancestry_)(nil),
		(*Context_Variant_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_platform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_record_platform_proto_goTypes,
		DependencyIndexes: file_record_platform_proto_depIdxs,
		EnumInfos:         file_record_platform_proto_enumTypes,
		MessageInfos:      file_record_platform_proto_msgTypes,
	}.Build()
	File_record_platform_proto = out.File
	file_record_platform_proto_rawDesc = nil
	file_record_platform_proto_goTypes = nil
	file_record_platform_proto_depIdxs = nil
}
