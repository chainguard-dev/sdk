syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantRecordContextProto";

package chainguard.platform.tenant;

import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service RecordContexts {
  rpc List(RecordContextFilter) returns (RecordContextList) {
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_RECORD_CONTEXTS_LIST]
        unscoped: true
      }
    };
  }
}

message RecordContext {
    // id, The RecordContext UIDP at which this RecordContext resides.
    string id = 1;

    // name of the RecordContext.
    string name = 2;

    // a short description of this RecordContext.
    string description = 3;

    // last_seen tracks the timestamp at which this RecordContext was last seen.
    google.protobuf.Timestamp last_seen = 4;

    oneof kind {
      Workload workload = 100;
      Ancestry ancestry = 101;
      Variant  variant = 102;
    }

    // Workload contexts are added to existence records that have been
    // observed running on a cluster.
    message Workload {
      // remote_id is the metadata.uid of the workload in which this
      // container was observed.
      string remote_id = 1;
    }

    // Ancestry relationships are added to records when a "base image"
    // relationship has been uncovered.  This context is added to BOTH
    // records with their respective roles.  The base image will get
    // the Role BASE, and the derivative image will get the Role DERIVED.
    message Ancestry {
      Role role = 1;

      // image_id holds the digest of the related image, which can be used
      // to efficiently retrieve it's record.
      string image_id = 2;

      enum Role {
        UNKNOWN = 0;
        BASE    = 1;
        DERIVED = 2;
      }
    }

    // Variant relationships are added to records when we find an "index"
    // containing multiple different variations (typically os/arch) of the
    // same logical image.  These are referred to as "OCI Image Index",
    // "Docker Manifest List", and occasionally "fat images".  This context
    // is added to ALL records including the INDEX and all VARIANTs of that
    // index.  The INDEX will typically contain N contexts carrying the Role
    // INDEX, the id of the VARIANT's record, and the version information
    // that discriminates that VARIANT from other VARIANTs.  The VARIANT
    // will typically (but not always!) contain 1 context carrying the Role
    // VARIANT, the id of the INDEX's record, and the version information
    // that discriminates it among the other VARIANTs in the INDEX.
    message Variant {
      Role role = 1;

      // image_id holds the digest of the related image, which can be used
      // to efficiently retrieve it's record.
      string image_id = 2;

      // The version information distinguishing this variant
      // from other possible variants of the index.
      string version = 3;

      enum Role {
        UNKNOWN = 0;
        INDEX   = 1;
        VARIANT = 2;
      }
    }
}

message RecordContextList {
    repeated RecordContext items = 1;
}

message RecordContextFilter {
    chainguard.platform.common.UIDPFilter uidp = 1;

    // active_since is the timestamp after which the records should
    // have last been observed in the returned context.
    google.protobuf.Timestamp active_since = 2;

    // Allow filtering results based on matching fields in the context
    // ranging from just a particular "kind" to the exact workload shape.
    // Only specified fields will be used as part of the match.
    oneof kind {
      RecordContext.Workload workload = 100;
      RecordContext.Ancestry ancestry = 101;
      RecordContext.Variant  variant = 102;
    }
}
