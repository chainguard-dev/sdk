syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantNodeProto";

package chainguard.platform.tenant;

import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service Nodes {
  rpc List(NodeFilter) returns (NodeList) {
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_NODES_LIST]
        unscoped: true
      }
    };
  }
}

message Node {
    // id, The Node UIDP at which this Node resides.
    string id = 1;

    // name of the Node.
    string name = 2;

    // a short description of this Node.
    string description = 3;

    // remote_id is the remote ID of this Node.
    string remote_id = 4;

    string labels = 5;

    // last_seen tracks the timestamp at which this node was last seen.
    google.protobuf.Timestamp last_seen = 6;

    // Platform/Architecture-level information (10+)
    string operating_system = 10;
    string architecture = 11;

    // Assorted versions (20+)
    string kubelet_version = 20;
    string container_runtime_version = 21;
    string kernel_version = 22;

    // Node capacity information (30+)
    string cpu_capacity = 30;
    string memory_capacity = 31;
    string pod_capacity = 32;

    // Location information (40+)
    string zone = 40;
    string region = 41;
}

message NodeList {
    repeated Node items = 1;
}

message NodeFilter {
    // remote_id is the remote ID of this Node.
    string remote_id = 2;

    // active_since is the timestamp after which returned nodes
    // should have been active (last seen).
    google.protobuf.Timestamp active_since = 3;

    // name filters on the resource name.
    string name = 4;

    chainguard.platform.common.UIDPFilter uidp = 100;
}
