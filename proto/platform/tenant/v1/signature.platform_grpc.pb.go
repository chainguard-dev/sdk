// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: signature.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Signatures_List_FullMethodName = "/chainguard.platform.tenant.Signatures/List"
)

// SignaturesClient is the client API for Signatures service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignaturesClient interface {
	List(ctx context.Context, in *SignatureFilter, opts ...grpc.CallOption) (*SignatureList, error)
}

type signaturesClient struct {
	cc grpc.ClientConnInterface
}

func NewSignaturesClient(cc grpc.ClientConnInterface) SignaturesClient {
	return &signaturesClient{cc}
}

func (c *signaturesClient) List(ctx context.Context, in *SignatureFilter, opts ...grpc.CallOption) (*SignatureList, error) {
	out := new(SignatureList)
	err := c.cc.Invoke(ctx, Signatures_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignaturesServer is the server API for Signatures service.
// All implementations must embed UnimplementedSignaturesServer
// for forward compatibility
type SignaturesServer interface {
	List(context.Context, *SignatureFilter) (*SignatureList, error)
	mustEmbedUnimplementedSignaturesServer()
}

// UnimplementedSignaturesServer must be embedded to have forward compatible implementations.
type UnimplementedSignaturesServer struct {
}

func (UnimplementedSignaturesServer) List(context.Context, *SignatureFilter) (*SignatureList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSignaturesServer) mustEmbedUnimplementedSignaturesServer() {}

// UnsafeSignaturesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignaturesServer will
// result in compilation errors.
type UnsafeSignaturesServer interface {
	mustEmbedUnimplementedSignaturesServer()
}

func RegisterSignaturesServer(s grpc.ServiceRegistrar, srv SignaturesServer) {
	s.RegisterService(&Signatures_ServiceDesc, srv)
}

func _Signatures_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignaturesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signatures_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignaturesServer).List(ctx, req.(*SignatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// Signatures_ServiceDesc is the grpc.ServiceDesc for Signatures service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signatures_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.tenant.Signatures",
	HandlerType: (*SignaturesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Signatures_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signature.platform.proto",
}
