// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: cluster.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v11 "chainguard.dev/sdk/proto/platform/common/v1"
	v1 "chainguard.dev/sdk/proto/platform/iam/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterDiscoveryRequest_State int32

const (
	ClusterDiscoveryRequest_UNKNOWN     ClusterDiscoveryRequest_State = 0
	ClusterDiscoveryRequest_UNSUPPORTED ClusterDiscoveryRequest_State = 1
	ClusterDiscoveryRequest_NEEDS_WORK  ClusterDiscoveryRequest_State = 2
	ClusterDiscoveryRequest_ELIGIBLE    ClusterDiscoveryRequest_State = 3
	ClusterDiscoveryRequest_ENROLLED    ClusterDiscoveryRequest_State = 4
)

// Enum value maps for ClusterDiscoveryRequest_State.
var (
	ClusterDiscoveryRequest_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNSUPPORTED",
		2: "NEEDS_WORK",
		3: "ELIGIBLE",
		4: "ENROLLED",
	}
	ClusterDiscoveryRequest_State_value = map[string]int32{
		"UNKNOWN":     0,
		"UNSUPPORTED": 1,
		"NEEDS_WORK":  2,
		"ELIGIBLE":    3,
		"ENROLLED":    4,
	}
)

func (x ClusterDiscoveryRequest_State) Enum() *ClusterDiscoveryRequest_State {
	p := new(ClusterDiscoveryRequest_State)
	*p = x
	return p
}

func (x ClusterDiscoveryRequest_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterDiscoveryRequest_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[0].Descriptor()
}

func (ClusterDiscoveryRequest_State) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[0]
}

func (x ClusterDiscoveryRequest_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterDiscoveryRequest_State.Descriptor instead.
func (ClusterDiscoveryRequest_State) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{2, 0}
}

type Cluster_NamespaceEnforcementMode int32

const (
	Cluster_OptOut Cluster_NamespaceEnforcementMode = 0
	Cluster_OptIn  Cluster_NamespaceEnforcementMode = 1
)

// Enum value maps for Cluster_NamespaceEnforcementMode.
var (
	Cluster_NamespaceEnforcementMode_name = map[int32]string{
		0: "OptOut",
		1: "OptIn",
	}
	Cluster_NamespaceEnforcementMode_value = map[string]int32{
		"OptOut": 0,
		"OptIn":  1,
	}
)

func (x Cluster_NamespaceEnforcementMode) Enum() *Cluster_NamespaceEnforcementMode {
	p := new(Cluster_NamespaceEnforcementMode)
	*p = x
	return p
}

func (x Cluster_NamespaceEnforcementMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_NamespaceEnforcementMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[1].Descriptor()
}

func (Cluster_NamespaceEnforcementMode) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[1]
}

func (x Cluster_NamespaceEnforcementMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_NamespaceEnforcementMode.Descriptor instead.
func (Cluster_NamespaceEnforcementMode) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 0}
}

type Cluster_Provider int32

const (
	Cluster_UNKNOWN Cluster_Provider = 0
	Cluster_GKE     Cluster_Provider = 1
	Cluster_EKS     Cluster_Provider = 2
	// GCP Services (10+)
	Cluster_CLOUD_RUN Cluster_Provider = 10
	// AWS Services (20+)
	Cluster_ECS        Cluster_Provider = 20
	Cluster_APP_RUNNER Cluster_Provider = 21
	// For testing.
	Cluster_KIND Cluster_Provider = 100
)

// Enum value maps for Cluster_Provider.
var (
	Cluster_Provider_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "GKE",
		2:   "EKS",
		10:  "CLOUD_RUN",
		20:  "ECS",
		21:  "APP_RUNNER",
		100: "KIND",
	}
	Cluster_Provider_value = map[string]int32{
		"UNKNOWN":    0,
		"GKE":        1,
		"EKS":        2,
		"CLOUD_RUN":  10,
		"ECS":        20,
		"APP_RUNNER": 21,
		"KIND":       100,
	}
)

func (x Cluster_Provider) Enum() *Cluster_Provider {
	p := new(Cluster_Provider)
	*p = x
	return p
}

func (x Cluster_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[2].Descriptor()
}

func (Cluster_Provider) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[2]
}

func (x Cluster_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Provider.Descriptor instead.
func (Cluster_Provider) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 1}
}

type Cluster_Location int32

const (
	Cluster_AUTO Cluster_Location = 0
	// Use 1xx for US
	Cluster_US_EAST    Cluster_Location = 101
	Cluster_US_CENTRAL Cluster_Location = 102
	Cluster_US_WEST    Cluster_Location = 103
)

// Enum value maps for Cluster_Location.
var (
	Cluster_Location_name = map[int32]string{
		0:   "AUTO",
		101: "US_EAST",
		102: "US_CENTRAL",
		103: "US_WEST",
	}
	Cluster_Location_value = map[string]int32{
		"AUTO":       0,
		"US_EAST":    101,
		"US_CENTRAL": 102,
		"US_WEST":    103,
	}
)

func (x Cluster_Location) Enum() *Cluster_Location {
	p := new(Cluster_Location)
	*p = x
	return p
}

func (x Cluster_Location) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Location) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[3].Descriptor()
}

func (Cluster_Location) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[3]
}

func (x Cluster_Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Location.Descriptor instead.
func (Cluster_Location) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 2}
}

type Cluster_Status_State int32

const (
	Cluster_Status_UNKNOWN  Cluster_Status_State = 0
	Cluster_Status_Ready    Cluster_Status_State = 1
	Cluster_Status_NotReady Cluster_Status_State = 2
)

// Enum value maps for Cluster_Status_State.
var (
	Cluster_Status_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "Ready",
		2: "NotReady",
	}
	Cluster_Status_State_value = map[string]int32{
		"UNKNOWN":  0,
		"Ready":    1,
		"NotReady": 2,
	}
)

func (x Cluster_Status_State) Enum() *Cluster_Status_State {
	p := new(Cluster_Status_State)
	*p = x
	return p
}

func (x Cluster_Status_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Status_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[4].Descriptor()
}

func (Cluster_Status_State) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[4]
}

func (x Cluster_Status_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Status_State.Descriptor instead.
func (Cluster_Status_State) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 4, 0}
}

type ClusterConfigRequest_NamespaceEnforcementMode int32

const (
	ClusterConfigRequest_OptOut ClusterConfigRequest_NamespaceEnforcementMode = 0
	ClusterConfigRequest_OptIn  ClusterConfigRequest_NamespaceEnforcementMode = 1
)

// Enum value maps for ClusterConfigRequest_NamespaceEnforcementMode.
var (
	ClusterConfigRequest_NamespaceEnforcementMode_name = map[int32]string{
		0: "OptOut",
		1: "OptIn",
	}
	ClusterConfigRequest_NamespaceEnforcementMode_value = map[string]int32{
		"OptOut": 0,
		"OptIn":  1,
	}
)

func (x ClusterConfigRequest_NamespaceEnforcementMode) Enum() *ClusterConfigRequest_NamespaceEnforcementMode {
	p := new(ClusterConfigRequest_NamespaceEnforcementMode)
	*p = x
	return p
}

func (x ClusterConfigRequest_NamespaceEnforcementMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfigRequest_NamespaceEnforcementMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_platform_proto_enumTypes[5].Descriptor()
}

func (ClusterConfigRequest_NamespaceEnforcementMode) Type() protoreflect.EnumType {
	return &file_cluster_platform_proto_enumTypes[5]
}

func (x ClusterConfigRequest_NamespaceEnforcementMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfigRequest_NamespaceEnforcementMode.Descriptor instead.
func (ClusterConfigRequest_NamespaceEnforcementMode) EnumDescriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{10, 0}
}

type CreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent_id, The Group under which this Cluster resides.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Cluster is the definition of the managed cluster to create.
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClusterRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UIDP of the record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClusterDiscoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UIDP of the group to impersonate to search for clusters.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// providers is the list of providers to perform discovery on.
	Providers []Cluster_Provider `protobuf:"varint,2,rep,packed,name=providers,proto3,enum=chainguard.platform.tenant.Cluster_Provider" json:"providers,omitempty"`
	// profiles includes the set of profiles to perform discovery for,
	// which may impact eligibility (some profiles may not be supported
	// on some providers).
	Profiles []string `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// states is a collection of the states to return, or all if
	// none are specified.
	States []ClusterDiscoveryRequest_State `protobuf:"varint,4,rep,packed,name=states,proto3,enum=chainguard.platform.tenant.ClusterDiscoveryRequest_State" json:"states,omitempty"`
}

func (x *ClusterDiscoveryRequest) Reset() {
	*x = ClusterDiscoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryRequest) ProtoMessage() {}

func (x *ClusterDiscoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryRequest.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterDiscoveryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterDiscoveryRequest) GetProviders() []Cluster_Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ClusterDiscoveryRequest) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ClusterDiscoveryRequest) GetStates() []ClusterDiscoveryRequest_State {
	if x != nil {
		return x.States
	}
	return nil
}

type ClusterDiscoveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClusterDiscoveryResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ClusterDiscoveryResponse) Reset() {
	*x = ClusterDiscoveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse) ProtoMessage() {}

func (x *ClusterDiscoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterDiscoveryResponse) GetResults() []*ClusterDiscoveryResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id, The Cluster UIDP under which this Cluster resides.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// remote_id is the remote ID of this cluster.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// issuer is the identity issuer tied to this cluster.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// registered tracks the timestamp at which this cluster was registered.
	Registered *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=registered,proto3" json:"registered,omitempty"`
	// last_seen tracks the timestamp at which this cluster was last seen.
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	// version holds the Kubernetes version last reported by the cluster.
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// agent_version holds the version of the Chainguard agent last reported by the cluster.
	AgentVersion string `protobuf:"bytes,7,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// activity is a mapping from "Source" URLs to an activity record summarizing
	// recent activity from this source.
	Activity map[string]*ClusterActivity `protobuf:"bytes,8,rep,name=activity,proto3" json:"activity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// name of the cluster.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// a short description of this cluster.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// group the cluster resides in
	Group *v1.Group `protobuf:"bytes,99,opt,name=group,proto3" json:"group,omitempty"`
	// managed_name is the unique name we have given to this cluster's managed agent.
	// This field is output-only, and is populated only when this cluster is "managed".
	ManagedName string `protobuf:"bytes,100,opt,name=managed_name,json=managedName,proto3" json:"managed_name,omitempty"`
	// provider holds the flavor of cluster provider, which is used to determine how we
	// authenticate with the cluster.
	Provider Cluster_Provider `protobuf:"varint,101,opt,name=provider,proto3,enum=chainguard.platform.tenant.Cluster_Provider" json:"provider,omitempty"`
	// affinity specifies a scheduling preference for where to run the managed agent.
	// Other factors, such as the provider may be taken into account when choosing a
	// host cluster.
	Affinity Cluster_Location `protobuf:"varint,105,opt,name=affinity,proto3,enum=chainguard.platform.tenant.Cluster_Location" json:"affinity,omitempty"`
	// info contains the cluster information from the kubeconfig context.
	Info *Cluster_Info `protobuf:"bytes,102,opt,name=info,proto3" json:"info,omitempty"`
	// auth_info holds authentication details for connecting to KinD in test scenarios.
	AuthInfo *Cluster_AuthInfo `protobuf:"bytes,104,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	// status contains the managed cluster's status.
	Status *Cluster_Status `protobuf:"bytes,103,opt,name=status,proto3" json:"status,omitempty"`
	// host_cluster surfaces the opaque identifier for the Chainguard cluster hosting
	// this agent.
	HostCluster string `protobuf:"bytes,106,opt,name=host_cluster,json=hostCluster,proto3" json:"host_cluster,omitempty"`
	// profiles specifies the root set of tenant configurations that we want to run
	// on this cluster.
	Profiles []string `protobuf:"bytes,107,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// EnforcerOptions contains additional Enforcer configuration settings.
	// +optional
	EnforcerOptions *Cluster_EnforcerOptions `protobuf:"bytes,108,opt,name=enforcer_options,json=enforcerOptions,proto3,oneof" json:"enforcer_options,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Cluster) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Cluster) GetRegistered() *timestamppb.Timestamp {
	if x != nil {
		return x.Registered
	}
	return nil
}

func (x *Cluster) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Cluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cluster) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *Cluster) GetActivity() map[string]*ClusterActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetGroup() *v1.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Cluster) GetManagedName() string {
	if x != nil {
		return x.ManagedName
	}
	return ""
}

func (x *Cluster) GetProvider() Cluster_Provider {
	if x != nil {
		return x.Provider
	}
	return Cluster_UNKNOWN
}

func (x *Cluster) GetAffinity() Cluster_Location {
	if x != nil {
		return x.Affinity
	}
	return Cluster_AUTO
}

func (x *Cluster) GetInfo() *Cluster_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Cluster) GetAuthInfo() *Cluster_AuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *Cluster) GetStatus() *Cluster_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Cluster) GetHostCluster() string {
	if x != nil {
		return x.HostCluster
	}
	return ""
}

func (x *Cluster) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Cluster) GetEnforcerOptions() *Cluster_EnforcerOptions {
	if x != nil {
		return x.EnforcerOptions
	}
	return nil
}

type ClusterActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// profile is the Chainguard profile to which the source of this activity belongs.
	Profile string `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`
	// namespace is the namespace in which the source of this cluster activity lives.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// controller_name is the name of the Controller CRD which was the source of this
	// activity on the tenant cluster.
	ControllerName string `protobuf:"bytes,2,opt,name=controller_name,json=controllerName,proto3" json:"controller_name,omitempty"`
	// webhook_name is the name of the Webhook CRD which was the source of this
	// activity on the tenant cluster.
	WebhookName string `protobuf:"bytes,3,opt,name=webhook_name,json=webhookName,proto3" json:"webhook_name,omitempty"`
	// spec_hash is the hash of the Controller or Webhook CRD's spec, which forms a
	// loose form of versioning.
	SpecHash string `protobuf:"bytes,4,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	// last_seen tracks the timestamp at which this source was last active.
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *ClusterActivity) Reset() {
	*x = ClusterActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterActivity) ProtoMessage() {}

func (x *ClusterActivity) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterActivity.ProtoReflect.Descriptor instead.
func (*ClusterActivity) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterActivity) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ClusterActivity) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ClusterActivity) GetControllerName() string {
	if x != nil {
		return x.ControllerName
	}
	return ""
}

func (x *ClusterActivity) GetWebhookName() string {
	if x != nil {
		return x.WebhookName
	}
	return ""
}

func (x *ClusterActivity) GetSpecHash() string {
	if x != nil {
		return x.SpecHash
	}
	return ""
}

func (x *ClusterActivity) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type ClusterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Cluster `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ClusterList) Reset() {
	*x = ClusterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterList) ProtoMessage() {}

func (x *ClusterList) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterList.ProtoReflect.Descriptor instead.
func (*ClusterList) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterList) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

type ClusterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UID of the record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// active_since is the timestamp after which returned clusters should have been active.
	// This applies to both cluster registration and when it was "last seen".
	ActiveSince *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=active_since,json=activeSince,proto3" json:"active_since,omitempty"`
	// uidp filers records based on their position in the group hierarchy.
	Uidp *v11.UIDPFilter `protobuf:"bytes,3,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// remote_id is the remote ID of this cluster.
	RemoteId string `protobuf:"bytes,4,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// name is the exact name of the cluster.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ClusterFilter) Reset() {
	*x = ClusterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFilter) ProtoMessage() {}

func (x *ClusterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFilter.ProtoReflect.Descriptor instead.
func (*ClusterFilter) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterFilter) GetActiveSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveSince
	}
	return nil
}

func (x *ClusterFilter) GetUidp() *v11.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *ClusterFilter) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ClusterFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterProfilesRequest) Reset() {
	*x = ClusterProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterProfilesRequest) ProtoMessage() {}

func (x *ClusterProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterProfilesRequest.ProtoReflect.Descriptor instead.
func (*ClusterProfilesRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{8}
}

type ClusterProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile []*ClusterProfilesResponse_Profile `protobuf:"bytes,1,rep,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ClusterProfilesResponse) Reset() {
	*x = ClusterProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterProfilesResponse) ProtoMessage() {}

func (x *ClusterProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterProfilesResponse.ProtoReflect.Descriptor instead.
func (*ClusterProfilesResponse) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterProfilesResponse) GetProfile() []*ClusterProfilesResponse_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type ClusterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// profiles specifies the root profiles we want as part of this configuration.
	Profiles []string `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// EnforcerOptions contains additional Enforcer configuration settings.
	EnforcerOptions *ClusterConfigRequest_EnforcerOptions `protobuf:"bytes,2,opt,name=enforcer_options,json=enforcerOptions,proto3,oneof" json:"enforcer_options,omitempty"`
}

func (x *ClusterConfigRequest) Reset() {
	*x = ClusterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigRequest) ProtoMessage() {}

func (x *ClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*ClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterConfigRequest) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ClusterConfigRequest) GetEnforcerOptions() *ClusterConfigRequest_EnforcerOptions {
	if x != nil {
		return x.EnforcerOptions
	}
	return nil
}

type ClusterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpConfig    []byte `protobuf:"bytes,1,opt,name=mcp_config,json=mcpConfig,proto3" json:"mcp_config,omitempty"`
	TenantConfig []byte `protobuf:"bytes,2,opt,name=tenant_config,json=tenantConfig,proto3" json:"tenant_config,omitempty"`
	// profiles includes the full set of profiles returned (including transitive
	// dependencies of the input profiles)
	Profiles []string `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *ClusterConfigResponse) Reset() {
	*x = ClusterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigResponse) ProtoMessage() {}

func (x *ClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*ClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterConfigResponse) GetMcpConfig() []byte {
	if x != nil {
		return x.McpConfig
	}
	return nil
}

func (x *ClusterConfigResponse) GetTenantConfig() []byte {
	if x != nil {
		return x.TenantConfig
	}
	return nil
}

func (x *ClusterConfigResponse) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type ClusterCIDRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterCIDRRequest) Reset() {
	*x = ClusterCIDRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCIDRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCIDRRequest) ProtoMessage() {}

func (x *ClusterCIDRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCIDRRequest.ProtoReflect.Descriptor instead.
func (*ClusterCIDRRequest) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{12}
}

type ClusterCIDRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cidr_blocks specifies the cidr blocks enforce uses to communicate with clusters.
	CidrBlocks []string `protobuf:"bytes,1,rep,name=cidr_blocks,json=cidrBlocks,proto3" json:"cidr_blocks,omitempty"`
}

func (x *ClusterCIDRResponse) Reset() {
	*x = ClusterCIDRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCIDRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCIDRResponse) ProtoMessage() {}

func (x *ClusterCIDRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCIDRResponse.ProtoReflect.Descriptor instead.
func (*ClusterCIDRResponse) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterCIDRResponse) GetCidrBlocks() []string {
	if x != nil {
		return x.CidrBlocks
	}
	return nil
}

type ClusterDiscoveryResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider Cluster_Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=chainguard.platform.tenant.Cluster_Provider" json:"provider,omitempty"`
	Account  string           `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Location Cluster_Location `protobuf:"varint,3,opt,name=location,proto3,enum=chainguard.platform.tenant.Cluster_Location" json:"location,omitempty"`
	Name     string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to State:
	//
	//	*ClusterDiscoveryResponse_Result_Unsupported_
	//	*ClusterDiscoveryResponse_Result_NeedsWork_
	//	*ClusterDiscoveryResponse_Result_Eligible_
	//	*ClusterDiscoveryResponse_Result_Enrolled_
	State isClusterDiscoveryResponse_Result_State `protobuf_oneof:"state"`
}

func (x *ClusterDiscoveryResponse_Result) Reset() {
	*x = ClusterDiscoveryResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse_Result) ProtoMessage() {}

func (x *ClusterDiscoveryResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse_Result.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse_Result) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ClusterDiscoveryResponse_Result) GetProvider() Cluster_Provider {
	if x != nil {
		return x.Provider
	}
	return Cluster_UNKNOWN
}

func (x *ClusterDiscoveryResponse_Result) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ClusterDiscoveryResponse_Result) GetLocation() Cluster_Location {
	if x != nil {
		return x.Location
	}
	return Cluster_AUTO
}

func (x *ClusterDiscoveryResponse_Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ClusterDiscoveryResponse_Result) GetState() isClusterDiscoveryResponse_Result_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *ClusterDiscoveryResponse_Result) GetUnsupported() *ClusterDiscoveryResponse_Result_Unsupported {
	if x, ok := x.GetState().(*ClusterDiscoveryResponse_Result_Unsupported_); ok {
		return x.Unsupported
	}
	return nil
}

func (x *ClusterDiscoveryResponse_Result) GetNeedsWork() *ClusterDiscoveryResponse_Result_NeedsWork {
	if x, ok := x.GetState().(*ClusterDiscoveryResponse_Result_NeedsWork_); ok {
		return x.NeedsWork
	}
	return nil
}

func (x *ClusterDiscoveryResponse_Result) GetEligible() *ClusterDiscoveryResponse_Result_Eligible {
	if x, ok := x.GetState().(*ClusterDiscoveryResponse_Result_Eligible_); ok {
		return x.Eligible
	}
	return nil
}

func (x *ClusterDiscoveryResponse_Result) GetEnrolled() *ClusterDiscoveryResponse_Result_Enrolled {
	if x, ok := x.GetState().(*ClusterDiscoveryResponse_Result_Enrolled_); ok {
		return x.Enrolled
	}
	return nil
}

type isClusterDiscoveryResponse_Result_State interface {
	isClusterDiscoveryResponse_Result_State()
}

type ClusterDiscoveryResponse_Result_Unsupported_ struct {
	// unsupported clusters cannot be enrolled with our
	// Agentless cluster support.
	Unsupported *ClusterDiscoveryResponse_Result_Unsupported `protobuf:"bytes,10,opt,name=unsupported,proto3,oneof"`
}

type ClusterDiscoveryResponse_Result_NeedsWork_ struct {
	// needs_work clusters can be modified in some way so
	// that they are supported by our Agentless infrastructure.
	NeedsWork *ClusterDiscoveryResponse_Result_NeedsWork `protobuf:"bytes,11,opt,name=needs_work,json=needsWork,proto3,oneof"`
}

type ClusterDiscoveryResponse_Result_Eligible_ struct {
	// eligible clusters are able to be directly enrolled as
	// agentless tenants immediately.  This message contains
	// all of the information needed to enroll this cluster.
	Eligible *ClusterDiscoveryResponse_Result_Eligible `protobuf:"bytes,12,opt,name=eligible,proto3,oneof"`
}

type ClusterDiscoveryResponse_Result_Enrolled_ struct {
	// enrolled clusters are clusters that have already been
	// enrolled as agentless tenants.
	Enrolled *ClusterDiscoveryResponse_Result_Enrolled `protobuf:"bytes,13,opt,name=enrolled,proto3,oneof"`
}

func (*ClusterDiscoveryResponse_Result_Unsupported_) isClusterDiscoveryResponse_Result_State() {}

func (*ClusterDiscoveryResponse_Result_NeedsWork_) isClusterDiscoveryResponse_Result_State() {}

func (*ClusterDiscoveryResponse_Result_Eligible_) isClusterDiscoveryResponse_Result_State() {}

func (*ClusterDiscoveryResponse_Result_Enrolled_) isClusterDiscoveryResponse_Result_State() {}

type ClusterDiscoveryResponse_Result_Unsupported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reason holds the reason the cluster is not currently supported.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ClusterDiscoveryResponse_Result_Unsupported) Reset() {
	*x = ClusterDiscoveryResponse_Result_Unsupported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse_Result_Unsupported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse_Result_Unsupported) ProtoMessage() {}

func (x *ClusterDiscoveryResponse_Result_Unsupported) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse_Result_Unsupported.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse_Result_Unsupported) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *ClusterDiscoveryResponse_Result_Unsupported) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ClusterDiscoveryResponse_Result_NeedsWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// steps holds the set of changes the user needs to make in order
	// for the cluster to become eligible.
	Steps []string `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ClusterDiscoveryResponse_Result_NeedsWork) Reset() {
	*x = ClusterDiscoveryResponse_Result_NeedsWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse_Result_NeedsWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse_Result_NeedsWork) ProtoMessage() {}

func (x *ClusterDiscoveryResponse_Result_NeedsWork) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse_Result_NeedsWork.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse_Result_NeedsWork) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *ClusterDiscoveryResponse_Result_NeedsWork) GetSteps() []string {
	if x != nil {
		return x.Steps
	}
	return nil
}

type ClusterDiscoveryResponse_Result_Eligible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Cluster_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ClusterDiscoveryResponse_Result_Eligible) Reset() {
	*x = ClusterDiscoveryResponse_Result_Eligible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse_Result_Eligible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse_Result_Eligible) ProtoMessage() {}

func (x *ClusterDiscoveryResponse_Result_Eligible) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse_Result_Eligible.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse_Result_Eligible) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3, 0, 2}
}

func (x *ClusterDiscoveryResponse_Result_Eligible) GetInfo() *Cluster_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type ClusterDiscoveryResponse_Result_Enrolled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the UIDP of the tenant Cluster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// profiles contains the set of profiles that this
	// cluster was enrolled with.
	Profiles []string      `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Info     *Cluster_Info `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ClusterDiscoveryResponse_Result_Enrolled) Reset() {
	*x = ClusterDiscoveryResponse_Result_Enrolled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDiscoveryResponse_Result_Enrolled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDiscoveryResponse_Result_Enrolled) ProtoMessage() {}

func (x *ClusterDiscoveryResponse_Result_Enrolled) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDiscoveryResponse_Result_Enrolled.ProtoReflect.Descriptor instead.
func (*ClusterDiscoveryResponse_Result_Enrolled) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{3, 0, 3}
}

func (x *ClusterDiscoveryResponse_Result_Enrolled) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterDiscoveryResponse_Result_Enrolled) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ClusterDiscoveryResponse_Result_Enrolled) GetInfo() *Cluster_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Cluster_EnforcerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	WebhookFailOpen *bool `protobuf:"varint,1,opt,name=webhook_fail_open,json=webhookFailOpen,proto3,oneof" json:"webhook_fail_open,omitempty"`
	// +optional
	EnableCipCache *bool `protobuf:"varint,2,opt,name=enable_cip_cache,json=enableCipCache,proto3,oneof" json:"enable_cip_cache,omitempty"`
	// +optional
	NamespaceEnforcementMode *Cluster_NamespaceEnforcementMode `protobuf:"varint,3,opt,name=namespace_enforcement_mode,json=namespaceEnforcementMode,proto3,enum=chainguard.platform.tenant.Cluster_NamespaceEnforcementMode,oneof" json:"namespace_enforcement_mode,omitempty"`
}

func (x *Cluster_EnforcerOptions) Reset() {
	*x = Cluster_EnforcerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_EnforcerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_EnforcerOptions) ProtoMessage() {}

func (x *Cluster_EnforcerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_EnforcerOptions.ProtoReflect.Descriptor instead.
func (*Cluster_EnforcerOptions) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Cluster_EnforcerOptions) GetWebhookFailOpen() bool {
	if x != nil && x.WebhookFailOpen != nil {
		return *x.WebhookFailOpen
	}
	return false
}

func (x *Cluster_EnforcerOptions) GetEnableCipCache() bool {
	if x != nil && x.EnableCipCache != nil {
		return *x.EnableCipCache
	}
	return false
}

func (x *Cluster_EnforcerOptions) GetNamespaceEnforcementMode() Cluster_NamespaceEnforcementMode {
	if x != nil && x.NamespaceEnforcementMode != nil {
		return *x.NamespaceEnforcementMode
	}
	return Cluster_OptOut
}

// This is based off of k8s.io/client-go/tools/clientcmd/api/v1.Cluster
// This can be extracted from kubectl for a named cluster (replace CLUSTER_NAME) with:
//
//	kubectl config view \
//	  --flatten -o jsonpath='{.clusters[?(@.name == "CLUSTER_NAME")].cluster}'
type Cluster_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server is the address of the kubernetes cluster (https://hostname:port).
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// CertificateAuthorityData contains PEM-encoded certificate authority certificates.
	// Overrides CertificateAuthority
	CertificateAuthorityData []byte `protobuf:"bytes,5,opt,name=CertificateAuthorityData,proto3" json:"CertificateAuthorityData,omitempty"`
}

func (x *Cluster_Info) Reset() {
	*x = Cluster_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Info) ProtoMessage() {}

func (x *Cluster_Info) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Info.ProtoReflect.Descriptor instead.
func (*Cluster_Info) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Cluster_Info) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Cluster_Info) GetCertificateAuthorityData() []byte {
	if x != nil {
		return x.CertificateAuthorityData
	}
	return nil
}

// This is based off of k8s.io/client-go/tools/clientcmd/api/v1.AuthInfo
// This should only ever be used with KinD clusters during testing, it WILL
// NOT be stored securely.
type Cluster_AuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_certificate_data contains PEM-encoded data from a client cert file for TLS.
	ClientCertificateData []byte `protobuf:"bytes,2,opt,name=client_certificate_data,json=clientCertificateData,proto3" json:"client_certificate_data,omitempty"`
	// client_key_data contains PEM-encoded data from a client key file for TLS.
	ClientKeyData []byte `protobuf:"bytes,4,opt,name=client_key_data,json=clientKeyData,proto3" json:"client_key_data,omitempty"`
}

func (x *Cluster_AuthInfo) Reset() {
	*x = Cluster_AuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_AuthInfo) ProtoMessage() {}

func (x *Cluster_AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_AuthInfo.ProtoReflect.Descriptor instead.
func (*Cluster_AuthInfo) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Cluster_AuthInfo) GetClientCertificateData() []byte {
	if x != nil {
		return x.ClientCertificateData
	}
	return nil
}

func (x *Cluster_AuthInfo) GetClientKeyData() []byte {
	if x != nil {
		return x.ClientKeyData
	}
	return nil
}

type Cluster_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready   Cluster_Status_State `protobuf:"varint,1,opt,name=ready,proto3,enum=chainguard.platform.tenant.Cluster_Status_State" json:"ready,omitempty"`
	Reason  string               `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Cluster_Status) Reset() {
	*x = Cluster_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Status) ProtoMessage() {}

func (x *Cluster_Status) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Status.ProtoReflect.Descriptor instead.
func (*Cluster_Status) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Cluster_Status) GetReady() Cluster_Status_State {
	if x != nil {
		return x.Ready
	}
	return Cluster_Status_UNKNOWN
}

func (x *Cluster_Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Cluster_Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ClusterProfilesResponse_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Dependencies []string `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ClusterProfilesResponse_Profile) Reset() {
	*x = ClusterProfilesResponse_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterProfilesResponse_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterProfilesResponse_Profile) ProtoMessage() {}

func (x *ClusterProfilesResponse_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterProfilesResponse_Profile.ProtoReflect.Descriptor instead.
func (*ClusterProfilesResponse_Profile) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ClusterProfilesResponse_Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterProfilesResponse_Profile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterProfilesResponse_Profile) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ClusterConfigRequest_EnforcerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	WebhookFailOpen *bool `protobuf:"varint,1,opt,name=webhook_fail_open,json=webhookFailOpen,proto3,oneof" json:"webhook_fail_open,omitempty"`
	// +optional
	EnableCipCache *bool `protobuf:"varint,2,opt,name=enable_cip_cache,json=enableCipCache,proto3,oneof" json:"enable_cip_cache,omitempty"`
	// +optional
	NamespaceEnforcementMode *ClusterConfigRequest_NamespaceEnforcementMode `protobuf:"varint,3,opt,name=namespace_enforcement_mode,json=namespaceEnforcementMode,proto3,enum=chainguard.platform.tenant.ClusterConfigRequest_NamespaceEnforcementMode,oneof" json:"namespace_enforcement_mode,omitempty"`
}

func (x *ClusterConfigRequest_EnforcerOptions) Reset() {
	*x = ClusterConfigRequest_EnforcerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_platform_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigRequest_EnforcerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigRequest_EnforcerOptions) ProtoMessage() {}

func (x *ClusterConfigRequest_EnforcerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_platform_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigRequest_EnforcerOptions.ProtoReflect.Descriptor instead.
func (*ClusterConfigRequest_EnforcerOptions) Descriptor() ([]byte, []int) {
	return file_cluster_platform_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ClusterConfigRequest_EnforcerOptions) GetWebhookFailOpen() bool {
	if x != nil && x.WebhookFailOpen != nil {
		return *x.WebhookFailOpen
	}
	return false
}

func (x *ClusterConfigRequest_EnforcerOptions) GetEnableCipCache() bool {
	if x != nil && x.EnableCipCache != nil {
		return *x.EnableCipCache
	}
	return false
}

func (x *ClusterConfigRequest_EnforcerOptions) GetNamespaceEnforcementMode() ClusterConfigRequest_NamespaceEnforcementMode {
	if x != nil && x.NamespaceEnforcementMode != nil {
		return *x.NamespaceEnforcementMode
	}
	return ClusterConfigRequest_OptOut
}

var File_cluster_platform_proto protoreflect.FileDescriptor

var file_cluster_platform_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8,
	0xd2, 0x05, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x02, 0x0a,
	0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0xee,
	0x07, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0xfa, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6b, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x57, 0x6f, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x08, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x25, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x21, 0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x48, 0x0a, 0x08, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x1a, 0x74, 0x0a, 0x08, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xf7, 0x0f, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x90, 0xaf, 0xa8, 0xd2, 0x05, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3c,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a,
	0x68, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbc, 0x02, 0x0a, 0x0f, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a,
	0x11, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a,
	0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x02, 0x52, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x6a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0xb1, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x02, 0x22, 0x31, 0x0a, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x10, 0x01, 0x22, 0x5b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b, 0x53,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x10,
	0x0a, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x53, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50,
	0x50, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49,
	0x4e, 0x44, 0x10, 0x64, 0x22, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x53, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x5f, 0x57, 0x45,
	0x53, 0x54, 0x10, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x48, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49,
	0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x75, 0x69, 0x64, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x18, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x63, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x22, 0xb9, 0x04, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xca, 0x02, 0x0a, 0x0f, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x11,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x8c, 0x01, 0x0a,
	0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x49, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x18,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x70,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x10, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x13,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x32, 0x8e, 0x0a, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xdf, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x22, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0xf5, 0x03, 0x91, 0x03, 0xc2, 0xf0, 0x8e, 0xfc, 0x0b, 0x37, 0x0a, 0x2c, 0x64, 0x65,
	0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x12, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x8a, 0xaf, 0xa8,
	0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xf8, 0x03, 0xc2, 0xf0, 0x8e, 0xfc, 0x0b, 0x37, 0x0a,
	0x2c, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x12, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xaf,
	0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x04, 0xf9, 0x03, 0xf7, 0x03, 0x12, 0x85, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02,
	0xf7, 0x03, 0x10, 0x01, 0x12, 0xc3, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x1a, 0x1b, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x01,
	0x2a, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x06, 0x12, 0x04, 0x0a, 0x02, 0xf6, 0x03, 0xc2, 0xf0, 0x8e,
	0xfc, 0x0b, 0x37, 0x0a, 0x2c, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x12, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x12, 0x7d, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x02, 0x12, 0x00, 0x12, 0x77, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x02,
	0x12, 0x00, 0x12, 0x71, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x49, 0x44, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x49, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xaf, 0xa8,
	0xd2, 0x05, 0x02, 0x12, 0x00, 0x42, 0x72, 0x0a, 0x25, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x1a,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cluster_platform_proto_rawDescOnce sync.Once
	file_cluster_platform_proto_rawDescData = file_cluster_platform_proto_rawDesc
)

func file_cluster_platform_proto_rawDescGZIP() []byte {
	file_cluster_platform_proto_rawDescOnce.Do(func() {
		file_cluster_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_cluster_platform_proto_rawDescData)
	})
	return file_cluster_platform_proto_rawDescData
}

var file_cluster_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cluster_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_cluster_platform_proto_goTypes = []interface{}{
	(ClusterDiscoveryRequest_State)(0),                  // 0: chainguard.platform.tenant.ClusterDiscoveryRequest.State
	(Cluster_NamespaceEnforcementMode)(0),               // 1: chainguard.platform.tenant.Cluster.NamespaceEnforcementMode
	(Cluster_Provider)(0),                               // 2: chainguard.platform.tenant.Cluster.Provider
	(Cluster_Location)(0),                               // 3: chainguard.platform.tenant.Cluster.Location
	(Cluster_Status_State)(0),                           // 4: chainguard.platform.tenant.Cluster.Status.State
	(ClusterConfigRequest_NamespaceEnforcementMode)(0),  // 5: chainguard.platform.tenant.ClusterConfigRequest.NamespaceEnforcementMode
	(*CreateClusterRequest)(nil),                        // 6: chainguard.platform.tenant.CreateClusterRequest
	(*DeleteClusterRequest)(nil),                        // 7: chainguard.platform.tenant.DeleteClusterRequest
	(*ClusterDiscoveryRequest)(nil),                     // 8: chainguard.platform.tenant.ClusterDiscoveryRequest
	(*ClusterDiscoveryResponse)(nil),                    // 9: chainguard.platform.tenant.ClusterDiscoveryResponse
	(*Cluster)(nil),                                     // 10: chainguard.platform.tenant.Cluster
	(*ClusterActivity)(nil),                             // 11: chainguard.platform.tenant.ClusterActivity
	(*ClusterList)(nil),                                 // 12: chainguard.platform.tenant.ClusterList
	(*ClusterFilter)(nil),                               // 13: chainguard.platform.tenant.ClusterFilter
	(*ClusterProfilesRequest)(nil),                      // 14: chainguard.platform.tenant.ClusterProfilesRequest
	(*ClusterProfilesResponse)(nil),                     // 15: chainguard.platform.tenant.ClusterProfilesResponse
	(*ClusterConfigRequest)(nil),                        // 16: chainguard.platform.tenant.ClusterConfigRequest
	(*ClusterConfigResponse)(nil),                       // 17: chainguard.platform.tenant.ClusterConfigResponse
	(*ClusterCIDRRequest)(nil),                          // 18: chainguard.platform.tenant.ClusterCIDRRequest
	(*ClusterCIDRResponse)(nil),                         // 19: chainguard.platform.tenant.ClusterCIDRResponse
	(*ClusterDiscoveryResponse_Result)(nil),             // 20: chainguard.platform.tenant.ClusterDiscoveryResponse.Result
	(*ClusterDiscoveryResponse_Result_Unsupported)(nil), // 21: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Unsupported
	(*ClusterDiscoveryResponse_Result_NeedsWork)(nil),   // 22: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.NeedsWork
	(*ClusterDiscoveryResponse_Result_Eligible)(nil),    // 23: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Eligible
	(*ClusterDiscoveryResponse_Result_Enrolled)(nil),    // 24: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Enrolled
	nil,                                          // 25: chainguard.platform.tenant.Cluster.ActivityEntry
	(*Cluster_EnforcerOptions)(nil),              // 26: chainguard.platform.tenant.Cluster.EnforcerOptions
	(*Cluster_Info)(nil),                         // 27: chainguard.platform.tenant.Cluster.Info
	(*Cluster_AuthInfo)(nil),                     // 28: chainguard.platform.tenant.Cluster.AuthInfo
	(*Cluster_Status)(nil),                       // 29: chainguard.platform.tenant.Cluster.Status
	(*ClusterProfilesResponse_Profile)(nil),      // 30: chainguard.platform.tenant.ClusterProfilesResponse.Profile
	(*ClusterConfigRequest_EnforcerOptions)(nil), // 31: chainguard.platform.tenant.ClusterConfigRequest.EnforcerOptions
	(*timestamppb.Timestamp)(nil),                // 32: google.protobuf.Timestamp
	(*v1.Group)(nil),                             // 33: chainguard.platform.iam.Group
	(*v11.UIDPFilter)(nil),                       // 34: chainguard.platform.common.UIDPFilter
	(*emptypb.Empty)(nil),                        // 35: google.protobuf.Empty
}
var file_cluster_platform_proto_depIdxs = []int32{
	10, // 0: chainguard.platform.tenant.CreateClusterRequest.cluster:type_name -> chainguard.platform.tenant.Cluster
	2,  // 1: chainguard.platform.tenant.ClusterDiscoveryRequest.providers:type_name -> chainguard.platform.tenant.Cluster.Provider
	0,  // 2: chainguard.platform.tenant.ClusterDiscoveryRequest.states:type_name -> chainguard.platform.tenant.ClusterDiscoveryRequest.State
	20, // 3: chainguard.platform.tenant.ClusterDiscoveryResponse.results:type_name -> chainguard.platform.tenant.ClusterDiscoveryResponse.Result
	32, // 4: chainguard.platform.tenant.Cluster.registered:type_name -> google.protobuf.Timestamp
	32, // 5: chainguard.platform.tenant.Cluster.last_seen:type_name -> google.protobuf.Timestamp
	25, // 6: chainguard.platform.tenant.Cluster.activity:type_name -> chainguard.platform.tenant.Cluster.ActivityEntry
	33, // 7: chainguard.platform.tenant.Cluster.group:type_name -> chainguard.platform.iam.Group
	2,  // 8: chainguard.platform.tenant.Cluster.provider:type_name -> chainguard.platform.tenant.Cluster.Provider
	3,  // 9: chainguard.platform.tenant.Cluster.affinity:type_name -> chainguard.platform.tenant.Cluster.Location
	27, // 10: chainguard.platform.tenant.Cluster.info:type_name -> chainguard.platform.tenant.Cluster.Info
	28, // 11: chainguard.platform.tenant.Cluster.auth_info:type_name -> chainguard.platform.tenant.Cluster.AuthInfo
	29, // 12: chainguard.platform.tenant.Cluster.status:type_name -> chainguard.platform.tenant.Cluster.Status
	26, // 13: chainguard.platform.tenant.Cluster.enforcer_options:type_name -> chainguard.platform.tenant.Cluster.EnforcerOptions
	32, // 14: chainguard.platform.tenant.ClusterActivity.last_seen:type_name -> google.protobuf.Timestamp
	10, // 15: chainguard.platform.tenant.ClusterList.items:type_name -> chainguard.platform.tenant.Cluster
	32, // 16: chainguard.platform.tenant.ClusterFilter.active_since:type_name -> google.protobuf.Timestamp
	34, // 17: chainguard.platform.tenant.ClusterFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	30, // 18: chainguard.platform.tenant.ClusterProfilesResponse.profile:type_name -> chainguard.platform.tenant.ClusterProfilesResponse.Profile
	31, // 19: chainguard.platform.tenant.ClusterConfigRequest.enforcer_options:type_name -> chainguard.platform.tenant.ClusterConfigRequest.EnforcerOptions
	2,  // 20: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.provider:type_name -> chainguard.platform.tenant.Cluster.Provider
	3,  // 21: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.location:type_name -> chainguard.platform.tenant.Cluster.Location
	21, // 22: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.unsupported:type_name -> chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Unsupported
	22, // 23: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.needs_work:type_name -> chainguard.platform.tenant.ClusterDiscoveryResponse.Result.NeedsWork
	23, // 24: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.eligible:type_name -> chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Eligible
	24, // 25: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.enrolled:type_name -> chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Enrolled
	27, // 26: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Eligible.info:type_name -> chainguard.platform.tenant.Cluster.Info
	27, // 27: chainguard.platform.tenant.ClusterDiscoveryResponse.Result.Enrolled.info:type_name -> chainguard.platform.tenant.Cluster.Info
	11, // 28: chainguard.platform.tenant.Cluster.ActivityEntry.value:type_name -> chainguard.platform.tenant.ClusterActivity
	1,  // 29: chainguard.platform.tenant.Cluster.EnforcerOptions.namespace_enforcement_mode:type_name -> chainguard.platform.tenant.Cluster.NamespaceEnforcementMode
	4,  // 30: chainguard.platform.tenant.Cluster.Status.ready:type_name -> chainguard.platform.tenant.Cluster.Status.State
	5,  // 31: chainguard.platform.tenant.ClusterConfigRequest.EnforcerOptions.namespace_enforcement_mode:type_name -> chainguard.platform.tenant.ClusterConfigRequest.NamespaceEnforcementMode
	6,  // 32: chainguard.platform.tenant.Clusters.Create:input_type -> chainguard.platform.tenant.CreateClusterRequest
	7,  // 33: chainguard.platform.tenant.Clusters.Delete:input_type -> chainguard.platform.tenant.DeleteClusterRequest
	8,  // 34: chainguard.platform.tenant.Clusters.Discover:input_type -> chainguard.platform.tenant.ClusterDiscoveryRequest
	13, // 35: chainguard.platform.tenant.Clusters.List:input_type -> chainguard.platform.tenant.ClusterFilter
	10, // 36: chainguard.platform.tenant.Clusters.Update:input_type -> chainguard.platform.tenant.Cluster
	14, // 37: chainguard.platform.tenant.Clusters.Profiles:input_type -> chainguard.platform.tenant.ClusterProfilesRequest
	16, // 38: chainguard.platform.tenant.Clusters.Config:input_type -> chainguard.platform.tenant.ClusterConfigRequest
	18, // 39: chainguard.platform.tenant.Clusters.CIDR:input_type -> chainguard.platform.tenant.ClusterCIDRRequest
	10, // 40: chainguard.platform.tenant.Clusters.Create:output_type -> chainguard.platform.tenant.Cluster
	35, // 41: chainguard.platform.tenant.Clusters.Delete:output_type -> google.protobuf.Empty
	9,  // 42: chainguard.platform.tenant.Clusters.Discover:output_type -> chainguard.platform.tenant.ClusterDiscoveryResponse
	12, // 43: chainguard.platform.tenant.Clusters.List:output_type -> chainguard.platform.tenant.ClusterList
	10, // 44: chainguard.platform.tenant.Clusters.Update:output_type -> chainguard.platform.tenant.Cluster
	15, // 45: chainguard.platform.tenant.Clusters.Profiles:output_type -> chainguard.platform.tenant.ClusterProfilesResponse
	17, // 46: chainguard.platform.tenant.Clusters.Config:output_type -> chainguard.platform.tenant.ClusterConfigResponse
	19, // 47: chainguard.platform.tenant.Clusters.CIDR:output_type -> chainguard.platform.tenant.ClusterCIDRResponse
	40, // [40:48] is the sub-list for method output_type
	32, // [32:40] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_cluster_platform_proto_init() }
func file_cluster_platform_proto_init() {
	if File_cluster_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cluster_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCIDRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCIDRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse_Result_Unsupported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse_Result_NeedsWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse_Result_Eligible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDiscoveryResponse_Result_Enrolled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_EnforcerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_AuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterProfilesResponse_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_platform_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigRequest_EnforcerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cluster_platform_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cluster_platform_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cluster_platform_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ClusterDiscoveryResponse_Result_Unsupported_)(nil),
		(*ClusterDiscoveryResponse_Result_NeedsWork_)(nil),
		(*ClusterDiscoveryResponse_Result_Eligible_)(nil),
		(*ClusterDiscoveryResponse_Result_Enrolled_)(nil),
	}
	file_cluster_platform_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_cluster_platform_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cluster_platform_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cluster_platform_proto_goTypes,
		DependencyIndexes: file_cluster_platform_proto_depIdxs,
		EnumInfos:         file_cluster_platform_proto_enumTypes,
		MessageInfos:      file_cluster_platform_proto_msgTypes,
	}.Build()
	File_cluster_platform_proto = out.File
	file_cluster_platform_proto_rawDesc = nil
	file_cluster_platform_proto_goTypes = nil
	file_cluster_platform_proto_depIdxs = nil
}
