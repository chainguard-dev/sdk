// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: attestation.platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Attestations_List_FullMethodName = "/chainguard.platform.tenant.Attestations/List"
)

// AttestationsClient is the client API for Attestations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationsClient interface {
	List(ctx context.Context, in *AttestationFilter, opts ...grpc.CallOption) (*AttestationList, error)
}

type attestationsClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationsClient(cc grpc.ClientConnInterface) AttestationsClient {
	return &attestationsClient{cc}
}

func (c *attestationsClient) List(ctx context.Context, in *AttestationFilter, opts ...grpc.CallOption) (*AttestationList, error) {
	out := new(AttestationList)
	err := c.cc.Invoke(ctx, Attestations_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationsServer is the server API for Attestations service.
// All implementations must embed UnimplementedAttestationsServer
// for forward compatibility
type AttestationsServer interface {
	List(context.Context, *AttestationFilter) (*AttestationList, error)
	mustEmbedUnimplementedAttestationsServer()
}

// UnimplementedAttestationsServer must be embedded to have forward compatible implementations.
type UnimplementedAttestationsServer struct {
}

func (UnimplementedAttestationsServer) List(context.Context, *AttestationFilter) (*AttestationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAttestationsServer) mustEmbedUnimplementedAttestationsServer() {}

// UnsafeAttestationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationsServer will
// result in compilation errors.
type UnsafeAttestationsServer interface {
	mustEmbedUnimplementedAttestationsServer()
}

func RegisterAttestationsServer(s grpc.ServiceRegistrar, srv AttestationsServer) {
	s.RegisterService(&Attestations_ServiceDesc, srv)
}

func _Attestations_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attestations_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationsServer).List(ctx, req.(*AttestationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// Attestations_ServiceDesc is the grpc.ServiceDesc for Attestations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attestations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainguard.platform.tenant.Attestations",
	HandlerType: (*AttestationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Attestations_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation.platform.proto",
}
