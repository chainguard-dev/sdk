// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: vuln.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v1 "chainguard.dev/sdk/proto/platform/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VulnerabilityRecord_Severity int32

const (
	VulnerabilityRecord_UNKNOWN  VulnerabilityRecord_Severity = 0
	VulnerabilityRecord_LOW      VulnerabilityRecord_Severity = 1
	VulnerabilityRecord_MEDIUM   VulnerabilityRecord_Severity = 2
	VulnerabilityRecord_HIGH     VulnerabilityRecord_Severity = 3
	VulnerabilityRecord_CRITICAL VulnerabilityRecord_Severity = 4
)

// Enum value maps for VulnerabilityRecord_Severity.
var (
	VulnerabilityRecord_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
		4: "CRITICAL",
	}
	VulnerabilityRecord_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"LOW":      1,
		"MEDIUM":   2,
		"HIGH":     3,
		"CRITICAL": 4,
	}
)

func (x VulnerabilityRecord_Severity) Enum() *VulnerabilityRecord_Severity {
	p := new(VulnerabilityRecord_Severity)
	*p = x
	return p
}

func (x VulnerabilityRecord_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilityRecord_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_vuln_platform_proto_enumTypes[0].Descriptor()
}

func (VulnerabilityRecord_Severity) Type() protoreflect.EnumType {
	return &file_vuln_platform_proto_enumTypes[0]
}

func (x VulnerabilityRecord_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilityRecord_Severity.Descriptor instead.
func (VulnerabilityRecord_Severity) EnumDescriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{3, 0}
}

type Fix_State int32

const (
	Fix_UNKNOWN   Fix_State = 0
	Fix_FIXED     Fix_State = 1
	Fix_NOT_FIXED Fix_State = 2
	Fix_WONT_FIX  Fix_State = 3
)

// Enum value maps for Fix_State.
var (
	Fix_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIXED",
		2: "NOT_FIXED",
		3: "WONT_FIX",
	}
	Fix_State_value = map[string]int32{
		"UNKNOWN":   0,
		"FIXED":     1,
		"NOT_FIXED": 2,
		"WONT_FIX":  3,
	}
)

func (x Fix_State) Enum() *Fix_State {
	p := new(Fix_State)
	*p = x
	return p
}

func (x Fix_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fix_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vuln_platform_proto_enumTypes[1].Descriptor()
}

func (Fix_State) Type() protoreflect.EnumType {
	return &file_vuln_platform_proto_enumTypes[1]
}

func (x Fix_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fix_State.Descriptor instead.
func (Fix_State) EnumDescriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{4, 0}
}

type VulnReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id, The VulnReport UIDP at which this VulnReport resides.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// vulnerability_db_last_build_time holds the time when the vulnerability database was built last time.
	VulnerabilityDbLastBuildTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=vulnerability_db_last_build_time,json=vulnerabilityDbLastBuildTime,proto3" json:"vulnerability_db_last_build_time,omitempty"`
	// Report's list of vulnerability matches(s).
	VulnerabilityMatches []*VulnerabilityMatch `protobuf:"bytes,3,rep,name=vulnerability_matches,json=vulnerabilityMatches,proto3" json:"vulnerability_matches,omitempty"`
	// scanner contains some information about the scanner used to generate the report.
	Scanner *Scanner `protobuf:"bytes,4,opt,name=scanner,proto3" json:"scanner,omitempty"`
	// report_generation tracks the timestamp at which this report was generated.
	ReportGeneration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=report_generation,json=reportGeneration,proto3" json:"report_generation,omitempty"`
	// raw_vuln_report may or may not be useful in the long term, but for now to make
	// progress on this, we'll just yolo and serialize it here.
	RawVulnReport []byte `protobuf:"bytes,6,opt,name=raw_vuln_report,json=rawVulnReport,proto3" json:"raw_vuln_report,omitempty"`
	// last_seen tracks the timestamp at which this vuln report was last seen.
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *VulnReport) Reset() {
	*x = VulnReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReport) ProtoMessage() {}

func (x *VulnReport) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReport.ProtoReflect.Descriptor instead.
func (*VulnReport) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{0}
}

func (x *VulnReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnReport) GetVulnerabilityDbLastBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VulnerabilityDbLastBuildTime
	}
	return nil
}

func (x *VulnReport) GetVulnerabilityMatches() []*VulnerabilityMatch {
	if x != nil {
		return x.VulnerabilityMatches
	}
	return nil
}

func (x *VulnReport) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *VulnReport) GetReportGeneration() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportGeneration
	}
	return nil
}

func (x *VulnReport) GetRawVulnReport() []byte {
	if x != nil {
		return x.RawVulnReport
	}
	return nil
}

func (x *VulnReport) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type Scanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name contains the vendor name of the scanner.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version holds the version of the used scanner to generate the report.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{1}
}

func (x *Scanner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scanner) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VulnerabilityMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vulnerability holds information about the found vulnerability.
	Vulnerability *VulnerabilityRecord `protobuf:"bytes,1,opt,name=vulnerability,proto3" json:"vulnerability,omitempty"`
	// Package affected by this vulnerability.
	Pkg *Package2 `protobuf:"bytes,2,opt,name=pkg,proto3" json:"pkg,omitempty"`
	// Fix related data about this vulnerability.
	Fix *Fix `protobuf:"bytes,3,opt,name=fix,proto3,oneof" json:"fix,omitempty"`
}

func (x *VulnerabilityMatch) Reset() {
	*x = VulnerabilityMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityMatch) ProtoMessage() {}

func (x *VulnerabilityMatch) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityMatch.ProtoReflect.Descriptor instead.
func (*VulnerabilityMatch) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{2}
}

func (x *VulnerabilityMatch) GetVulnerability() *VulnerabilityRecord {
	if x != nil {
		return x.Vulnerability
	}
	return nil
}

func (x *VulnerabilityMatch) GetPkg() *Package2 {
	if x != nil {
		return x.Pkg
	}
	return nil
}

func (x *VulnerabilityMatch) GetFix() *Fix {
	if x != nil {
		return x.Fix
	}
	return nil
}

type VulnerabilityRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the vulnerability e.g. CVE_1231-12.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// a short description of this vulnerability.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// severity is the value representing the severity of the vulnerability
	Severity VulnerabilityRecord_Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=chainguard.platform.tenant.VulnerabilityRecord_Severity" json:"severity,omitempty"`
	// source from where the vulnerability information was obtained, e.g. nvd, github, osv.
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// List of cvss information about the exploitability of the vulnerability.
	Cvss []*VulnerabilityRecord_Cvss `protobuf:"bytes,5,rep,name=cvss,proto3" json:"cvss,omitempty"`
	// List of cpe_uri on which the vulnerability was found.
	CpeUri []string `protobuf:"bytes,6,rep,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// URLs related to this vulnerability.
	RelatedUrls []string `protobuf:"bytes,7,rep,name=related_urls,json=relatedUrls,proto3" json:"related_urls,omitempty"`
	// advisories related to this vulnerability.
	Advisories map[string]string `protobuf:"bytes,8,rep,name=advisories,proto3" json:"advisories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// related vulnerabilities to the main vulnerability reported here.
	RelatedVulnerabilities []*VulnerabilityRecord_RelatedVulnerability `protobuf:"bytes,9,rep,name=related_vulnerabilities,json=relatedVulnerabilities,proto3" json:"related_vulnerabilities,omitempty"`
	// display_id is the normalized value of the vulnerability ID often defined by a CVE-ID.
	DisplayId string `protobuf:"bytes,10,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`
}

func (x *VulnerabilityRecord) Reset() {
	*x = VulnerabilityRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRecord) ProtoMessage() {}

func (x *VulnerabilityRecord) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRecord.ProtoReflect.Descriptor instead.
func (*VulnerabilityRecord) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{3}
}

func (x *VulnerabilityRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnerabilityRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VulnerabilityRecord) GetSeverity() VulnerabilityRecord_Severity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilityRecord_UNKNOWN
}

func (x *VulnerabilityRecord) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *VulnerabilityRecord) GetCvss() []*VulnerabilityRecord_Cvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *VulnerabilityRecord) GetCpeUri() []string {
	if x != nil {
		return x.CpeUri
	}
	return nil
}

func (x *VulnerabilityRecord) GetRelatedUrls() []string {
	if x != nil {
		return x.RelatedUrls
	}
	return nil
}

func (x *VulnerabilityRecord) GetAdvisories() map[string]string {
	if x != nil {
		return x.Advisories
	}
	return nil
}

func (x *VulnerabilityRecord) GetRelatedVulnerabilities() []*VulnerabilityRecord_RelatedVulnerability {
	if x != nil {
		return x.RelatedVulnerabilities
	}
	return nil
}

func (x *VulnerabilityRecord) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

type Fix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of in versions of the package on which the vulnerability has been solved.
	Versions []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// state reflects the state of the fix, e.g. fixed, unknown, not-fixed, won't-fix.
	State Fix_State `protobuf:"varint,2,opt,name=state,proto3,enum=chainguard.platform.tenant.Fix_State" json:"state,omitempty"`
}

func (x *Fix) Reset() {
	*x = Fix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fix) ProtoMessage() {}

func (x *Fix) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fix.ProtoReflect.Descriptor instead.
func (*Fix) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{4}
}

func (x *Fix) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Fix) GetState() Fix_State {
	if x != nil {
		return x.State
	}
	return Fix_UNKNOWN
}

type VulnReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VulnReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VulnReportList) Reset() {
	*x = VulnReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReportList) ProtoMessage() {}

func (x *VulnReportList) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReportList.ProtoReflect.Descriptor instead.
func (*VulnReportList) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{5}
}

func (x *VulnReportList) GetItems() []*VulnReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type VulnReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the exact UID of the record.
	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uidp *v1.UIDPFilter `protobuf:"bytes,2,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// active_since is the timestamp after which the records should
	// have last been observed in the returned context.
	ActiveSince *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=active_since,json=activeSince,proto3" json:"active_since,omitempty"`
	// include_raw_vuln_report is a flag to return a list of reports containing the raw report.
	IncludeRawVulnReport bool `protobuf:"varint,6,opt,name=include_raw_vuln_report,json=includeRawVulnReport,proto3" json:"include_raw_vuln_report,omitempty"`
}

func (x *VulnReportFilter) Reset() {
	*x = VulnReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReportFilter) ProtoMessage() {}

func (x *VulnReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReportFilter.ProtoReflect.Descriptor instead.
func (*VulnReportFilter) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{6}
}

func (x *VulnReportFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnReportFilter) GetUidp() *v1.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *VulnReportFilter) GetActiveSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveSince
	}
	return nil
}

func (x *VulnReportFilter) GetIncludeRawVulnReport() bool {
	if x != nil {
		return x.IncludeRawVulnReport
	}
	return false
}

type VulnerabilityRecord_Cvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	Score string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	// CVSS version used to populate score and severity.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VulnerabilityRecord_Cvss) Reset() {
	*x = VulnerabilityRecord_Cvss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityRecord_Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRecord_Cvss) ProtoMessage() {}

func (x *VulnerabilityRecord_Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRecord_Cvss.ProtoReflect.Descriptor instead.
func (*VulnerabilityRecord_Cvss) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{3, 0}
}

func (x *VulnerabilityRecord_Cvss) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *VulnerabilityRecord_Cvss) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VulnerabilityRecord_RelatedVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the vulnerability.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source from where the vulnerability information was obtained, e.g. nvd, github, osv.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *VulnerabilityRecord_RelatedVulnerability) Reset() {
	*x = VulnerabilityRecord_RelatedVulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vuln_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityRecord_RelatedVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRecord_RelatedVulnerability) ProtoMessage() {}

func (x *VulnerabilityRecord_RelatedVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_vuln_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRecord_RelatedVulnerability.ProtoReflect.Descriptor instead.
func (*VulnerabilityRecord_RelatedVulnerability) Descriptor() ([]byte, []int) {
	return file_vuln_platform_proto_rawDescGZIP(), []int{3, 2}
}

func (x *VulnerabilityRecord_RelatedVulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnerabilityRecord_RelatedVulnerability) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

var File_vuln_platform_proto protoreflect.FileDescriptor

var file_vuln_platform_proto_rawDesc = []byte{
	0x0a, 0x13, 0x76, 0x75, 0x6c, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x64,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x73, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x20, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x62, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x62, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x14, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x75, 0x6c,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x72, 0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x37, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xe3, 0x01, 0x0a, 0x12, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x03, 0x70, 0x6b, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x32,
	0x52, 0x03, 0x70, 0x6b, 0x67, 0x12, 0x36, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x78, 0x48, 0x00, 0x52, 0x03, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x66, 0x69, 0x78, 0x22, 0xb7, 0x06, 0x0a, 0x13, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x76, 0x73,
	0x73, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x16, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x1a, 0x36, 0x0a, 0x04, 0x43, 0x76, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x14, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x22,
	0x9c, 0x01, 0x0a, 0x03, 0x46, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x4f, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x10, 0x03, 0x22, 0x4e,
	0x0a, 0x0e, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe0,
	0x01, 0x0a, 0x10, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x49, 0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x75, 0x69, 0x64, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x75,
	0x6c, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x61, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x32, 0x9e, 0x01, 0x0a, 0x0b, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x8e, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x8a, 0xaf, 0xa8, 0xd2, 0x05, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x94, 0x05,
	0x10, 0x01, 0x42, 0x6f, 0x0a, 0x25, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x56, 0x75, 0x6c, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vuln_platform_proto_rawDescOnce sync.Once
	file_vuln_platform_proto_rawDescData = file_vuln_platform_proto_rawDesc
)

func file_vuln_platform_proto_rawDescGZIP() []byte {
	file_vuln_platform_proto_rawDescOnce.Do(func() {
		file_vuln_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_vuln_platform_proto_rawDescData)
	})
	return file_vuln_platform_proto_rawDescData
}

var file_vuln_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vuln_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_vuln_platform_proto_goTypes = []interface{}{
	(VulnerabilityRecord_Severity)(0), // 0: chainguard.platform.tenant.VulnerabilityRecord.Severity
	(Fix_State)(0),                    // 1: chainguard.platform.tenant.Fix.State
	(*VulnReport)(nil),                // 2: chainguard.platform.tenant.VulnReport
	(*Scanner)(nil),                   // 3: chainguard.platform.tenant.Scanner
	(*VulnerabilityMatch)(nil),        // 4: chainguard.platform.tenant.VulnerabilityMatch
	(*VulnerabilityRecord)(nil),       // 5: chainguard.platform.tenant.VulnerabilityRecord
	(*Fix)(nil),                       // 6: chainguard.platform.tenant.Fix
	(*VulnReportList)(nil),            // 7: chainguard.platform.tenant.VulnReportList
	(*VulnReportFilter)(nil),          // 8: chainguard.platform.tenant.VulnReportFilter
	(*VulnerabilityRecord_Cvss)(nil),  // 9: chainguard.platform.tenant.VulnerabilityRecord.Cvss
	nil,                               // 10: chainguard.platform.tenant.VulnerabilityRecord.AdvisoriesEntry
	(*VulnerabilityRecord_RelatedVulnerability)(nil), // 11: chainguard.platform.tenant.VulnerabilityRecord.RelatedVulnerability
	(*timestamppb.Timestamp)(nil),                    // 12: google.protobuf.Timestamp
	(*Package2)(nil),                                 // 13: chainguard.platform.tenant.Package2
	(*v1.UIDPFilter)(nil),                            // 14: chainguard.platform.common.UIDPFilter
}
var file_vuln_platform_proto_depIdxs = []int32{
	12, // 0: chainguard.platform.tenant.VulnReport.vulnerability_db_last_build_time:type_name -> google.protobuf.Timestamp
	4,  // 1: chainguard.platform.tenant.VulnReport.vulnerability_matches:type_name -> chainguard.platform.tenant.VulnerabilityMatch
	3,  // 2: chainguard.platform.tenant.VulnReport.scanner:type_name -> chainguard.platform.tenant.Scanner
	12, // 3: chainguard.platform.tenant.VulnReport.report_generation:type_name -> google.protobuf.Timestamp
	12, // 4: chainguard.platform.tenant.VulnReport.last_seen:type_name -> google.protobuf.Timestamp
	5,  // 5: chainguard.platform.tenant.VulnerabilityMatch.vulnerability:type_name -> chainguard.platform.tenant.VulnerabilityRecord
	13, // 6: chainguard.platform.tenant.VulnerabilityMatch.pkg:type_name -> chainguard.platform.tenant.Package2
	6,  // 7: chainguard.platform.tenant.VulnerabilityMatch.fix:type_name -> chainguard.platform.tenant.Fix
	0,  // 8: chainguard.platform.tenant.VulnerabilityRecord.severity:type_name -> chainguard.platform.tenant.VulnerabilityRecord.Severity
	9,  // 9: chainguard.platform.tenant.VulnerabilityRecord.cvss:type_name -> chainguard.platform.tenant.VulnerabilityRecord.Cvss
	10, // 10: chainguard.platform.tenant.VulnerabilityRecord.advisories:type_name -> chainguard.platform.tenant.VulnerabilityRecord.AdvisoriesEntry
	11, // 11: chainguard.platform.tenant.VulnerabilityRecord.related_vulnerabilities:type_name -> chainguard.platform.tenant.VulnerabilityRecord.RelatedVulnerability
	1,  // 12: chainguard.platform.tenant.Fix.state:type_name -> chainguard.platform.tenant.Fix.State
	2,  // 13: chainguard.platform.tenant.VulnReportList.items:type_name -> chainguard.platform.tenant.VulnReport
	14, // 14: chainguard.platform.tenant.VulnReportFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	12, // 15: chainguard.platform.tenant.VulnReportFilter.active_since:type_name -> google.protobuf.Timestamp
	8,  // 16: chainguard.platform.tenant.VulnReports.List:input_type -> chainguard.platform.tenant.VulnReportFilter
	7,  // 17: chainguard.platform.tenant.VulnReports.List:output_type -> chainguard.platform.tenant.VulnReportList
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_vuln_platform_proto_init() }
func file_vuln_platform_proto_init() {
	if File_vuln_platform_proto != nil {
		return
	}
	file_sbom_platform_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vuln_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityRecord_Cvss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vuln_platform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityRecord_RelatedVulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vuln_platform_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vuln_platform_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vuln_platform_proto_goTypes,
		DependencyIndexes: file_vuln_platform_proto_depIdxs,
		EnumInfos:         file_vuln_platform_proto_enumTypes,
		MessageInfos:      file_vuln_platform_proto_msgTypes,
	}.Build()
	File_vuln_platform_proto = out.File
	file_vuln_platform_proto_rawDesc = nil
	file_vuln_platform_proto_goTypes = nil
	file_vuln_platform_proto_depIdxs = nil
}
