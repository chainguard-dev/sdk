// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: policy_results.platform.proto

package v1

import (
	_ "chainguard.dev/sdk/proto/annotations"
	v1 "chainguard.dev/sdk/proto/platform/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyResult_Result int32

const (
	PolicyResult_UNKNOWN PolicyResult_Result = 0
	// PASS represents when a policy evaluation completed without any
	// diagnostics returned.
	PolicyResult_PASS PolicyResult_Result = 1
	// WARN represents when a policy evaluation completed with warnings
	// (e.g. the policy used mode: warn).
	PolicyResult_WARN PolicyResult_Result = 2
	// FAIL represents when a policy evaluation completed with errors
	// (e.g. the policy used mode: enforce).
	PolicyResult_FAIL PolicyResult_Result = 3
)

// Enum value maps for PolicyResult_Result.
var (
	PolicyResult_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "PASS",
		2: "WARN",
		3: "FAIL",
	}
	PolicyResult_Result_value = map[string]int32{
		"UNKNOWN": 0,
		"PASS":    1,
		"WARN":    2,
		"FAIL":    3,
	}
)

func (x PolicyResult_Result) Enum() *PolicyResult_Result {
	p := new(PolicyResult_Result)
	*p = x
	return p
}

func (x PolicyResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_results_platform_proto_enumTypes[0].Descriptor()
}

func (PolicyResult_Result) Type() protoreflect.EnumType {
	return &file_policy_results_platform_proto_enumTypes[0]
}

func (x PolicyResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyResult_Result.Descriptor instead.
func (PolicyResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{0, 0}
}

type PolicyResult_ParentType int32

const (
	PolicyResult_PARENT_TYPE_UNKNOWN PolicyResult_ParentType = 0
	PolicyResult_RECORD              PolicyResult_ParentType = 1
	PolicyResult_RECORD_CONTEXT      PolicyResult_ParentType = 2
	PolicyResult_WORKLOAD            PolicyResult_ParentType = 3
)

// Enum value maps for PolicyResult_ParentType.
var (
	PolicyResult_ParentType_name = map[int32]string{
		0: "PARENT_TYPE_UNKNOWN",
		1: "RECORD",
		2: "RECORD_CONTEXT",
		3: "WORKLOAD",
	}
	PolicyResult_ParentType_value = map[string]int32{
		"PARENT_TYPE_UNKNOWN": 0,
		"RECORD":              1,
		"RECORD_CONTEXT":      2,
		"WORKLOAD":            3,
	}
)

func (x PolicyResult_ParentType) Enum() *PolicyResult_ParentType {
	p := new(PolicyResult_ParentType)
	*p = x
	return p
}

func (x PolicyResult_ParentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyResult_ParentType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_results_platform_proto_enumTypes[1].Descriptor()
}

func (PolicyResult_ParentType) Type() protoreflect.EnumType {
	return &file_policy_results_platform_proto_enumTypes[1]
}

func (x PolicyResult_ParentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyResult_ParentType.Descriptor instead.
func (PolicyResult_ParentType) EnumDescriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{0, 1}
}

type PolicyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id, The PolicyResult UIDP at which this PolicyResult resides.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the PolicyResult.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// a short description of this PolicyResult.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// policy_id is the metadata.uid of the Policy this result captures an evaluation of.
	PolicyId string `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// version is the metadata.resourceVersion of the Policy this result captures an evaluation of.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// last_checked tracks the timestamp at which this policy result was last checked.
	LastChecked *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	// result holds the result of this policy evaluation.
	Result PolicyResult_Result `protobuf:"varint,7,opt,name=result,proto3,enum=chainguard.platform.tenant.PolicyResult_Result" json:"result,omitempty"`
	// diagnostic holds the diagnostic message associated with the result of this policy evaluation.
	Diagnostic string `protobuf:"bytes,8,opt,name=diagnostic,proto3" json:"diagnostic,omitempty"`
	// This loosely tracks the policy-controller's PolicyResult type found here:
	// https://github.com/sigstore/policy-controller/blob/f777dcc2e/pkg/webhook/validator_result.go
	AuthorityMatches map[string]*PolicyResult_AuthorityMatch `protobuf:"bytes,9,rep,name=authority_matches,json=authorityMatches,proto3" json:"authority_matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// parent_type, It is the parent type associated with the PolicyResult, can be Record, RecordContext or Workload.
	ParentType PolicyResult_ParentType `protobuf:"varint,10,opt,name=parent_type,json=parentType,proto3,enum=chainguard.platform.tenant.PolicyResult_ParentType" json:"parent_type,omitempty"`
}

func (x *PolicyResult) Reset() {
	*x = PolicyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_results_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResult) ProtoMessage() {}

func (x *PolicyResult) ProtoReflect() protoreflect.Message {
	mi := &file_policy_results_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResult.ProtoReflect.Descriptor instead.
func (*PolicyResult) Descriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PolicyResult) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PolicyResult) GetLastChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChecked
	}
	return nil
}

func (x *PolicyResult) GetResult() PolicyResult_Result {
	if x != nil {
		return x.Result
	}
	return PolicyResult_UNKNOWN
}

func (x *PolicyResult) GetDiagnostic() string {
	if x != nil {
		return x.Diagnostic
	}
	return ""
}

func (x *PolicyResult) GetAuthorityMatches() map[string]*PolicyResult_AuthorityMatch {
	if x != nil {
		return x.AuthorityMatches
	}
	return nil
}

func (x *PolicyResult) GetParentType() PolicyResult_ParentType {
	if x != nil {
		return x.ParentType
	}
	return PolicyResult_PARENT_TYPE_UNKNOWN
}

type PolicyResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PolicyResult `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyResultList) Reset() {
	*x = PolicyResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_results_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResultList) ProtoMessage() {}

func (x *PolicyResultList) ProtoReflect() protoreflect.Message {
	mi := &file_policy_results_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResultList.ProtoReflect.Descriptor instead.
func (*PolicyResultList) Descriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyResultList) GetItems() []*PolicyResult {
	if x != nil {
		return x.Items
	}
	return nil
}

type PolicyResultFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uidp *v1.UIDPFilter `protobuf:"bytes,1,opt,name=uidp,proto3" json:"uidp,omitempty"`
	// checked_since is the timestamp after which the policy should
	// have last been checked.
	CheckedSince *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=checked_since,json=checkedSince,proto3" json:"checked_since,omitempty"`
	// policy_id looks up evaluations of the policy identified by this metadata.uid
	PolicyId string `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// results filters policy results with one of the provided result.
	Results []PolicyResult_Result `protobuf:"varint,4,rep,packed,name=results,proto3,enum=chainguard.platform.tenant.PolicyResult_Result" json:"results,omitempty"`
	// parent_type filters policy results with the provided parent_type.
	ParentType PolicyResult_ParentType `protobuf:"varint,5,opt,name=parent_type,json=parentType,proto3,enum=chainguard.platform.tenant.PolicyResult_ParentType" json:"parent_type,omitempty"`
}

func (x *PolicyResultFilter) Reset() {
	*x = PolicyResultFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_results_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResultFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResultFilter) ProtoMessage() {}

func (x *PolicyResultFilter) ProtoReflect() protoreflect.Message {
	mi := &file_policy_results_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResultFilter.ProtoReflect.Descriptor instead.
func (*PolicyResultFilter) Descriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyResultFilter) GetUidp() *v1.UIDPFilter {
	if x != nil {
		return x.Uidp
	}
	return nil
}

func (x *PolicyResultFilter) GetCheckedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckedSince
	}
	return nil
}

func (x *PolicyResultFilter) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyResultFilter) GetResults() []PolicyResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PolicyResultFilter) GetParentType() PolicyResult_ParentType {
	if x != nil {
		return x.ParentType
	}
	return PolicyResult_PARENT_TYPE_UNKNOWN
}

type PolicyResult_AuthorityMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matched signatures.
	Signatures *PolicyResult_AuthorityMatch_SignatureMatches `protobuf:"bytes,1,opt,name=signatures,proto3" json:"signatures,omitempty"`
	// A map from attestation name to matched attestations.
	Attestations map[string]*PolicyResult_AuthorityMatch_SignatureMatches `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyResult_AuthorityMatch) Reset() {
	*x = PolicyResult_AuthorityMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_results_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResult_AuthorityMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResult_AuthorityMatch) ProtoMessage() {}

func (x *PolicyResult_AuthorityMatch) ProtoReflect() protoreflect.Message {
	mi := &file_policy_results_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResult_AuthorityMatch.ProtoReflect.Descriptor instead.
func (*PolicyResult_AuthorityMatch) Descriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PolicyResult_AuthorityMatch) GetSignatures() *PolicyResult_AuthorityMatch_SignatureMatches {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *PolicyResult_AuthorityMatch) GetAttestations() map[string]*PolicyResult_AuthorityMatch_SignatureMatches {
	if x != nil {
		return x.Attestations
	}
	return nil
}

type PolicyResult_AuthorityMatch_SignatureMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of signature record UIDPs
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *PolicyResult_AuthorityMatch_SignatureMatches) Reset() {
	*x = PolicyResult_AuthorityMatch_SignatureMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_results_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResult_AuthorityMatch_SignatureMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResult_AuthorityMatch_SignatureMatches) ProtoMessage() {}

func (x *PolicyResult_AuthorityMatch_SignatureMatches) ProtoReflect() protoreflect.Message {
	mi := &file_policy_results_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResult_AuthorityMatch_SignatureMatches.ProtoReflect.Descriptor instead.
func (*PolicyResult_AuthorityMatch_SignatureMatches) Descriptor() ([]byte, []int) {
	return file_policy_results_platform_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *PolicyResult_AuthorityMatch_SignatureMatches) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_policy_results_platform_proto protoreflect.FileDescriptor

var file_policy_results_platform_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x09, 0x0a,
	0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x6b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x7c, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x9b, 0x03, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x89, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x24, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x10, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xcf, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x49, 0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x75, 0x69,
	0x64, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x85, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2c, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x0e, 0x8a, 0xaf, 0xa8, 0xd2, 0x05,
	0x08, 0x12, 0x06, 0x0a, 0x02, 0xf9, 0x04, 0x10, 0x01, 0x42, 0x77, 0x0a, 0x25, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x42, 0x1f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_results_platform_proto_rawDescOnce sync.Once
	file_policy_results_platform_proto_rawDescData = file_policy_results_platform_proto_rawDesc
)

func file_policy_results_platform_proto_rawDescGZIP() []byte {
	file_policy_results_platform_proto_rawDescOnce.Do(func() {
		file_policy_results_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_results_platform_proto_rawDescData)
	})
	return file_policy_results_platform_proto_rawDescData
}

var file_policy_results_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_policy_results_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_policy_results_platform_proto_goTypes = []interface{}{
	(PolicyResult_Result)(0),            // 0: chainguard.platform.tenant.PolicyResult.Result
	(PolicyResult_ParentType)(0),        // 1: chainguard.platform.tenant.PolicyResult.ParentType
	(*PolicyResult)(nil),                // 2: chainguard.platform.tenant.PolicyResult
	(*PolicyResultList)(nil),            // 3: chainguard.platform.tenant.PolicyResultList
	(*PolicyResultFilter)(nil),          // 4: chainguard.platform.tenant.PolicyResultFilter
	nil,                                 // 5: chainguard.platform.tenant.PolicyResult.AuthorityMatchesEntry
	(*PolicyResult_AuthorityMatch)(nil), // 6: chainguard.platform.tenant.PolicyResult.AuthorityMatch
	nil,                                 // 7: chainguard.platform.tenant.PolicyResult.AuthorityMatch.AttestationsEntry
	(*PolicyResult_AuthorityMatch_SignatureMatches)(nil), // 8: chainguard.platform.tenant.PolicyResult.AuthorityMatch.SignatureMatches
	(*timestamppb.Timestamp)(nil),                        // 9: google.protobuf.Timestamp
	(*v1.UIDPFilter)(nil),                                // 10: chainguard.platform.common.UIDPFilter
}
var file_policy_results_platform_proto_depIdxs = []int32{
	9,  // 0: chainguard.platform.tenant.PolicyResult.last_checked:type_name -> google.protobuf.Timestamp
	0,  // 1: chainguard.platform.tenant.PolicyResult.result:type_name -> chainguard.platform.tenant.PolicyResult.Result
	5,  // 2: chainguard.platform.tenant.PolicyResult.authority_matches:type_name -> chainguard.platform.tenant.PolicyResult.AuthorityMatchesEntry
	1,  // 3: chainguard.platform.tenant.PolicyResult.parent_type:type_name -> chainguard.platform.tenant.PolicyResult.ParentType
	2,  // 4: chainguard.platform.tenant.PolicyResultList.items:type_name -> chainguard.platform.tenant.PolicyResult
	10, // 5: chainguard.platform.tenant.PolicyResultFilter.uidp:type_name -> chainguard.platform.common.UIDPFilter
	9,  // 6: chainguard.platform.tenant.PolicyResultFilter.checked_since:type_name -> google.protobuf.Timestamp
	0,  // 7: chainguard.platform.tenant.PolicyResultFilter.results:type_name -> chainguard.platform.tenant.PolicyResult.Result
	1,  // 8: chainguard.platform.tenant.PolicyResultFilter.parent_type:type_name -> chainguard.platform.tenant.PolicyResult.ParentType
	6,  // 9: chainguard.platform.tenant.PolicyResult.AuthorityMatchesEntry.value:type_name -> chainguard.platform.tenant.PolicyResult.AuthorityMatch
	8,  // 10: chainguard.platform.tenant.PolicyResult.AuthorityMatch.signatures:type_name -> chainguard.platform.tenant.PolicyResult.AuthorityMatch.SignatureMatches
	7,  // 11: chainguard.platform.tenant.PolicyResult.AuthorityMatch.attestations:type_name -> chainguard.platform.tenant.PolicyResult.AuthorityMatch.AttestationsEntry
	8,  // 12: chainguard.platform.tenant.PolicyResult.AuthorityMatch.AttestationsEntry.value:type_name -> chainguard.platform.tenant.PolicyResult.AuthorityMatch.SignatureMatches
	4,  // 13: chainguard.platform.tenant.PolicyResults.List:input_type -> chainguard.platform.tenant.PolicyResultFilter
	3,  // 14: chainguard.platform.tenant.PolicyResults.List:output_type -> chainguard.platform.tenant.PolicyResultList
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_policy_results_platform_proto_init() }
func file_policy_results_platform_proto_init() {
	if File_policy_results_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_results_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_results_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_results_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResultFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_results_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResult_AuthorityMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_results_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResult_AuthorityMatch_SignatureMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_results_platform_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_results_platform_proto_goTypes,
		DependencyIndexes: file_policy_results_platform_proto_depIdxs,
		EnumInfos:         file_policy_results_platform_proto_enumTypes,
		MessageInfos:      file_policy_results_platform_proto_msgTypes,
	}.Build()
	File_policy_results_platform_proto = out.File
	file_policy_results_platform_proto_rawDesc = nil
	file_policy_results_platform_proto_goTypes = nil
	file_policy_results_platform_proto_depIdxs = nil
}
