syntax = "proto3";

option go_package = "chainguard.dev/sdk/proto/platform/tenant/v1";
option java_multiple_files = true;
option java_package = "dev.chainguard.sdk.platform.tenant.v1";
option java_outer_classname = "PlatformTenantClusterProto";

package chainguard.platform.tenant;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "annotations/auth.proto";
import "platform/common/v1/uidp.platform.proto";

service Records {
  rpc List(RecordFilter) returns (RecordList) {
    option (google.api.http) = {
      // TODO: I am not sure this inner cluster will work with our id. Gotta test.
      get: "/tenant/v1/clusters/{cluster}/records"
    };
    option (chainguard.annotations.iam) = {
      enabled: {
        capabilities: [CAP_TENANT_RECORDS_LIST]
        unscoped: true
      }
    };
  }
}

message Record {
  // id holds the UIDP for this image's record
  string id = 7;

  // cluster identifies the specific cluster for the record.
  string cluster = 1;

  // image is the container image for the record.
  string image = 2;

  // last_seen is the last time we've seen this image anywhere on this cluster.
  google.protobuf.Timestamp last_seen = 3;

  // last_refreshed will hold a PredicateType => Last time it was successfully
  // refreshed.
  map<string, google.protobuf.Timestamp> last_refreshed = 4;

  // This field was retired and is no longer served.
  reserved 5;

  repeated Sbom sboms = 6;

  // This field was retired and is no longer served.
  reserved 8;

	// status is a map from analysis type (e.g. "sbom", "vuln") => RecordStatus to indidate success/failure,
	// the analysis timestamp, as well as any diagnostic message in case of failures.
  map<string, RecordStatus> status = 9;
}

message RecordStatus {
  google.protobuf.Timestamp last_checked = 1;
  Result result = 2;
  string diagnostic = 3;

  enum Result {
    UNKNOWN = 0;
    PASS    = 1;
    FAIL    = 2;
  }
}

message Context {
  // context_id is a unique ID, output only.
  string context_id = 1;

  // last_seen is the last time we've seen the image_id in this context.
  google.protobuf.Timestamp last_seen = 2;

  oneof context {
    Workload workload = 10;
    Ancestry ancestry = 11;
    Variant  variant = 12;
  }

  // Workload contexts are added to existence records that have been
  // observed running on a cluster.
  message Workload {
    GroupVersionKind kind = 1;
    string           namespace = 2;
    string           name = 3;
    string           uid = 4;
  }

  // Ancestry relationships are added to records when a "base image"
  // relationship has been uncovered.  This context is added to BOTH
  // records with their respective roles.  The base image will get
  // the Role BASE, and the derivative image will get the Rile DERIVED.
  message Ancestry {
    Role role = 1;

    // The id of the other image's record in this ancestry relationship.
    // If our Role is BASE, then this will hold the ID of the DERIVED
    // image's record, and vice versa.
    string id = 2;

    enum Role {
      UNKNOWN = 0;
      BASE    = 1;
      DERIVED = 2;
    }
  }

  // Variant relationships are added to records when we find an "index"
  // containing multiple different variations (typically os/arch) of the
  // same logical image.  These are referred to as "OCI Image Index",
  // "Docker Manifest List", and occasionally "fat images".  This context
  // is added to ALL records including the INDEX and all VARIANTs of that
  // index.  The INDEX will typically contain N contexts carrying the Role
  // INDEX, the id of the VARIANT's record, and the version information
  // that discriminates that VARIANT from other VARIANTs.  The VARIANT
  // will typically (but not always!) contain 1 context varrying the Role
  // VARIANT, the id of the INDEX's record, and the version information
  // that discriminates it among the other VARIANTs in the INDEX.
  message Variant {
    Role role = 1;

    // The id of the image index's record linking this
    // image (transitively) to the cluster.
    string id = 2;

    // The version information distinguishing this variant
    // from other possible variants of the index.
    string version = 3;

    enum Role {
      UNKNOWN = 0;
      INDEX   = 1;
      VARIANT = 2;
    }
  }
}

message Sbom {
  repeated Package packages = 1;
}

message Package {
  string name = 1;
  string version = 2;
  string purl = 3;
}

message Policy {
  // last_checked holds when this policy was last evaluated.
  google.protobuf.Timestamp last_checked = 1;

  // valid holds whether the policy evaluation was successful.
  bool valid = 2;

  // diagnostic holds any messages surfaced by the policy evaluation.
  string diagnostic = 3;

  reserved 4;
}

message RecordList {
    repeated Record items = 1;
}

message RecordFilter {
  // id is the exact UID of the record.
  string id = 5;

  // uidp filters records based on their position in the group hierarchy.
  chainguard.platform.common.UIDPFilter uidp = 6;

  // image is specified if a specific Record is desired.
  string image = 1;

  // predicate specifies to fetch Records where either there's no
  // LastRefreshed for this predicate type, or if it needs to be refreshed.
  string predicate = 2;

  // cluster is specified if restricting to a given cluster id.
  // This field is required.
  string cluster = 3;

  // active_since is the timestamp after which returned records should have been active.
  // This applies to when an image was "last seen".
  google.protobuf.Timestamp active_since = 4;

  // This field was retired and is no longer served.
  reserved 7;

  // Next ID: 8
}

// TODO: Replace with upstream proto messages wherever possible.
message GroupVersionKind {
  string group = 1;
  string version = 2;
  string kind = 3;
}
